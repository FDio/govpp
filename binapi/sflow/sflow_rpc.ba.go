// Code generated by GoVPP's binapi-generator. DO NOT EDIT.

package sflow

import (
	"context"
	"fmt"
	"io"

	api "go.fd.io/govpp/api"
	memclnt "go.fd.io/govpp/binapi/memclnt"
)

// RPCService defines RPC service sflow.
type RPCService interface {
	SflowDirectionGet(ctx context.Context, in *SflowDirectionGet) (*SflowDirectionGetReply, error)
	SflowDirectionSet(ctx context.Context, in *SflowDirectionSet) (*SflowDirectionSetReply, error)
	SflowDropMonitoringGet(ctx context.Context, in *SflowDropMonitoringGet) (*SflowDropMonitoringGetReply, error)
	SflowDropMonitoringSet(ctx context.Context, in *SflowDropMonitoringSet) (*SflowDropMonitoringSetReply, error)
	SflowEnableDisable(ctx context.Context, in *SflowEnableDisable) (*SflowEnableDisableReply, error)
	SflowHeaderBytesGet(ctx context.Context, in *SflowHeaderBytesGet) (*SflowHeaderBytesGetReply, error)
	SflowHeaderBytesSet(ctx context.Context, in *SflowHeaderBytesSet) (*SflowHeaderBytesSetReply, error)
	SflowInterfaceDump(ctx context.Context, in *SflowInterfaceDump) (RPCService_SflowInterfaceDumpClient, error)
	SflowPollingIntervalGet(ctx context.Context, in *SflowPollingIntervalGet) (*SflowPollingIntervalGetReply, error)
	SflowPollingIntervalSet(ctx context.Context, in *SflowPollingIntervalSet) (*SflowPollingIntervalSetReply, error)
	SflowSamplingRateGet(ctx context.Context, in *SflowSamplingRateGet) (*SflowSamplingRateGetReply, error)
	SflowSamplingRateSet(ctx context.Context, in *SflowSamplingRateSet) (*SflowSamplingRateSetReply, error)
}

type serviceClient struct {
	conn api.Connection
}

func NewServiceClient(conn api.Connection) RPCService {
	return &serviceClient{conn}
}

func (c *serviceClient) SflowDirectionGet(ctx context.Context, in *SflowDirectionGet) (*SflowDirectionGetReply, error) {
	out := new(SflowDirectionGetReply)
	err := c.conn.Invoke(ctx, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) SflowDirectionSet(ctx context.Context, in *SflowDirectionSet) (*SflowDirectionSetReply, error) {
	out := new(SflowDirectionSetReply)
	err := c.conn.Invoke(ctx, in, out)
	if err != nil {
		return nil, err
	}
	return out, api.RetvalToVPPApiError(out.Retval)
}

func (c *serviceClient) SflowDropMonitoringGet(ctx context.Context, in *SflowDropMonitoringGet) (*SflowDropMonitoringGetReply, error) {
	out := new(SflowDropMonitoringGetReply)
	err := c.conn.Invoke(ctx, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) SflowDropMonitoringSet(ctx context.Context, in *SflowDropMonitoringSet) (*SflowDropMonitoringSetReply, error) {
	out := new(SflowDropMonitoringSetReply)
	err := c.conn.Invoke(ctx, in, out)
	if err != nil {
		return nil, err
	}
	return out, api.RetvalToVPPApiError(out.Retval)
}

func (c *serviceClient) SflowEnableDisable(ctx context.Context, in *SflowEnableDisable) (*SflowEnableDisableReply, error) {
	out := new(SflowEnableDisableReply)
	err := c.conn.Invoke(ctx, in, out)
	if err != nil {
		return nil, err
	}
	return out, api.RetvalToVPPApiError(out.Retval)
}

func (c *serviceClient) SflowHeaderBytesGet(ctx context.Context, in *SflowHeaderBytesGet) (*SflowHeaderBytesGetReply, error) {
	out := new(SflowHeaderBytesGetReply)
	err := c.conn.Invoke(ctx, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) SflowHeaderBytesSet(ctx context.Context, in *SflowHeaderBytesSet) (*SflowHeaderBytesSetReply, error) {
	out := new(SflowHeaderBytesSetReply)
	err := c.conn.Invoke(ctx, in, out)
	if err != nil {
		return nil, err
	}
	return out, api.RetvalToVPPApiError(out.Retval)
}

func (c *serviceClient) SflowInterfaceDump(ctx context.Context, in *SflowInterfaceDump) (RPCService_SflowInterfaceDumpClient, error) {
	stream, err := c.conn.NewStream(ctx)
	if err != nil {
		return nil, err
	}
	x := &serviceClient_SflowInterfaceDumpClient{stream}
	if err := x.Stream.SendMsg(in); err != nil {
		return nil, err
	}
	if err = x.Stream.SendMsg(&memclnt.ControlPing{}); err != nil {
		return nil, err
	}
	return x, nil
}

type RPCService_SflowInterfaceDumpClient interface {
	Recv() (*SflowInterfaceDetails, error)
	api.Stream
}

type serviceClient_SflowInterfaceDumpClient struct {
	api.Stream
}

func (c *serviceClient_SflowInterfaceDumpClient) Recv() (*SflowInterfaceDetails, error) {
	msg, err := c.Stream.RecvMsg()
	if err != nil {
		return nil, err
	}
	switch m := msg.(type) {
	case *SflowInterfaceDetails:
		return m, nil
	case *memclnt.ControlPingReply:
		err = c.Stream.Close()
		if err != nil {
			return nil, err
		}
		return nil, io.EOF
	default:
		return nil, fmt.Errorf("unexpected message: %T %v", m, m)
	}
}

func (c *serviceClient) SflowPollingIntervalGet(ctx context.Context, in *SflowPollingIntervalGet) (*SflowPollingIntervalGetReply, error) {
	out := new(SflowPollingIntervalGetReply)
	err := c.conn.Invoke(ctx, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) SflowPollingIntervalSet(ctx context.Context, in *SflowPollingIntervalSet) (*SflowPollingIntervalSetReply, error) {
	out := new(SflowPollingIntervalSetReply)
	err := c.conn.Invoke(ctx, in, out)
	if err != nil {
		return nil, err
	}
	return out, api.RetvalToVPPApiError(out.Retval)
}

func (c *serviceClient) SflowSamplingRateGet(ctx context.Context, in *SflowSamplingRateGet) (*SflowSamplingRateGetReply, error) {
	out := new(SflowSamplingRateGetReply)
	err := c.conn.Invoke(ctx, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) SflowSamplingRateSet(ctx context.Context, in *SflowSamplingRateSet) (*SflowSamplingRateSetReply, error) {
	out := new(SflowSamplingRateSetReply)
	err := c.conn.Invoke(ctx, in, out)
	if err != nil {
		return nil, err
	}
	return out, api.RetvalToVPPApiError(out.Retval)
}

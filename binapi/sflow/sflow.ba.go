// Code generated by GoVPP's binapi-generator. DO NOT EDIT.
// versions:
//  binapi-generator: v0.11.0
//  VPP:              25.02-release
// source: plugins/sflow.api.json

// Package sflow contains generated bindings for API file sflow.api.
//
// Contents:
// - 16 messages
package sflow

import (
	api "go.fd.io/govpp/api"
	interface_types "go.fd.io/govpp/binapi/interface_types"
	codec "go.fd.io/govpp/codec"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the GoVPP api package it is being compiled against.
// A compilation error at this line likely means your copy of the
// GoVPP api package needs to be updated.
const _ = api.GoVppAPIPackageIsVersion2

const (
	APIFile    = "sflow"
	APIVersion = "0.1.0"
	VersionCrc = 0x1dbda905
)

// @brief API to enable / disable sflow
//   - enable_disable - 1 to enable, 0 to disable the feature
//   - hw_if_index - hardware interface handle
//
// SflowEnableDisable defines message 'sflow_enable_disable'.
type SflowEnableDisable struct {
	EnableDisable bool                           `binapi:"bool,name=enable_disable" json:"enable_disable,omitempty"`
	HwIfIndex     interface_types.InterfaceIndex `binapi:"interface_index,name=hw_if_index" json:"hw_if_index,omitempty"`
}

func (m *SflowEnableDisable) Reset()               { *m = SflowEnableDisable{} }
func (*SflowEnableDisable) GetMessageName() string { return "sflow_enable_disable" }
func (*SflowEnableDisable) GetCrcString() string   { return "8499814f" }
func (*SflowEnableDisable) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *SflowEnableDisable) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1 // m.EnableDisable
	size += 4 // m.HwIfIndex
	return size
}
func (m *SflowEnableDisable) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeBool(m.EnableDisable)
	buf.EncodeUint32(uint32(m.HwIfIndex))
	return buf.Bytes(), nil
}
func (m *SflowEnableDisable) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.EnableDisable = buf.DecodeBool()
	m.HwIfIndex = interface_types.InterfaceIndex(buf.DecodeUint32())
	return nil
}

// SflowEnableDisableReply defines message 'sflow_enable_disable_reply'.
type SflowEnableDisableReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *SflowEnableDisableReply) Reset()               { *m = SflowEnableDisableReply{} }
func (*SflowEnableDisableReply) GetMessageName() string { return "sflow_enable_disable_reply" }
func (*SflowEnableDisableReply) GetCrcString() string   { return "e8d4e804" }
func (*SflowEnableDisableReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *SflowEnableDisableReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *SflowEnableDisableReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *SflowEnableDisableReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// @brief API to get sflow header-bytes
// SflowHeaderBytesGet defines message 'sflow_header_bytes_get'.
type SflowHeaderBytesGet struct{}

func (m *SflowHeaderBytesGet) Reset()               { *m = SflowHeaderBytesGet{} }
func (*SflowHeaderBytesGet) GetMessageName() string { return "sflow_header_bytes_get" }
func (*SflowHeaderBytesGet) GetCrcString() string   { return "51077d14" }
func (*SflowHeaderBytesGet) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *SflowHeaderBytesGet) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *SflowHeaderBytesGet) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *SflowHeaderBytesGet) Unmarshal(b []byte) error {
	return nil
}

// API go the sflow header-bytes
//   - header_B - current maximum header length in bytes
//
// SflowHeaderBytesGetReply defines message 'sflow_header_bytes_get_reply'.
// InProgress: the message form may change in the future versions
type SflowHeaderBytesGetReply struct {
	HeaderB uint32 `binapi:"u32,name=header_B" json:"header_B,omitempty"`
}

func (m *SflowHeaderBytesGetReply) Reset()               { *m = SflowHeaderBytesGetReply{} }
func (*SflowHeaderBytesGetReply) GetMessageName() string { return "sflow_header_bytes_get_reply" }
func (*SflowHeaderBytesGetReply) GetCrcString() string   { return "624c95b9" }
func (*SflowHeaderBytesGetReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *SflowHeaderBytesGetReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.HeaderB
	return size
}
func (m *SflowHeaderBytesGetReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.HeaderB)
	return buf.Bytes(), nil
}
func (m *SflowHeaderBytesGetReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.HeaderB = buf.DecodeUint32()
	return nil
}

// @brief API to set sflow header-bytes
//   - header_B - max header length in bytes
//
// SflowHeaderBytesSet defines message 'sflow_header_bytes_set'.
type SflowHeaderBytesSet struct {
	HeaderB uint32 `binapi:"u32,name=header_B,default=128" json:"header_B,omitempty"`
}

func (m *SflowHeaderBytesSet) Reset()               { *m = SflowHeaderBytesSet{} }
func (*SflowHeaderBytesSet) GetMessageName() string { return "sflow_header_bytes_set" }
func (*SflowHeaderBytesSet) GetCrcString() string   { return "5baf56f3" }
func (*SflowHeaderBytesSet) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *SflowHeaderBytesSet) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.HeaderB
	return size
}
func (m *SflowHeaderBytesSet) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.HeaderB)
	return buf.Bytes(), nil
}
func (m *SflowHeaderBytesSet) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.HeaderB = buf.DecodeUint32()
	return nil
}

// SflowHeaderBytesSetReply defines message 'sflow_header_bytes_set_reply'.
type SflowHeaderBytesSetReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *SflowHeaderBytesSetReply) Reset()               { *m = SflowHeaderBytesSetReply{} }
func (*SflowHeaderBytesSetReply) GetMessageName() string { return "sflow_header_bytes_set_reply" }
func (*SflowHeaderBytesSetReply) GetCrcString() string   { return "e8d4e804" }
func (*SflowHeaderBytesSetReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *SflowHeaderBytesSetReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *SflowHeaderBytesSetReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *SflowHeaderBytesSetReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// sflow enabled interface details
// SflowInterfaceDetails defines message 'sflow_interface_details'.
type SflowInterfaceDetails struct {
	HwIfIndex interface_types.InterfaceIndex `binapi:"interface_index,name=hw_if_index" json:"hw_if_index,omitempty"`
}

func (m *SflowInterfaceDetails) Reset()               { *m = SflowInterfaceDetails{} }
func (*SflowInterfaceDetails) GetMessageName() string { return "sflow_interface_details" }
func (*SflowInterfaceDetails) GetCrcString() string   { return "b7b9143f" }
func (*SflowInterfaceDetails) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *SflowInterfaceDetails) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.HwIfIndex
	return size
}
func (m *SflowInterfaceDetails) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(uint32(m.HwIfIndex))
	return buf.Bytes(), nil
}
func (m *SflowInterfaceDetails) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.HwIfIndex = interface_types.InterfaceIndex(buf.DecodeUint32())
	return nil
}

// Dump sflow enabled interface(s)
//   - hw_if_index - hw_if_index of a specific interface, or -1 (default)
//     to return all sflow enabled interfaces
//
// SflowInterfaceDump defines message 'sflow_interface_dump'.
type SflowInterfaceDump struct {
	HwIfIndex interface_types.InterfaceIndex `binapi:"interface_index,name=hw_if_index,default=4294967295" json:"hw_if_index,omitempty"`
}

func (m *SflowInterfaceDump) Reset()               { *m = SflowInterfaceDump{} }
func (*SflowInterfaceDump) GetMessageName() string { return "sflow_interface_dump" }
func (*SflowInterfaceDump) GetCrcString() string   { return "451a727d" }
func (*SflowInterfaceDump) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *SflowInterfaceDump) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.HwIfIndex
	return size
}
func (m *SflowInterfaceDump) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(uint32(m.HwIfIndex))
	return buf.Bytes(), nil
}
func (m *SflowInterfaceDump) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.HwIfIndex = interface_types.InterfaceIndex(buf.DecodeUint32())
	return nil
}

// @brief API to get sflow polling-interval
// SflowPollingIntervalGet defines message 'sflow_polling_interval_get'.
type SflowPollingIntervalGet struct{}

func (m *SflowPollingIntervalGet) Reset()               { *m = SflowPollingIntervalGet{} }
func (*SflowPollingIntervalGet) GetMessageName() string { return "sflow_polling_interval_get" }
func (*SflowPollingIntervalGet) GetCrcString() string   { return "51077d14" }
func (*SflowPollingIntervalGet) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *SflowPollingIntervalGet) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *SflowPollingIntervalGet) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *SflowPollingIntervalGet) Unmarshal(b []byte) error {
	return nil
}

// API go the sflow polling-interval
//   - polling_S - current polling interval in seconds
//
// SflowPollingIntervalGetReply defines message 'sflow_polling_interval_get_reply'.
// InProgress: the message form may change in the future versions
type SflowPollingIntervalGetReply struct {
	PollingS uint32 `binapi:"u32,name=polling_S" json:"polling_S,omitempty"`
}

func (m *SflowPollingIntervalGetReply) Reset() { *m = SflowPollingIntervalGetReply{} }
func (*SflowPollingIntervalGetReply) GetMessageName() string {
	return "sflow_polling_interval_get_reply"
}
func (*SflowPollingIntervalGetReply) GetCrcString() string { return "e929801c" }
func (*SflowPollingIntervalGetReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *SflowPollingIntervalGetReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.PollingS
	return size
}
func (m *SflowPollingIntervalGetReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.PollingS)
	return buf.Bytes(), nil
}
func (m *SflowPollingIntervalGetReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.PollingS = buf.DecodeUint32()
	return nil
}

// @brief API to set sflow polling-interval
//   - polling_S - polling interval in seconds
//
// SflowPollingIntervalSet defines message 'sflow_polling_interval_set'.
type SflowPollingIntervalSet struct {
	PollingS uint32 `binapi:"u32,name=polling_S,default=20" json:"polling_S,omitempty"`
}

func (m *SflowPollingIntervalSet) Reset()               { *m = SflowPollingIntervalSet{} }
func (*SflowPollingIntervalSet) GetMessageName() string { return "sflow_polling_interval_set" }
func (*SflowPollingIntervalSet) GetCrcString() string   { return "7f19cb51" }
func (*SflowPollingIntervalSet) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *SflowPollingIntervalSet) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.PollingS
	return size
}
func (m *SflowPollingIntervalSet) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.PollingS)
	return buf.Bytes(), nil
}
func (m *SflowPollingIntervalSet) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.PollingS = buf.DecodeUint32()
	return nil
}

// SflowPollingIntervalSetReply defines message 'sflow_polling_interval_set_reply'.
type SflowPollingIntervalSetReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *SflowPollingIntervalSetReply) Reset() { *m = SflowPollingIntervalSetReply{} }
func (*SflowPollingIntervalSetReply) GetMessageName() string {
	return "sflow_polling_interval_set_reply"
}
func (*SflowPollingIntervalSetReply) GetCrcString() string { return "e8d4e804" }
func (*SflowPollingIntervalSetReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *SflowPollingIntervalSetReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *SflowPollingIntervalSetReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *SflowPollingIntervalSetReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// @brief API to get sflow sampling-rate
// SflowSamplingRateGet defines message 'sflow_sampling_rate_get'.
type SflowSamplingRateGet struct{}

func (m *SflowSamplingRateGet) Reset()               { *m = SflowSamplingRateGet{} }
func (*SflowSamplingRateGet) GetMessageName() string { return "sflow_sampling_rate_get" }
func (*SflowSamplingRateGet) GetCrcString() string   { return "51077d14" }
func (*SflowSamplingRateGet) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *SflowSamplingRateGet) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *SflowSamplingRateGet) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *SflowSamplingRateGet) Unmarshal(b []byte) error {
	return nil
}

// API go the sflow sampling-rate
//   - sampling_N - the current 1-in-N sampling rate
//
// SflowSamplingRateGetReply defines message 'sflow_sampling_rate_get_reply'.
// InProgress: the message form may change in the future versions
type SflowSamplingRateGetReply struct {
	SamplingN uint32 `binapi:"u32,name=sampling_N" json:"sampling_N,omitempty"`
}

func (m *SflowSamplingRateGetReply) Reset()               { *m = SflowSamplingRateGetReply{} }
func (*SflowSamplingRateGetReply) GetMessageName() string { return "sflow_sampling_rate_get_reply" }
func (*SflowSamplingRateGetReply) GetCrcString() string   { return "9c8c8236" }
func (*SflowSamplingRateGetReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *SflowSamplingRateGetReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.SamplingN
	return size
}
func (m *SflowSamplingRateGetReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.SamplingN)
	return buf.Bytes(), nil
}
func (m *SflowSamplingRateGetReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.SamplingN = buf.DecodeUint32()
	return nil
}

// @brief API to set sflow sampling-rate
//   - sampling_N - 1-in-N random sampling rate
//
// SflowSamplingRateSet defines message 'sflow_sampling_rate_set'.
type SflowSamplingRateSet struct {
	SamplingN uint32 `binapi:"u32,name=sampling_N,default=10000" json:"sampling_N,omitempty"`
}

func (m *SflowSamplingRateSet) Reset()               { *m = SflowSamplingRateSet{} }
func (*SflowSamplingRateSet) GetMessageName() string { return "sflow_sampling_rate_set" }
func (*SflowSamplingRateSet) GetCrcString() string   { return "94778f50" }
func (*SflowSamplingRateSet) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *SflowSamplingRateSet) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.SamplingN
	return size
}
func (m *SflowSamplingRateSet) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.SamplingN)
	return buf.Bytes(), nil
}
func (m *SflowSamplingRateSet) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.SamplingN = buf.DecodeUint32()
	return nil
}

// SflowSamplingRateSetReply defines message 'sflow_sampling_rate_set_reply'.
type SflowSamplingRateSetReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *SflowSamplingRateSetReply) Reset()               { *m = SflowSamplingRateSetReply{} }
func (*SflowSamplingRateSetReply) GetMessageName() string { return "sflow_sampling_rate_set_reply" }
func (*SflowSamplingRateSetReply) GetCrcString() string   { return "e8d4e804" }
func (*SflowSamplingRateSetReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *SflowSamplingRateSetReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *SflowSamplingRateSetReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *SflowSamplingRateSetReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

func init() { file_sflow_binapi_init() }
func file_sflow_binapi_init() {
	api.RegisterMessage((*SflowEnableDisable)(nil), "sflow_enable_disable_8499814f")
	api.RegisterMessage((*SflowEnableDisableReply)(nil), "sflow_enable_disable_reply_e8d4e804")
	api.RegisterMessage((*SflowHeaderBytesGet)(nil), "sflow_header_bytes_get_51077d14")
	api.RegisterMessage((*SflowHeaderBytesGetReply)(nil), "sflow_header_bytes_get_reply_624c95b9")
	api.RegisterMessage((*SflowHeaderBytesSet)(nil), "sflow_header_bytes_set_5baf56f3")
	api.RegisterMessage((*SflowHeaderBytesSetReply)(nil), "sflow_header_bytes_set_reply_e8d4e804")
	api.RegisterMessage((*SflowInterfaceDetails)(nil), "sflow_interface_details_b7b9143f")
	api.RegisterMessage((*SflowInterfaceDump)(nil), "sflow_interface_dump_451a727d")
	api.RegisterMessage((*SflowPollingIntervalGet)(nil), "sflow_polling_interval_get_51077d14")
	api.RegisterMessage((*SflowPollingIntervalGetReply)(nil), "sflow_polling_interval_get_reply_e929801c")
	api.RegisterMessage((*SflowPollingIntervalSet)(nil), "sflow_polling_interval_set_7f19cb51")
	api.RegisterMessage((*SflowPollingIntervalSetReply)(nil), "sflow_polling_interval_set_reply_e8d4e804")
	api.RegisterMessage((*SflowSamplingRateGet)(nil), "sflow_sampling_rate_get_51077d14")
	api.RegisterMessage((*SflowSamplingRateGetReply)(nil), "sflow_sampling_rate_get_reply_9c8c8236")
	api.RegisterMessage((*SflowSamplingRateSet)(nil), "sflow_sampling_rate_set_94778f50")
	api.RegisterMessage((*SflowSamplingRateSetReply)(nil), "sflow_sampling_rate_set_reply_e8d4e804")
}

// Messages returns list of all messages in this module.
func AllMessages() []api.Message {
	return []api.Message{
		(*SflowEnableDisable)(nil),
		(*SflowEnableDisableReply)(nil),
		(*SflowHeaderBytesGet)(nil),
		(*SflowHeaderBytesGetReply)(nil),
		(*SflowHeaderBytesSet)(nil),
		(*SflowHeaderBytesSetReply)(nil),
		(*SflowInterfaceDetails)(nil),
		(*SflowInterfaceDump)(nil),
		(*SflowPollingIntervalGet)(nil),
		(*SflowPollingIntervalGetReply)(nil),
		(*SflowPollingIntervalSet)(nil),
		(*SflowPollingIntervalSetReply)(nil),
		(*SflowSamplingRateGet)(nil),
		(*SflowSamplingRateGetReply)(nil),
		(*SflowSamplingRateSet)(nil),
		(*SflowSamplingRateSetReply)(nil),
	}
}

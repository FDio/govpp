// Code generated by GoVPP's binapi-generator. DO NOT EDIT.
// versions:
//  binapi-generator: v0.10.0
//  VPP:              24.02-release
// source: plugins/tracenode.api.json

// Package tracenode contains generated bindings for API file tracenode.api.
//
// Contents:
// -  2 messages
package tracenode

import (
	api "go.fd.io/govpp/api"
	interface_types "go.fd.io/govpp/binapi/interface_types"
	codec "go.fd.io/govpp/codec"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the GoVPP api package it is being compiled against.
// A compilation error at this line likely means your copy of the
// GoVPP api package needs to be updated.
const _ = api.GoVppAPIPackageIsVersion2

const (
	APIFile    = "tracenode"
	APIVersion = "0.1.0"
	VersionCrc = 0xdbc1eb27
)

// Enable/disable trace filtering feature
//   - sw_if_index - interface on which to enable/disable trace filtering feature
//   - is_pcap - if non-zero enable the feature for pcap capture, else for trace
//   - enable - if non-zero then enable the feature, else disable it
//
// TracenodeEnableDisable defines message 'tracenode_enable_disable'.
type TracenodeEnableDisable struct {
	SwIfIndex interface_types.InterfaceIndex `binapi:"interface_index,name=sw_if_index" json:"sw_if_index,omitempty"`
	IsPcap    bool                           `binapi:"bool,name=is_pcap,default=false" json:"is_pcap,omitempty"`
	Enable    bool                           `binapi:"bool,name=enable,default=true" json:"enable,omitempty"`
}

func (m *TracenodeEnableDisable) Reset()               { *m = TracenodeEnableDisable{} }
func (*TracenodeEnableDisable) GetMessageName() string { return "tracenode_enable_disable" }
func (*TracenodeEnableDisable) GetCrcString() string   { return "4013643c" }
func (*TracenodeEnableDisable) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *TracenodeEnableDisable) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.SwIfIndex
	size += 1 // m.IsPcap
	size += 1 // m.Enable
	return size
}
func (m *TracenodeEnableDisable) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(uint32(m.SwIfIndex))
	buf.EncodeBool(m.IsPcap)
	buf.EncodeBool(m.Enable)
	return buf.Bytes(), nil
}
func (m *TracenodeEnableDisable) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.SwIfIndex = interface_types.InterfaceIndex(buf.DecodeUint32())
	m.IsPcap = buf.DecodeBool()
	m.Enable = buf.DecodeBool()
	return nil
}

// TracenodeEnableDisableReply defines message 'tracenode_enable_disable_reply'.
type TracenodeEnableDisableReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *TracenodeEnableDisableReply) Reset()               { *m = TracenodeEnableDisableReply{} }
func (*TracenodeEnableDisableReply) GetMessageName() string { return "tracenode_enable_disable_reply" }
func (*TracenodeEnableDisableReply) GetCrcString() string   { return "e8d4e804" }
func (*TracenodeEnableDisableReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *TracenodeEnableDisableReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *TracenodeEnableDisableReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *TracenodeEnableDisableReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

func init() { file_tracenode_binapi_init() }
func file_tracenode_binapi_init() {
	api.RegisterMessage((*TracenodeEnableDisable)(nil), "tracenode_enable_disable_4013643c")
	api.RegisterMessage((*TracenodeEnableDisableReply)(nil), "tracenode_enable_disable_reply_e8d4e804")
}

// Messages returns list of all messages in this module.
func AllMessages() []api.Message {
	return []api.Message{
		(*TracenodeEnableDisable)(nil),
		(*TracenodeEnableDisableReply)(nil),
	}
}

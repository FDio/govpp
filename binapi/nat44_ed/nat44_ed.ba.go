// Code generated by GoVPP's binapi-generator. DO NOT EDIT.
// versions:
//  binapi-generator: v0.8.0
//  VPP:              23.06-release
// source: plugins/nat44_ed.api.json

// Package nat44_ed contains generated bindings for API file nat44_ed.api.
//
// Contents:
// -  1 enum
// -  1 struct
// - 75 messages
package nat44_ed

import (
	"strconv"

	api "go.fd.io/govpp/api"
	interface_types "go.fd.io/govpp/binapi/interface_types"
	ip_types "go.fd.io/govpp/binapi/ip_types"
	nat_types "go.fd.io/govpp/binapi/nat_types"
	codec "go.fd.io/govpp/codec"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the GoVPP api package it is being compiled against.
// A compilation error at this line likely means your copy of the
// GoVPP api package needs to be updated.
const _ = api.GoVppAPIPackageIsVersion2

const (
	APIFile    = "nat44_ed"
	APIVersion = "5.5.0"
	VersionCrc = 0x6f9bc302
)

// Nat44ConfigFlags defines enum 'nat44_config_flags'.
type Nat44ConfigFlags uint8

const (
	NAT44_IS_ENDPOINT_INDEPENDENT Nat44ConfigFlags = 0
	NAT44_IS_ENDPOINT_DEPENDENT   Nat44ConfigFlags = 1
	NAT44_IS_STATIC_MAPPING_ONLY  Nat44ConfigFlags = 2
	NAT44_IS_CONNECTION_TRACKING  Nat44ConfigFlags = 4
	NAT44_IS_OUT2IN_DPO           Nat44ConfigFlags = 8
)

var (
	Nat44ConfigFlags_name = map[uint8]string{
		0: "NAT44_IS_ENDPOINT_INDEPENDENT",
		1: "NAT44_IS_ENDPOINT_DEPENDENT",
		2: "NAT44_IS_STATIC_MAPPING_ONLY",
		4: "NAT44_IS_CONNECTION_TRACKING",
		8: "NAT44_IS_OUT2IN_DPO",
	}
	Nat44ConfigFlags_value = map[string]uint8{
		"NAT44_IS_ENDPOINT_INDEPENDENT": 0,
		"NAT44_IS_ENDPOINT_DEPENDENT":   1,
		"NAT44_IS_STATIC_MAPPING_ONLY":  2,
		"NAT44_IS_CONNECTION_TRACKING":  4,
		"NAT44_IS_OUT2IN_DPO":           8,
	}
)

func (x Nat44ConfigFlags) String() string {
	s, ok := Nat44ConfigFlags_name[uint8(x)]
	if ok {
		return s
	}
	str := func(n uint8) string {
		s, ok := Nat44ConfigFlags_name[uint8(n)]
		if ok {
			return s
		}
		return "Nat44ConfigFlags(" + strconv.Itoa(int(n)) + ")"
	}
	for i := uint8(0); i <= 8; i++ {
		val := uint8(x)
		if val&(1<<i) != 0 {
			if s != "" {
				s += "|"
			}
			s += str(1 << i)
		}
	}
	if s == "" {
		return str(uint8(x))
	}
	return s
}

// Nat44LbAddrPort defines type 'nat44_lb_addr_port'.
type Nat44LbAddrPort struct {
	Addr        ip_types.IP4Address `binapi:"ip4_address,name=addr" json:"addr,omitempty"`
	Port        uint16              `binapi:"u16,name=port" json:"port,omitempty"`
	Probability uint8               `binapi:"u8,name=probability" json:"probability,omitempty"`
	VrfID       uint32              `binapi:"u32,name=vrf_id" json:"vrf_id,omitempty"`
}

// Add/del NAT44 address range
//   - first_ip_address - first IPv4 address
//   - last_ip_address - last IPv4 address
//   - vrf_id - VRF id of tenant, ~0 means independent of VRF
//   - is_add - true if add, false if delete
//   - flags - flag NAT_IS_TWICE_NAT if NAT address range for external hosts
//
// Nat44AddDelAddressRange defines message 'nat44_add_del_address_range'.
type Nat44AddDelAddressRange struct {
	FirstIPAddress ip_types.IP4Address      `binapi:"ip4_address,name=first_ip_address" json:"first_ip_address,omitempty"`
	LastIPAddress  ip_types.IP4Address      `binapi:"ip4_address,name=last_ip_address" json:"last_ip_address,omitempty"`
	VrfID          uint32                   `binapi:"u32,name=vrf_id" json:"vrf_id,omitempty"`
	IsAdd          bool                     `binapi:"bool,name=is_add" json:"is_add,omitempty"`
	Flags          nat_types.NatConfigFlags `binapi:"nat_config_flags,name=flags" json:"flags,omitempty"`
}

func (m *Nat44AddDelAddressRange) Reset()               { *m = Nat44AddDelAddressRange{} }
func (*Nat44AddDelAddressRange) GetMessageName() string { return "nat44_add_del_address_range" }
func (*Nat44AddDelAddressRange) GetCrcString() string   { return "6f2b8055" }
func (*Nat44AddDelAddressRange) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *Nat44AddDelAddressRange) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1 * 4 // m.FirstIPAddress
	size += 1 * 4 // m.LastIPAddress
	size += 4     // m.VrfID
	size += 1     // m.IsAdd
	size += 1     // m.Flags
	return size
}
func (m *Nat44AddDelAddressRange) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeBytes(m.FirstIPAddress[:], 4)
	buf.EncodeBytes(m.LastIPAddress[:], 4)
	buf.EncodeUint32(m.VrfID)
	buf.EncodeBool(m.IsAdd)
	buf.EncodeUint8(uint8(m.Flags))
	return buf.Bytes(), nil
}
func (m *Nat44AddDelAddressRange) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	copy(m.FirstIPAddress[:], buf.DecodeBytes(4))
	copy(m.LastIPAddress[:], buf.DecodeBytes(4))
	m.VrfID = buf.DecodeUint32()
	m.IsAdd = buf.DecodeBool()
	m.Flags = nat_types.NatConfigFlags(buf.DecodeUint8())
	return nil
}

// Nat44AddDelAddressRangeReply defines message 'nat44_add_del_address_range_reply'.
type Nat44AddDelAddressRangeReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *Nat44AddDelAddressRangeReply) Reset() { *m = Nat44AddDelAddressRangeReply{} }
func (*Nat44AddDelAddressRangeReply) GetMessageName() string {
	return "nat44_add_del_address_range_reply"
}
func (*Nat44AddDelAddressRangeReply) GetCrcString() string { return "e8d4e804" }
func (*Nat44AddDelAddressRangeReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *Nat44AddDelAddressRangeReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *Nat44AddDelAddressRangeReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *Nat44AddDelAddressRangeReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// Add/delete NAT44 identity mapping
//   - is_add - true if add, false if delete
//   - flags - flag NAT_ADDR_ONLY if address only mapping
//   - ip_address - IPv4 address
//   - protocol - IP protocol
//   - port - port number
//   - sw_if_index - interface (if set ip_address is ignored, ~0 means not
//     used)
//   - vfr_id - VRF ID (if ~0 use default VRF)
//   - tag - opaque string tag
//
// Nat44AddDelIdentityMapping defines message 'nat44_add_del_identity_mapping'.
type Nat44AddDelIdentityMapping struct {
	IsAdd     bool                           `binapi:"bool,name=is_add" json:"is_add,omitempty"`
	Flags     nat_types.NatConfigFlags       `binapi:"nat_config_flags,name=flags" json:"flags,omitempty"`
	IPAddress ip_types.IP4Address            `binapi:"ip4_address,name=ip_address" json:"ip_address,omitempty"`
	Protocol  uint8                          `binapi:"u8,name=protocol" json:"protocol,omitempty"`
	Port      uint16                         `binapi:"u16,name=port" json:"port,omitempty"`
	SwIfIndex interface_types.InterfaceIndex `binapi:"interface_index,name=sw_if_index" json:"sw_if_index,omitempty"`
	VrfID     uint32                         `binapi:"u32,name=vrf_id" json:"vrf_id,omitempty"`
	Tag       string                         `binapi:"string[64],name=tag" json:"tag,omitempty"`
}

func (m *Nat44AddDelIdentityMapping) Reset()               { *m = Nat44AddDelIdentityMapping{} }
func (*Nat44AddDelIdentityMapping) GetMessageName() string { return "nat44_add_del_identity_mapping" }
func (*Nat44AddDelIdentityMapping) GetCrcString() string   { return "02faaa22" }
func (*Nat44AddDelIdentityMapping) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *Nat44AddDelIdentityMapping) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1     // m.IsAdd
	size += 1     // m.Flags
	size += 1 * 4 // m.IPAddress
	size += 1     // m.Protocol
	size += 2     // m.Port
	size += 4     // m.SwIfIndex
	size += 4     // m.VrfID
	size += 64    // m.Tag
	return size
}
func (m *Nat44AddDelIdentityMapping) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeBool(m.IsAdd)
	buf.EncodeUint8(uint8(m.Flags))
	buf.EncodeBytes(m.IPAddress[:], 4)
	buf.EncodeUint8(m.Protocol)
	buf.EncodeUint16(m.Port)
	buf.EncodeUint32(uint32(m.SwIfIndex))
	buf.EncodeUint32(m.VrfID)
	buf.EncodeString(m.Tag, 64)
	return buf.Bytes(), nil
}
func (m *Nat44AddDelIdentityMapping) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.IsAdd = buf.DecodeBool()
	m.Flags = nat_types.NatConfigFlags(buf.DecodeUint8())
	copy(m.IPAddress[:], buf.DecodeBytes(4))
	m.Protocol = buf.DecodeUint8()
	m.Port = buf.DecodeUint16()
	m.SwIfIndex = interface_types.InterfaceIndex(buf.DecodeUint32())
	m.VrfID = buf.DecodeUint32()
	m.Tag = buf.DecodeString(64)
	return nil
}

// Nat44AddDelIdentityMappingReply defines message 'nat44_add_del_identity_mapping_reply'.
type Nat44AddDelIdentityMappingReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *Nat44AddDelIdentityMappingReply) Reset() { *m = Nat44AddDelIdentityMappingReply{} }
func (*Nat44AddDelIdentityMappingReply) GetMessageName() string {
	return "nat44_add_del_identity_mapping_reply"
}
func (*Nat44AddDelIdentityMappingReply) GetCrcString() string { return "e8d4e804" }
func (*Nat44AddDelIdentityMappingReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *Nat44AddDelIdentityMappingReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *Nat44AddDelIdentityMappingReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *Nat44AddDelIdentityMappingReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// Add/delete NAT44 pool address from specific interfce
//   - is_add - true if add, false if delete
//   - sw_if_index - software index of the interface
//   - flags - flag NAT_TWICE_NAT if NAT address range for external hosts
//
// Nat44AddDelInterfaceAddr defines message 'nat44_add_del_interface_addr'.
type Nat44AddDelInterfaceAddr struct {
	IsAdd     bool                           `binapi:"bool,name=is_add" json:"is_add,omitempty"`
	SwIfIndex interface_types.InterfaceIndex `binapi:"interface_index,name=sw_if_index" json:"sw_if_index,omitempty"`
	Flags     nat_types.NatConfigFlags       `binapi:"nat_config_flags,name=flags" json:"flags,omitempty"`
}

func (m *Nat44AddDelInterfaceAddr) Reset()               { *m = Nat44AddDelInterfaceAddr{} }
func (*Nat44AddDelInterfaceAddr) GetMessageName() string { return "nat44_add_del_interface_addr" }
func (*Nat44AddDelInterfaceAddr) GetCrcString() string   { return "4aed50c0" }
func (*Nat44AddDelInterfaceAddr) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *Nat44AddDelInterfaceAddr) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1 // m.IsAdd
	size += 4 // m.SwIfIndex
	size += 1 // m.Flags
	return size
}
func (m *Nat44AddDelInterfaceAddr) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeBool(m.IsAdd)
	buf.EncodeUint32(uint32(m.SwIfIndex))
	buf.EncodeUint8(uint8(m.Flags))
	return buf.Bytes(), nil
}
func (m *Nat44AddDelInterfaceAddr) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.IsAdd = buf.DecodeBool()
	m.SwIfIndex = interface_types.InterfaceIndex(buf.DecodeUint32())
	m.Flags = nat_types.NatConfigFlags(buf.DecodeUint8())
	return nil
}

// Nat44AddDelInterfaceAddrReply defines message 'nat44_add_del_interface_addr_reply'.
type Nat44AddDelInterfaceAddrReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *Nat44AddDelInterfaceAddrReply) Reset() { *m = Nat44AddDelInterfaceAddrReply{} }
func (*Nat44AddDelInterfaceAddrReply) GetMessageName() string {
	return "nat44_add_del_interface_addr_reply"
}
func (*Nat44AddDelInterfaceAddrReply) GetCrcString() string { return "e8d4e804" }
func (*Nat44AddDelInterfaceAddrReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *Nat44AddDelInterfaceAddrReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *Nat44AddDelInterfaceAddrReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *Nat44AddDelInterfaceAddrReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// Add/delete NAT44 load-balancing static mapping rule
//   - is_add - true if add, false if delete
//   - flags - flag NAT_TWICE_NAT if NAT address range for external hosts,
//     flag NAT_SELF_TWICE_NAT if translate external host address
//     and port whenever external host address equals local
//     address of internal host,
//     flag NAT_OUT2IN_ONLY if rule match only out2in direction
//   - external_addr - external IPv4 address of the service
//   - external_port - external L4 port number of the service
//   - protocol - IP protocol number of the service
//   - affinity - if 0 disabled, otherwise client IP affinity sticky time
//     in seconds
//   - local_num - number of local network nodes
//   - locals - local network nodes
//   - tag - opaque string tag
//
// Nat44AddDelLbStaticMapping defines message 'nat44_add_del_lb_static_mapping'.
type Nat44AddDelLbStaticMapping struct {
	IsAdd        bool                     `binapi:"bool,name=is_add" json:"is_add,omitempty"`
	Flags        nat_types.NatConfigFlags `binapi:"nat_config_flags,name=flags" json:"flags,omitempty"`
	ExternalAddr ip_types.IP4Address      `binapi:"ip4_address,name=external_addr" json:"external_addr,omitempty"`
	ExternalPort uint16                   `binapi:"u16,name=external_port" json:"external_port,omitempty"`
	Protocol     uint8                    `binapi:"u8,name=protocol" json:"protocol,omitempty"`
	Affinity     uint32                   `binapi:"u32,name=affinity" json:"affinity,omitempty"`
	Tag          string                   `binapi:"string[64],name=tag" json:"tag,omitempty"`
	LocalNum     uint32                   `binapi:"u32,name=local_num" json:"-"`
	Locals       []Nat44LbAddrPort        `binapi:"nat44_lb_addr_port[local_num],name=locals" json:"locals,omitempty"`
}

func (m *Nat44AddDelLbStaticMapping) Reset()               { *m = Nat44AddDelLbStaticMapping{} }
func (*Nat44AddDelLbStaticMapping) GetMessageName() string { return "nat44_add_del_lb_static_mapping" }
func (*Nat44AddDelLbStaticMapping) GetCrcString() string   { return "4f68ee9d" }
func (*Nat44AddDelLbStaticMapping) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *Nat44AddDelLbStaticMapping) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1     // m.IsAdd
	size += 1     // m.Flags
	size += 1 * 4 // m.ExternalAddr
	size += 2     // m.ExternalPort
	size += 1     // m.Protocol
	size += 4     // m.Affinity
	size += 64    // m.Tag
	size += 4     // m.LocalNum
	for j1 := 0; j1 < len(m.Locals); j1++ {
		var s1 Nat44LbAddrPort
		_ = s1
		if j1 < len(m.Locals) {
			s1 = m.Locals[j1]
		}
		size += 1 * 4 // s1.Addr
		size += 2     // s1.Port
		size += 1     // s1.Probability
		size += 4     // s1.VrfID
	}
	return size
}
func (m *Nat44AddDelLbStaticMapping) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeBool(m.IsAdd)
	buf.EncodeUint8(uint8(m.Flags))
	buf.EncodeBytes(m.ExternalAddr[:], 4)
	buf.EncodeUint16(m.ExternalPort)
	buf.EncodeUint8(m.Protocol)
	buf.EncodeUint32(m.Affinity)
	buf.EncodeString(m.Tag, 64)
	buf.EncodeUint32(uint32(len(m.Locals)))
	for j0 := 0; j0 < len(m.Locals); j0++ {
		var v0 Nat44LbAddrPort // Locals
		if j0 < len(m.Locals) {
			v0 = m.Locals[j0]
		}
		buf.EncodeBytes(v0.Addr[:], 4)
		buf.EncodeUint16(v0.Port)
		buf.EncodeUint8(v0.Probability)
		buf.EncodeUint32(v0.VrfID)
	}
	return buf.Bytes(), nil
}
func (m *Nat44AddDelLbStaticMapping) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.IsAdd = buf.DecodeBool()
	m.Flags = nat_types.NatConfigFlags(buf.DecodeUint8())
	copy(m.ExternalAddr[:], buf.DecodeBytes(4))
	m.ExternalPort = buf.DecodeUint16()
	m.Protocol = buf.DecodeUint8()
	m.Affinity = buf.DecodeUint32()
	m.Tag = buf.DecodeString(64)
	m.LocalNum = buf.DecodeUint32()
	m.Locals = make([]Nat44LbAddrPort, m.LocalNum)
	for j0 := 0; j0 < len(m.Locals); j0++ {
		copy(m.Locals[j0].Addr[:], buf.DecodeBytes(4))
		m.Locals[j0].Port = buf.DecodeUint16()
		m.Locals[j0].Probability = buf.DecodeUint8()
		m.Locals[j0].VrfID = buf.DecodeUint32()
	}
	return nil
}

// Nat44AddDelLbStaticMappingReply defines message 'nat44_add_del_lb_static_mapping_reply'.
type Nat44AddDelLbStaticMappingReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *Nat44AddDelLbStaticMappingReply) Reset() { *m = Nat44AddDelLbStaticMappingReply{} }
func (*Nat44AddDelLbStaticMappingReply) GetMessageName() string {
	return "nat44_add_del_lb_static_mapping_reply"
}
func (*Nat44AddDelLbStaticMappingReply) GetCrcString() string { return "e8d4e804" }
func (*Nat44AddDelLbStaticMappingReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *Nat44AddDelLbStaticMappingReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *Nat44AddDelLbStaticMappingReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *Nat44AddDelLbStaticMappingReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// Add/delete NAT44 static mapping
//   - is_add - true if add, false if delete
//   - flags - flag NAT_IS_ADDR_ONLY if address only mapping,
//     flag nat_is_twice_nat if nat address range for external hosts,
//     flag NAT_IS_SELF_TWICE_NAT if translate external host address
//     and port whenever external host address equals local
//     address of internal host,
//     flag NAT_IS_OUT2IN_ONLY if rule match only out2in direction
//   - local_ip_address - local IPv4 address
//   - external_ip_address - external IPv4 address
//   - protocol - IP protocol, used only if addr_only=0
//   - local_port - local port number, used only if addr_only=0
//   - external_port - external port number, used only if addr_only=0
//   - external_sw_if_index - external interface (if set
//     external_ip_address is ignored, ~0 means not
//     used)
//   - vfr_id - VRF ID
//   - tag - opaque string tag
//
// Nat44AddDelStaticMapping defines message 'nat44_add_del_static_mapping'.
type Nat44AddDelStaticMapping struct {
	IsAdd             bool                           `binapi:"bool,name=is_add" json:"is_add,omitempty"`
	Flags             nat_types.NatConfigFlags       `binapi:"nat_config_flags,name=flags" json:"flags,omitempty"`
	LocalIPAddress    ip_types.IP4Address            `binapi:"ip4_address,name=local_ip_address" json:"local_ip_address,omitempty"`
	ExternalIPAddress ip_types.IP4Address            `binapi:"ip4_address,name=external_ip_address" json:"external_ip_address,omitempty"`
	Protocol          uint8                          `binapi:"u8,name=protocol" json:"protocol,omitempty"`
	LocalPort         uint16                         `binapi:"u16,name=local_port" json:"local_port,omitempty"`
	ExternalPort      uint16                         `binapi:"u16,name=external_port" json:"external_port,omitempty"`
	ExternalSwIfIndex interface_types.InterfaceIndex `binapi:"interface_index,name=external_sw_if_index" json:"external_sw_if_index,omitempty"`
	VrfID             uint32                         `binapi:"u32,name=vrf_id" json:"vrf_id,omitempty"`
	Tag               string                         `binapi:"string[64],name=tag" json:"tag,omitempty"`
}

func (m *Nat44AddDelStaticMapping) Reset()               { *m = Nat44AddDelStaticMapping{} }
func (*Nat44AddDelStaticMapping) GetMessageName() string { return "nat44_add_del_static_mapping" }
func (*Nat44AddDelStaticMapping) GetCrcString() string   { return "5ae5f03e" }
func (*Nat44AddDelStaticMapping) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *Nat44AddDelStaticMapping) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1     // m.IsAdd
	size += 1     // m.Flags
	size += 1 * 4 // m.LocalIPAddress
	size += 1 * 4 // m.ExternalIPAddress
	size += 1     // m.Protocol
	size += 2     // m.LocalPort
	size += 2     // m.ExternalPort
	size += 4     // m.ExternalSwIfIndex
	size += 4     // m.VrfID
	size += 64    // m.Tag
	return size
}
func (m *Nat44AddDelStaticMapping) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeBool(m.IsAdd)
	buf.EncodeUint8(uint8(m.Flags))
	buf.EncodeBytes(m.LocalIPAddress[:], 4)
	buf.EncodeBytes(m.ExternalIPAddress[:], 4)
	buf.EncodeUint8(m.Protocol)
	buf.EncodeUint16(m.LocalPort)
	buf.EncodeUint16(m.ExternalPort)
	buf.EncodeUint32(uint32(m.ExternalSwIfIndex))
	buf.EncodeUint32(m.VrfID)
	buf.EncodeString(m.Tag, 64)
	return buf.Bytes(), nil
}
func (m *Nat44AddDelStaticMapping) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.IsAdd = buf.DecodeBool()
	m.Flags = nat_types.NatConfigFlags(buf.DecodeUint8())
	copy(m.LocalIPAddress[:], buf.DecodeBytes(4))
	copy(m.ExternalIPAddress[:], buf.DecodeBytes(4))
	m.Protocol = buf.DecodeUint8()
	m.LocalPort = buf.DecodeUint16()
	m.ExternalPort = buf.DecodeUint16()
	m.ExternalSwIfIndex = interface_types.InterfaceIndex(buf.DecodeUint32())
	m.VrfID = buf.DecodeUint32()
	m.Tag = buf.DecodeString(64)
	return nil
}

// Nat44AddDelStaticMappingReply defines message 'nat44_add_del_static_mapping_reply'.
type Nat44AddDelStaticMappingReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *Nat44AddDelStaticMappingReply) Reset() { *m = Nat44AddDelStaticMappingReply{} }
func (*Nat44AddDelStaticMappingReply) GetMessageName() string {
	return "nat44_add_del_static_mapping_reply"
}
func (*Nat44AddDelStaticMappingReply) GetCrcString() string { return "e8d4e804" }
func (*Nat44AddDelStaticMappingReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *Nat44AddDelStaticMappingReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *Nat44AddDelStaticMappingReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *Nat44AddDelStaticMappingReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// Add/delete NAT44 static mapping
//   - is_add - true if add, false if delete
//   - match_pool - true if use specific pool_ip_address
//   - flags - flag NAT_IS_ADDR_ONLY if address only mapping,
//     flag nat_is_twice_nat if nat address range for external hosts,
//     flag NAT_IS_SELF_TWICE_NAT if translate external host address
//     and port whenever external host address equals local
//     address of internal host,
//     flag NAT_IS_OUT2IN_ONLY if rule match only out2in direction
//   - pool_ip_address - pool IPv4 address to match with pool
//   - local_ip_address - local IPv4 address
//   - external_ip_address - external IPv4 address
//   - protocol - IP protocol, used only if addr_only=0
//   - local_port - local port number, used only if addr_only=0
//   - external_port - external port number, used only if addr_only=0
//   - external_sw_if_index - external interface (if set
//     external_ip_address is ignored, ~0 means not
//     used)
//   - vfr_id - VRF ID
//   - tag - opaque string tag
//
// Nat44AddDelStaticMappingV2 defines message 'nat44_add_del_static_mapping_v2'.
type Nat44AddDelStaticMappingV2 struct {
	IsAdd             bool                           `binapi:"bool,name=is_add" json:"is_add,omitempty"`
	MatchPool         bool                           `binapi:"bool,name=match_pool" json:"match_pool,omitempty"`
	Flags             nat_types.NatConfigFlags       `binapi:"nat_config_flags,name=flags" json:"flags,omitempty"`
	PoolIPAddress     ip_types.IP4Address            `binapi:"ip4_address,name=pool_ip_address" json:"pool_ip_address,omitempty"`
	LocalIPAddress    ip_types.IP4Address            `binapi:"ip4_address,name=local_ip_address" json:"local_ip_address,omitempty"`
	ExternalIPAddress ip_types.IP4Address            `binapi:"ip4_address,name=external_ip_address" json:"external_ip_address,omitempty"`
	Protocol          uint8                          `binapi:"u8,name=protocol" json:"protocol,omitempty"`
	LocalPort         uint16                         `binapi:"u16,name=local_port" json:"local_port,omitempty"`
	ExternalPort      uint16                         `binapi:"u16,name=external_port" json:"external_port,omitempty"`
	ExternalSwIfIndex interface_types.InterfaceIndex `binapi:"interface_index,name=external_sw_if_index" json:"external_sw_if_index,omitempty"`
	VrfID             uint32                         `binapi:"u32,name=vrf_id" json:"vrf_id,omitempty"`
	Tag               string                         `binapi:"string[64],name=tag" json:"tag,omitempty"`
}

func (m *Nat44AddDelStaticMappingV2) Reset()               { *m = Nat44AddDelStaticMappingV2{} }
func (*Nat44AddDelStaticMappingV2) GetMessageName() string { return "nat44_add_del_static_mapping_v2" }
func (*Nat44AddDelStaticMappingV2) GetCrcString() string   { return "5e205f1a" }
func (*Nat44AddDelStaticMappingV2) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *Nat44AddDelStaticMappingV2) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1     // m.IsAdd
	size += 1     // m.MatchPool
	size += 1     // m.Flags
	size += 1 * 4 // m.PoolIPAddress
	size += 1 * 4 // m.LocalIPAddress
	size += 1 * 4 // m.ExternalIPAddress
	size += 1     // m.Protocol
	size += 2     // m.LocalPort
	size += 2     // m.ExternalPort
	size += 4     // m.ExternalSwIfIndex
	size += 4     // m.VrfID
	size += 64    // m.Tag
	return size
}
func (m *Nat44AddDelStaticMappingV2) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeBool(m.IsAdd)
	buf.EncodeBool(m.MatchPool)
	buf.EncodeUint8(uint8(m.Flags))
	buf.EncodeBytes(m.PoolIPAddress[:], 4)
	buf.EncodeBytes(m.LocalIPAddress[:], 4)
	buf.EncodeBytes(m.ExternalIPAddress[:], 4)
	buf.EncodeUint8(m.Protocol)
	buf.EncodeUint16(m.LocalPort)
	buf.EncodeUint16(m.ExternalPort)
	buf.EncodeUint32(uint32(m.ExternalSwIfIndex))
	buf.EncodeUint32(m.VrfID)
	buf.EncodeString(m.Tag, 64)
	return buf.Bytes(), nil
}
func (m *Nat44AddDelStaticMappingV2) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.IsAdd = buf.DecodeBool()
	m.MatchPool = buf.DecodeBool()
	m.Flags = nat_types.NatConfigFlags(buf.DecodeUint8())
	copy(m.PoolIPAddress[:], buf.DecodeBytes(4))
	copy(m.LocalIPAddress[:], buf.DecodeBytes(4))
	copy(m.ExternalIPAddress[:], buf.DecodeBytes(4))
	m.Protocol = buf.DecodeUint8()
	m.LocalPort = buf.DecodeUint16()
	m.ExternalPort = buf.DecodeUint16()
	m.ExternalSwIfIndex = interface_types.InterfaceIndex(buf.DecodeUint32())
	m.VrfID = buf.DecodeUint32()
	m.Tag = buf.DecodeString(64)
	return nil
}

// Nat44AddDelStaticMappingV2Reply defines message 'nat44_add_del_static_mapping_v2_reply'.
type Nat44AddDelStaticMappingV2Reply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *Nat44AddDelStaticMappingV2Reply) Reset() { *m = Nat44AddDelStaticMappingV2Reply{} }
func (*Nat44AddDelStaticMappingV2Reply) GetMessageName() string {
	return "nat44_add_del_static_mapping_v2_reply"
}
func (*Nat44AddDelStaticMappingV2Reply) GetCrcString() string { return "e8d4e804" }
func (*Nat44AddDelStaticMappingV2Reply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *Nat44AddDelStaticMappingV2Reply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *Nat44AddDelStaticMappingV2Reply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *Nat44AddDelStaticMappingV2Reply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// NAT44 address details response
//   - ip_address - IPv4 address
//   - flags - flag NAT_IS_TWICE_NAT if NAT address range for external hosts
//   - vrf_id - VRF id of tenant, ~0 means independent of VRF
//
// Nat44AddressDetails defines message 'nat44_address_details'.
type Nat44AddressDetails struct {
	IPAddress ip_types.IP4Address      `binapi:"ip4_address,name=ip_address" json:"ip_address,omitempty"`
	Flags     nat_types.NatConfigFlags `binapi:"nat_config_flags,name=flags" json:"flags,omitempty"`
	VrfID     uint32                   `binapi:"u32,name=vrf_id" json:"vrf_id,omitempty"`
}

func (m *Nat44AddressDetails) Reset()               { *m = Nat44AddressDetails{} }
func (*Nat44AddressDetails) GetMessageName() string { return "nat44_address_details" }
func (*Nat44AddressDetails) GetCrcString() string   { return "0d1beac1" }
func (*Nat44AddressDetails) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *Nat44AddressDetails) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1 * 4 // m.IPAddress
	size += 1     // m.Flags
	size += 4     // m.VrfID
	return size
}
func (m *Nat44AddressDetails) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeBytes(m.IPAddress[:], 4)
	buf.EncodeUint8(uint8(m.Flags))
	buf.EncodeUint32(m.VrfID)
	return buf.Bytes(), nil
}
func (m *Nat44AddressDetails) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	copy(m.IPAddress[:], buf.DecodeBytes(4))
	m.Flags = nat_types.NatConfigFlags(buf.DecodeUint8())
	m.VrfID = buf.DecodeUint32()
	return nil
}

// Dump NAT44 addresses
// Nat44AddressDump defines message 'nat44_address_dump'.
type Nat44AddressDump struct{}

func (m *Nat44AddressDump) Reset()               { *m = Nat44AddressDump{} }
func (*Nat44AddressDump) GetMessageName() string { return "nat44_address_dump" }
func (*Nat44AddressDump) GetCrcString() string   { return "51077d14" }
func (*Nat44AddressDump) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *Nat44AddressDump) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *Nat44AddressDump) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *Nat44AddressDump) Unmarshal(b []byte) error {
	return nil
}

// Delete NAT44 session
//   - ip_address - IPv4 address
//   - protocol - IP protocol
//   - port - port number
//   - vfr_id - VRF ID
//   - flags - flag NAT_IS_INSIDE if interface is inside or
//     interface is outside,
//     flag NAT_IS_EXT_HOST_VALID if external host address and
//     port are valid
//   - ext_host_address - external host IPv4 address
//   - ext_host_port - external host port
//
// Nat44DelSession defines message 'nat44_del_session'.
type Nat44DelSession struct {
	Address        ip_types.IP4Address      `binapi:"ip4_address,name=address" json:"address,omitempty"`
	Protocol       uint8                    `binapi:"u8,name=protocol" json:"protocol,omitempty"`
	Port           uint16                   `binapi:"u16,name=port" json:"port,omitempty"`
	VrfID          uint32                   `binapi:"u32,name=vrf_id" json:"vrf_id,omitempty"`
	Flags          nat_types.NatConfigFlags `binapi:"nat_config_flags,name=flags" json:"flags,omitempty"`
	ExtHostAddress ip_types.IP4Address      `binapi:"ip4_address,name=ext_host_address" json:"ext_host_address,omitempty"`
	ExtHostPort    uint16                   `binapi:"u16,name=ext_host_port" json:"ext_host_port,omitempty"`
}

func (m *Nat44DelSession) Reset()               { *m = Nat44DelSession{} }
func (*Nat44DelSession) GetMessageName() string { return "nat44_del_session" }
func (*Nat44DelSession) GetCrcString() string   { return "15a5bf8c" }
func (*Nat44DelSession) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *Nat44DelSession) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1 * 4 // m.Address
	size += 1     // m.Protocol
	size += 2     // m.Port
	size += 4     // m.VrfID
	size += 1     // m.Flags
	size += 1 * 4 // m.ExtHostAddress
	size += 2     // m.ExtHostPort
	return size
}
func (m *Nat44DelSession) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeBytes(m.Address[:], 4)
	buf.EncodeUint8(m.Protocol)
	buf.EncodeUint16(m.Port)
	buf.EncodeUint32(m.VrfID)
	buf.EncodeUint8(uint8(m.Flags))
	buf.EncodeBytes(m.ExtHostAddress[:], 4)
	buf.EncodeUint16(m.ExtHostPort)
	return buf.Bytes(), nil
}
func (m *Nat44DelSession) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	copy(m.Address[:], buf.DecodeBytes(4))
	m.Protocol = buf.DecodeUint8()
	m.Port = buf.DecodeUint16()
	m.VrfID = buf.DecodeUint32()
	m.Flags = nat_types.NatConfigFlags(buf.DecodeUint8())
	copy(m.ExtHostAddress[:], buf.DecodeBytes(4))
	m.ExtHostPort = buf.DecodeUint16()
	return nil
}

// Nat44DelSessionReply defines message 'nat44_del_session_reply'.
type Nat44DelSessionReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *Nat44DelSessionReply) Reset()               { *m = Nat44DelSessionReply{} }
func (*Nat44DelSessionReply) GetMessageName() string { return "nat44_del_session_reply" }
func (*Nat44DelSessionReply) GetCrcString() string   { return "e8d4e804" }
func (*Nat44DelSessionReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *Nat44DelSessionReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *Nat44DelSessionReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *Nat44DelSessionReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// add/del NAT output interface (postrouting
//
//	       in2out translation)
//	- is_add - true if add, false if delete
//	- sw_if_index - software index of the interface
//
// Nat44EdAddDelOutputInterface defines message 'nat44_ed_add_del_output_interface'.
type Nat44EdAddDelOutputInterface struct {
	IsAdd     bool                           `binapi:"bool,name=is_add" json:"is_add,omitempty"`
	SwIfIndex interface_types.InterfaceIndex `binapi:"interface_index,name=sw_if_index" json:"sw_if_index,omitempty"`
}

func (m *Nat44EdAddDelOutputInterface) Reset() { *m = Nat44EdAddDelOutputInterface{} }
func (*Nat44EdAddDelOutputInterface) GetMessageName() string {
	return "nat44_ed_add_del_output_interface"
}
func (*Nat44EdAddDelOutputInterface) GetCrcString() string { return "47d6e753" }
func (*Nat44EdAddDelOutputInterface) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *Nat44EdAddDelOutputInterface) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1 // m.IsAdd
	size += 4 // m.SwIfIndex
	return size
}
func (m *Nat44EdAddDelOutputInterface) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeBool(m.IsAdd)
	buf.EncodeUint32(uint32(m.SwIfIndex))
	return buf.Bytes(), nil
}
func (m *Nat44EdAddDelOutputInterface) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.IsAdd = buf.DecodeBool()
	m.SwIfIndex = interface_types.InterfaceIndex(buf.DecodeUint32())
	return nil
}

// Nat44EdAddDelOutputInterfaceReply defines message 'nat44_ed_add_del_output_interface_reply'.
type Nat44EdAddDelOutputInterfaceReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *Nat44EdAddDelOutputInterfaceReply) Reset() { *m = Nat44EdAddDelOutputInterfaceReply{} }
func (*Nat44EdAddDelOutputInterfaceReply) GetMessageName() string {
	return "nat44_ed_add_del_output_interface_reply"
}
func (*Nat44EdAddDelOutputInterfaceReply) GetCrcString() string { return "e8d4e804" }
func (*Nat44EdAddDelOutputInterfaceReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *Nat44EdAddDelOutputInterfaceReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *Nat44EdAddDelOutputInterfaceReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *Nat44EdAddDelOutputInterfaceReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// Add/del inter VRF NAT44-ED route record
//   - table_vrf_id - id of the VRF NAT routing table
//   - vrf_id - id of resolving destination (tx) VRF table
//   - is_add - if true add else del
//
// Nat44EdAddDelVrfRoute defines message 'nat44_ed_add_del_vrf_route'.
type Nat44EdAddDelVrfRoute struct {
	TableVrfID uint32 `binapi:"u32,name=table_vrf_id" json:"table_vrf_id,omitempty"`
	VrfID      uint32 `binapi:"u32,name=vrf_id" json:"vrf_id,omitempty"`
	IsAdd      bool   `binapi:"bool,name=is_add" json:"is_add,omitempty"`
}

func (m *Nat44EdAddDelVrfRoute) Reset()               { *m = Nat44EdAddDelVrfRoute{} }
func (*Nat44EdAddDelVrfRoute) GetMessageName() string { return "nat44_ed_add_del_vrf_route" }
func (*Nat44EdAddDelVrfRoute) GetCrcString() string   { return "59187407" }
func (*Nat44EdAddDelVrfRoute) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *Nat44EdAddDelVrfRoute) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.TableVrfID
	size += 4 // m.VrfID
	size += 1 // m.IsAdd
	return size
}
func (m *Nat44EdAddDelVrfRoute) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.TableVrfID)
	buf.EncodeUint32(m.VrfID)
	buf.EncodeBool(m.IsAdd)
	return buf.Bytes(), nil
}
func (m *Nat44EdAddDelVrfRoute) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.TableVrfID = buf.DecodeUint32()
	m.VrfID = buf.DecodeUint32()
	m.IsAdd = buf.DecodeBool()
	return nil
}

// Nat44EdAddDelVrfRouteReply defines message 'nat44_ed_add_del_vrf_route_reply'.
type Nat44EdAddDelVrfRouteReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *Nat44EdAddDelVrfRouteReply) Reset()               { *m = Nat44EdAddDelVrfRouteReply{} }
func (*Nat44EdAddDelVrfRouteReply) GetMessageName() string { return "nat44_ed_add_del_vrf_route_reply" }
func (*Nat44EdAddDelVrfRouteReply) GetCrcString() string   { return "e8d4e804" }
func (*Nat44EdAddDelVrfRouteReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *Nat44EdAddDelVrfRouteReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *Nat44EdAddDelVrfRouteReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *Nat44EdAddDelVrfRouteReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// Add/delete inter VRF NAT44-ED routing table
//   - table_vrf_id - id of (rx) VRF used for resolving
//     destination (tx) VRF during dynamic
//     session creation
//   - is_add - if true add else del
//
// Nat44EdAddDelVrfTable defines message 'nat44_ed_add_del_vrf_table'.
type Nat44EdAddDelVrfTable struct {
	TableVrfID uint32 `binapi:"u32,name=table_vrf_id" json:"table_vrf_id,omitempty"`
	IsAdd      bool   `binapi:"bool,name=is_add" json:"is_add,omitempty"`
}

func (m *Nat44EdAddDelVrfTable) Reset()               { *m = Nat44EdAddDelVrfTable{} }
func (*Nat44EdAddDelVrfTable) GetMessageName() string { return "nat44_ed_add_del_vrf_table" }
func (*Nat44EdAddDelVrfTable) GetCrcString() string   { return "08330904" }
func (*Nat44EdAddDelVrfTable) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *Nat44EdAddDelVrfTable) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.TableVrfID
	size += 1 // m.IsAdd
	return size
}
func (m *Nat44EdAddDelVrfTable) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.TableVrfID)
	buf.EncodeBool(m.IsAdd)
	return buf.Bytes(), nil
}
func (m *Nat44EdAddDelVrfTable) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.TableVrfID = buf.DecodeUint32()
	m.IsAdd = buf.DecodeBool()
	return nil
}

// Nat44EdAddDelVrfTableReply defines message 'nat44_ed_add_del_vrf_table_reply'.
type Nat44EdAddDelVrfTableReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *Nat44EdAddDelVrfTableReply) Reset()               { *m = Nat44EdAddDelVrfTableReply{} }
func (*Nat44EdAddDelVrfTableReply) GetMessageName() string { return "nat44_ed_add_del_vrf_table_reply" }
func (*Nat44EdAddDelVrfTableReply) GetCrcString() string   { return "e8d4e804" }
func (*Nat44EdAddDelVrfTableReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *Nat44EdAddDelVrfTableReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *Nat44EdAddDelVrfTableReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *Nat44EdAddDelVrfTableReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// Nat44EdOutputInterfaceDetails defines message 'nat44_ed_output_interface_details'.
type Nat44EdOutputInterfaceDetails struct {
	SwIfIndex interface_types.InterfaceIndex `binapi:"interface_index,name=sw_if_index" json:"sw_if_index,omitempty"`
}

func (m *Nat44EdOutputInterfaceDetails) Reset() { *m = Nat44EdOutputInterfaceDetails{} }
func (*Nat44EdOutputInterfaceDetails) GetMessageName() string {
	return "nat44_ed_output_interface_details"
}
func (*Nat44EdOutputInterfaceDetails) GetCrcString() string { return "0b45011c" }
func (*Nat44EdOutputInterfaceDetails) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *Nat44EdOutputInterfaceDetails) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.SwIfIndex
	return size
}
func (m *Nat44EdOutputInterfaceDetails) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(uint32(m.SwIfIndex))
	return buf.Bytes(), nil
}
func (m *Nat44EdOutputInterfaceDetails) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.SwIfIndex = interface_types.InterfaceIndex(buf.DecodeUint32())
	return nil
}

// Nat44EdOutputInterfaceGet defines message 'nat44_ed_output_interface_get'.
type Nat44EdOutputInterfaceGet struct {
	Cursor uint32 `binapi:"u32,name=cursor" json:"cursor,omitempty"`
}

func (m *Nat44EdOutputInterfaceGet) Reset()               { *m = Nat44EdOutputInterfaceGet{} }
func (*Nat44EdOutputInterfaceGet) GetMessageName() string { return "nat44_ed_output_interface_get" }
func (*Nat44EdOutputInterfaceGet) GetCrcString() string   { return "f75ba505" }
func (*Nat44EdOutputInterfaceGet) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *Nat44EdOutputInterfaceGet) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Cursor
	return size
}
func (m *Nat44EdOutputInterfaceGet) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.Cursor)
	return buf.Bytes(), nil
}
func (m *Nat44EdOutputInterfaceGet) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Cursor = buf.DecodeUint32()
	return nil
}

// Nat44EdOutputInterfaceGetReply defines message 'nat44_ed_output_interface_get_reply'.
type Nat44EdOutputInterfaceGetReply struct {
	Retval int32  `binapi:"i32,name=retval" json:"retval,omitempty"`
	Cursor uint32 `binapi:"u32,name=cursor" json:"cursor,omitempty"`
}

func (m *Nat44EdOutputInterfaceGetReply) Reset() { *m = Nat44EdOutputInterfaceGetReply{} }
func (*Nat44EdOutputInterfaceGetReply) GetMessageName() string {
	return "nat44_ed_output_interface_get_reply"
}
func (*Nat44EdOutputInterfaceGetReply) GetCrcString() string { return "53b48f5d" }
func (*Nat44EdOutputInterfaceGetReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *Nat44EdOutputInterfaceGetReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	size += 4 // m.Cursor
	return size
}
func (m *Nat44EdOutputInterfaceGetReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	buf.EncodeUint32(m.Cursor)
	return buf.Bytes(), nil
}
func (m *Nat44EdOutputInterfaceGetReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	m.Cursor = buf.DecodeUint32()
	return nil
}

// Enable/disable NAT44ED plugin
//   - inside_vrf - inside vrf id
//   - outside_vrf - outside vrf id
//   - sessions - maximum number of sessions per thread
//   - session_memory - overwrite hash allocation parameter
//   - enable - true if enable, false if disable
//   - flags - flag NAT44_IS_STATIC_MAPPING_ONLY,
//     NAT44_IS_CONNECTION_TRACKING
//
// Nat44EdPluginEnableDisable defines message 'nat44_ed_plugin_enable_disable'.
type Nat44EdPluginEnableDisable struct {
	InsideVrf     uint32           `binapi:"u32,name=inside_vrf" json:"inside_vrf,omitempty"`
	OutsideVrf    uint32           `binapi:"u32,name=outside_vrf" json:"outside_vrf,omitempty"`
	Sessions      uint32           `binapi:"u32,name=sessions" json:"sessions,omitempty"`
	SessionMemory uint32           `binapi:"u32,name=session_memory" json:"session_memory,omitempty"`
	Enable        bool             `binapi:"bool,name=enable" json:"enable,omitempty"`
	Flags         Nat44ConfigFlags `binapi:"nat44_config_flags,name=flags" json:"flags,omitempty"`
}

func (m *Nat44EdPluginEnableDisable) Reset()               { *m = Nat44EdPluginEnableDisable{} }
func (*Nat44EdPluginEnableDisable) GetMessageName() string { return "nat44_ed_plugin_enable_disable" }
func (*Nat44EdPluginEnableDisable) GetCrcString() string   { return "be17f8dd" }
func (*Nat44EdPluginEnableDisable) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *Nat44EdPluginEnableDisable) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.InsideVrf
	size += 4 // m.OutsideVrf
	size += 4 // m.Sessions
	size += 4 // m.SessionMemory
	size += 1 // m.Enable
	size += 1 // m.Flags
	return size
}
func (m *Nat44EdPluginEnableDisable) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.InsideVrf)
	buf.EncodeUint32(m.OutsideVrf)
	buf.EncodeUint32(m.Sessions)
	buf.EncodeUint32(m.SessionMemory)
	buf.EncodeBool(m.Enable)
	buf.EncodeUint8(uint8(m.Flags))
	return buf.Bytes(), nil
}
func (m *Nat44EdPluginEnableDisable) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.InsideVrf = buf.DecodeUint32()
	m.OutsideVrf = buf.DecodeUint32()
	m.Sessions = buf.DecodeUint32()
	m.SessionMemory = buf.DecodeUint32()
	m.Enable = buf.DecodeBool()
	m.Flags = Nat44ConfigFlags(buf.DecodeUint8())
	return nil
}

// Nat44EdPluginEnableDisableReply defines message 'nat44_ed_plugin_enable_disable_reply'.
type Nat44EdPluginEnableDisableReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *Nat44EdPluginEnableDisableReply) Reset() { *m = Nat44EdPluginEnableDisableReply{} }
func (*Nat44EdPluginEnableDisableReply) GetMessageName() string {
	return "nat44_ed_plugin_enable_disable_reply"
}
func (*Nat44EdPluginEnableDisableReply) GetCrcString() string { return "e8d4e804" }
func (*Nat44EdPluginEnableDisableReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *Nat44EdPluginEnableDisableReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *Nat44EdPluginEnableDisableReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *Nat44EdPluginEnableDisableReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// Set NAT handoff frame queue options
//   - frame_queue_nelts - number of worker handoff frame queue elements
//
// Nat44EdSetFqOptions defines message 'nat44_ed_set_fq_options'.
type Nat44EdSetFqOptions struct {
	FrameQueueNelts uint32 `binapi:"u32,name=frame_queue_nelts" json:"frame_queue_nelts,omitempty"`
}

func (m *Nat44EdSetFqOptions) Reset()               { *m = Nat44EdSetFqOptions{} }
func (*Nat44EdSetFqOptions) GetMessageName() string { return "nat44_ed_set_fq_options" }
func (*Nat44EdSetFqOptions) GetCrcString() string   { return "2399bd71" }
func (*Nat44EdSetFqOptions) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *Nat44EdSetFqOptions) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.FrameQueueNelts
	return size
}
func (m *Nat44EdSetFqOptions) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.FrameQueueNelts)
	return buf.Bytes(), nil
}
func (m *Nat44EdSetFqOptions) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.FrameQueueNelts = buf.DecodeUint32()
	return nil
}

// Nat44EdSetFqOptionsReply defines message 'nat44_ed_set_fq_options_reply'.
type Nat44EdSetFqOptionsReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *Nat44EdSetFqOptionsReply) Reset()               { *m = Nat44EdSetFqOptionsReply{} }
func (*Nat44EdSetFqOptionsReply) GetMessageName() string { return "nat44_ed_set_fq_options_reply" }
func (*Nat44EdSetFqOptionsReply) GetCrcString() string   { return "e8d4e804" }
func (*Nat44EdSetFqOptionsReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *Nat44EdSetFqOptionsReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *Nat44EdSetFqOptionsReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *Nat44EdSetFqOptionsReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// Show NAT handoff frame queue options
// Nat44EdShowFqOptions defines message 'nat44_ed_show_fq_options'.
type Nat44EdShowFqOptions struct{}

func (m *Nat44EdShowFqOptions) Reset()               { *m = Nat44EdShowFqOptions{} }
func (*Nat44EdShowFqOptions) GetMessageName() string { return "nat44_ed_show_fq_options" }
func (*Nat44EdShowFqOptions) GetCrcString() string   { return "51077d14" }
func (*Nat44EdShowFqOptions) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *Nat44EdShowFqOptions) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *Nat44EdShowFqOptions) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *Nat44EdShowFqOptions) Unmarshal(b []byte) error {
	return nil
}

// Show NAT handoff frame queue options reply
//   - retval - return code for the request
//   - frame_queue_nelts - number of worker handoff frame queue elements
//
// Nat44EdShowFqOptionsReply defines message 'nat44_ed_show_fq_options_reply'.
type Nat44EdShowFqOptionsReply struct {
	Retval          int32  `binapi:"i32,name=retval" json:"retval,omitempty"`
	FrameQueueNelts uint32 `binapi:"u32,name=frame_queue_nelts" json:"frame_queue_nelts,omitempty"`
}

func (m *Nat44EdShowFqOptionsReply) Reset()               { *m = Nat44EdShowFqOptionsReply{} }
func (*Nat44EdShowFqOptionsReply) GetMessageName() string { return "nat44_ed_show_fq_options_reply" }
func (*Nat44EdShowFqOptionsReply) GetCrcString() string   { return "7213b545" }
func (*Nat44EdShowFqOptionsReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *Nat44EdShowFqOptionsReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	size += 4 // m.FrameQueueNelts
	return size
}
func (m *Nat44EdShowFqOptionsReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	buf.EncodeUint32(m.FrameQueueNelts)
	return buf.Bytes(), nil
}
func (m *Nat44EdShowFqOptionsReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	m.FrameQueueNelts = buf.DecodeUint32()
	return nil
}

// NAT44-ED inter VRF NAT routing table details response
//   - table_vrf_id - id of the VRF NAT routing table
//   - n_vrf_ids - number of vrf_ids
//   - vrf_ids - ids of resolving destination (tx) VRFs
//
// Nat44EdVrfTablesDetails defines message 'nat44_ed_vrf_tables_details'.
// Deprecated: the message will be removed in the future versions
type Nat44EdVrfTablesDetails struct {
	TableVrfID uint32   `binapi:"u32,name=table_vrf_id" json:"table_vrf_id,omitempty"`
	NVrfIds    uint32   `binapi:"u32,name=n_vrf_ids" json:"-"`
	VrfIds     []uint32 `binapi:"u32[n_vrf_ids],name=vrf_ids" json:"vrf_ids,omitempty"`
}

func (m *Nat44EdVrfTablesDetails) Reset()               { *m = Nat44EdVrfTablesDetails{} }
func (*Nat44EdVrfTablesDetails) GetMessageName() string { return "nat44_ed_vrf_tables_details" }
func (*Nat44EdVrfTablesDetails) GetCrcString() string   { return "7b264e4f" }
func (*Nat44EdVrfTablesDetails) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *Nat44EdVrfTablesDetails) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4                 // m.TableVrfID
	size += 4                 // m.NVrfIds
	size += 4 * len(m.VrfIds) // m.VrfIds
	return size
}
func (m *Nat44EdVrfTablesDetails) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.TableVrfID)
	buf.EncodeUint32(uint32(len(m.VrfIds)))
	for i := 0; i < len(m.VrfIds); i++ {
		var x uint32
		if i < len(m.VrfIds) {
			x = uint32(m.VrfIds[i])
		}
		buf.EncodeUint32(x)
	}
	return buf.Bytes(), nil
}
func (m *Nat44EdVrfTablesDetails) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.TableVrfID = buf.DecodeUint32()
	m.NVrfIds = buf.DecodeUint32()
	m.VrfIds = make([]uint32, m.NVrfIds)
	for i := 0; i < len(m.VrfIds); i++ {
		m.VrfIds[i] = buf.DecodeUint32()
	}
	return nil
}

// Dump NAT44-ED inter VRF NAT routing tables
// Nat44EdVrfTablesDump defines message 'nat44_ed_vrf_tables_dump'.
// Deprecated: the message will be removed in the future versions
type Nat44EdVrfTablesDump struct{}

func (m *Nat44EdVrfTablesDump) Reset()               { *m = Nat44EdVrfTablesDump{} }
func (*Nat44EdVrfTablesDump) GetMessageName() string { return "nat44_ed_vrf_tables_dump" }
func (*Nat44EdVrfTablesDump) GetCrcString() string   { return "51077d14" }
func (*Nat44EdVrfTablesDump) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *Nat44EdVrfTablesDump) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *Nat44EdVrfTablesDump) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *Nat44EdVrfTablesDump) Unmarshal(b []byte) error {
	return nil
}

// NAT44-ED inter VRF NAT routing table details response
//   - table_vrf_id - id of the VRF NAT routing table
//   - n_vrf_ids - number of vrf_ids
//   - vrf_ids - ids of resolving destination (tx) VRFs
//
// Nat44EdVrfTablesV2Details defines message 'nat44_ed_vrf_tables_v2_details'.
// InProgress: the message form may change in the future versions
type Nat44EdVrfTablesV2Details struct {
	TableVrfID uint32   `binapi:"u32,name=table_vrf_id" json:"table_vrf_id,omitempty"`
	NVrfIds    uint32   `binapi:"u32,name=n_vrf_ids" json:"-"`
	VrfIds     []uint32 `binapi:"u32[n_vrf_ids],name=vrf_ids" json:"vrf_ids,omitempty"`
}

func (m *Nat44EdVrfTablesV2Details) Reset()               { *m = Nat44EdVrfTablesV2Details{} }
func (*Nat44EdVrfTablesV2Details) GetMessageName() string { return "nat44_ed_vrf_tables_v2_details" }
func (*Nat44EdVrfTablesV2Details) GetCrcString() string   { return "7b264e4f" }
func (*Nat44EdVrfTablesV2Details) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *Nat44EdVrfTablesV2Details) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4                 // m.TableVrfID
	size += 4                 // m.NVrfIds
	size += 4 * len(m.VrfIds) // m.VrfIds
	return size
}
func (m *Nat44EdVrfTablesV2Details) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.TableVrfID)
	buf.EncodeUint32(uint32(len(m.VrfIds)))
	for i := 0; i < len(m.VrfIds); i++ {
		var x uint32
		if i < len(m.VrfIds) {
			x = uint32(m.VrfIds[i])
		}
		buf.EncodeUint32(x)
	}
	return buf.Bytes(), nil
}
func (m *Nat44EdVrfTablesV2Details) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.TableVrfID = buf.DecodeUint32()
	m.NVrfIds = buf.DecodeUint32()
	m.VrfIds = make([]uint32, m.NVrfIds)
	for i := 0; i < len(m.VrfIds); i++ {
		m.VrfIds[i] = buf.DecodeUint32()
	}
	return nil
}

// Dump NAT44-ED inter VRF NAT routing tables
// Nat44EdVrfTablesV2Dump defines message 'nat44_ed_vrf_tables_v2_dump'.
// InProgress: the message form may change in the future versions
type Nat44EdVrfTablesV2Dump struct{}

func (m *Nat44EdVrfTablesV2Dump) Reset()               { *m = Nat44EdVrfTablesV2Dump{} }
func (*Nat44EdVrfTablesV2Dump) GetMessageName() string { return "nat44_ed_vrf_tables_v2_dump" }
func (*Nat44EdVrfTablesV2Dump) GetCrcString() string   { return "51077d14" }
func (*Nat44EdVrfTablesV2Dump) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *Nat44EdVrfTablesV2Dump) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *Nat44EdVrfTablesV2Dump) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *Nat44EdVrfTablesV2Dump) Unmarshal(b []byte) error {
	return nil
}

// Enable/disable forwarding for NAT44
//
//	Forward packets which don't match existing translation
//	or static mapping instead of dropping them.
//	- enable - true for enable, false for disable
//
// Nat44ForwardingEnableDisable defines message 'nat44_forwarding_enable_disable'.
// Deprecated: the message will be removed in the future versions
type Nat44ForwardingEnableDisable struct {
	Enable bool `binapi:"bool,name=enable" json:"enable,omitempty"`
}

func (m *Nat44ForwardingEnableDisable) Reset() { *m = Nat44ForwardingEnableDisable{} }
func (*Nat44ForwardingEnableDisable) GetMessageName() string {
	return "nat44_forwarding_enable_disable"
}
func (*Nat44ForwardingEnableDisable) GetCrcString() string { return "b3e225d2" }
func (*Nat44ForwardingEnableDisable) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *Nat44ForwardingEnableDisable) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1 // m.Enable
	return size
}
func (m *Nat44ForwardingEnableDisable) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeBool(m.Enable)
	return buf.Bytes(), nil
}
func (m *Nat44ForwardingEnableDisable) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Enable = buf.DecodeBool()
	return nil
}

// Nat44ForwardingEnableDisableReply defines message 'nat44_forwarding_enable_disable_reply'.
// Deprecated: the message will be removed in the future versions
type Nat44ForwardingEnableDisableReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *Nat44ForwardingEnableDisableReply) Reset() { *m = Nat44ForwardingEnableDisableReply{} }
func (*Nat44ForwardingEnableDisableReply) GetMessageName() string {
	return "nat44_forwarding_enable_disable_reply"
}
func (*Nat44ForwardingEnableDisableReply) GetCrcString() string { return "e8d4e804" }
func (*Nat44ForwardingEnableDisableReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *Nat44ForwardingEnableDisableReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *Nat44ForwardingEnableDisableReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *Nat44ForwardingEnableDisableReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// NAT44 identity mapping details response
//   - flags - flag NAT_ADDR_ONLY if address only mapping
//   - ip_address - IPv4 address
//   - protocol - IP protocol
//   - port - port number
//   - sw_if_index - interface
//   - vfr_id - VRF ID
//   - tag - opaque string tag
//
// Nat44IdentityMappingDetails defines message 'nat44_identity_mapping_details'.
type Nat44IdentityMappingDetails struct {
	Flags     nat_types.NatConfigFlags       `binapi:"nat_config_flags,name=flags" json:"flags,omitempty"`
	IPAddress ip_types.IP4Address            `binapi:"ip4_address,name=ip_address" json:"ip_address,omitempty"`
	Protocol  uint8                          `binapi:"u8,name=protocol" json:"protocol,omitempty"`
	Port      uint16                         `binapi:"u16,name=port" json:"port,omitempty"`
	SwIfIndex interface_types.InterfaceIndex `binapi:"interface_index,name=sw_if_index" json:"sw_if_index,omitempty"`
	VrfID     uint32                         `binapi:"u32,name=vrf_id" json:"vrf_id,omitempty"`
	Tag       string                         `binapi:"string[64],name=tag" json:"tag,omitempty"`
}

func (m *Nat44IdentityMappingDetails) Reset()               { *m = Nat44IdentityMappingDetails{} }
func (*Nat44IdentityMappingDetails) GetMessageName() string { return "nat44_identity_mapping_details" }
func (*Nat44IdentityMappingDetails) GetCrcString() string   { return "2a52a030" }
func (*Nat44IdentityMappingDetails) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *Nat44IdentityMappingDetails) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1     // m.Flags
	size += 1 * 4 // m.IPAddress
	size += 1     // m.Protocol
	size += 2     // m.Port
	size += 4     // m.SwIfIndex
	size += 4     // m.VrfID
	size += 64    // m.Tag
	return size
}
func (m *Nat44IdentityMappingDetails) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint8(uint8(m.Flags))
	buf.EncodeBytes(m.IPAddress[:], 4)
	buf.EncodeUint8(m.Protocol)
	buf.EncodeUint16(m.Port)
	buf.EncodeUint32(uint32(m.SwIfIndex))
	buf.EncodeUint32(m.VrfID)
	buf.EncodeString(m.Tag, 64)
	return buf.Bytes(), nil
}
func (m *Nat44IdentityMappingDetails) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Flags = nat_types.NatConfigFlags(buf.DecodeUint8())
	copy(m.IPAddress[:], buf.DecodeBytes(4))
	m.Protocol = buf.DecodeUint8()
	m.Port = buf.DecodeUint16()
	m.SwIfIndex = interface_types.InterfaceIndex(buf.DecodeUint32())
	m.VrfID = buf.DecodeUint32()
	m.Tag = buf.DecodeString(64)
	return nil
}

// Dump NAT44 identity mappings
// Nat44IdentityMappingDump defines message 'nat44_identity_mapping_dump'.
type Nat44IdentityMappingDump struct{}

func (m *Nat44IdentityMappingDump) Reset()               { *m = Nat44IdentityMappingDump{} }
func (*Nat44IdentityMappingDump) GetMessageName() string { return "nat44_identity_mapping_dump" }
func (*Nat44IdentityMappingDump) GetCrcString() string   { return "51077d14" }
func (*Nat44IdentityMappingDump) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *Nat44IdentityMappingDump) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *Nat44IdentityMappingDump) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *Nat44IdentityMappingDump) Unmarshal(b []byte) error {
	return nil
}

// Enable/disable NAT44 feature on the interface
//   - is_add - true if add, false if delete
//   - flags - flag NAT_IS_INSIDE if interface is inside else
//     interface is outside
//   - sw_if_index - software index of the interface
//
// Nat44InterfaceAddDelFeature defines message 'nat44_interface_add_del_feature'.
type Nat44InterfaceAddDelFeature struct {
	IsAdd     bool                           `binapi:"bool,name=is_add" json:"is_add,omitempty"`
	Flags     nat_types.NatConfigFlags       `binapi:"nat_config_flags,name=flags" json:"flags,omitempty"`
	SwIfIndex interface_types.InterfaceIndex `binapi:"interface_index,name=sw_if_index" json:"sw_if_index,omitempty"`
}

func (m *Nat44InterfaceAddDelFeature) Reset()               { *m = Nat44InterfaceAddDelFeature{} }
func (*Nat44InterfaceAddDelFeature) GetMessageName() string { return "nat44_interface_add_del_feature" }
func (*Nat44InterfaceAddDelFeature) GetCrcString() string   { return "f3699b83" }
func (*Nat44InterfaceAddDelFeature) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *Nat44InterfaceAddDelFeature) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1 // m.IsAdd
	size += 1 // m.Flags
	size += 4 // m.SwIfIndex
	return size
}
func (m *Nat44InterfaceAddDelFeature) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeBool(m.IsAdd)
	buf.EncodeUint8(uint8(m.Flags))
	buf.EncodeUint32(uint32(m.SwIfIndex))
	return buf.Bytes(), nil
}
func (m *Nat44InterfaceAddDelFeature) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.IsAdd = buf.DecodeBool()
	m.Flags = nat_types.NatConfigFlags(buf.DecodeUint8())
	m.SwIfIndex = interface_types.InterfaceIndex(buf.DecodeUint32())
	return nil
}

// Nat44InterfaceAddDelFeatureReply defines message 'nat44_interface_add_del_feature_reply'.
type Nat44InterfaceAddDelFeatureReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *Nat44InterfaceAddDelFeatureReply) Reset() { *m = Nat44InterfaceAddDelFeatureReply{} }
func (*Nat44InterfaceAddDelFeatureReply) GetMessageName() string {
	return "nat44_interface_add_del_feature_reply"
}
func (*Nat44InterfaceAddDelFeatureReply) GetCrcString() string { return "e8d4e804" }
func (*Nat44InterfaceAddDelFeatureReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *Nat44InterfaceAddDelFeatureReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *Nat44InterfaceAddDelFeatureReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *Nat44InterfaceAddDelFeatureReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// NAT44 pool addresses interfaces details response
//   - sw_if_index - software index of the interface
//   - flags - flag NAT_TWICE_NAT if NAT address range for external hosts
//
// Nat44InterfaceAddrDetails defines message 'nat44_interface_addr_details'.
type Nat44InterfaceAddrDetails struct {
	SwIfIndex interface_types.InterfaceIndex `binapi:"interface_index,name=sw_if_index" json:"sw_if_index,omitempty"`
	Flags     nat_types.NatConfigFlags       `binapi:"nat_config_flags,name=flags" json:"flags,omitempty"`
}

func (m *Nat44InterfaceAddrDetails) Reset()               { *m = Nat44InterfaceAddrDetails{} }
func (*Nat44InterfaceAddrDetails) GetMessageName() string { return "nat44_interface_addr_details" }
func (*Nat44InterfaceAddrDetails) GetCrcString() string   { return "e4aca9ca" }
func (*Nat44InterfaceAddrDetails) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *Nat44InterfaceAddrDetails) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.SwIfIndex
	size += 1 // m.Flags
	return size
}
func (m *Nat44InterfaceAddrDetails) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(uint32(m.SwIfIndex))
	buf.EncodeUint8(uint8(m.Flags))
	return buf.Bytes(), nil
}
func (m *Nat44InterfaceAddrDetails) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.SwIfIndex = interface_types.InterfaceIndex(buf.DecodeUint32())
	m.Flags = nat_types.NatConfigFlags(buf.DecodeUint8())
	return nil
}

// Dump NAT44 pool addresses interfaces
// Nat44InterfaceAddrDump defines message 'nat44_interface_addr_dump'.
type Nat44InterfaceAddrDump struct{}

func (m *Nat44InterfaceAddrDump) Reset()               { *m = Nat44InterfaceAddrDump{} }
func (*Nat44InterfaceAddrDump) GetMessageName() string { return "nat44_interface_addr_dump" }
func (*Nat44InterfaceAddrDump) GetCrcString() string   { return "51077d14" }
func (*Nat44InterfaceAddrDump) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *Nat44InterfaceAddrDump) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *Nat44InterfaceAddrDump) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *Nat44InterfaceAddrDump) Unmarshal(b []byte) error {
	return nil
}

// NAT44 interface details response
//   - sw_if_index - software index of the interface
//   - flags - flag NAT_IS_INSIDE if interface is inside,
//     flag NAT_IS_OUTSIDE if interface is outside
//     and if both flags are set the interface is
//     both inside and outside
//
// Nat44InterfaceDetails defines message 'nat44_interface_details'.
type Nat44InterfaceDetails struct {
	Flags     nat_types.NatConfigFlags       `binapi:"nat_config_flags,name=flags" json:"flags,omitempty"`
	SwIfIndex interface_types.InterfaceIndex `binapi:"interface_index,name=sw_if_index" json:"sw_if_index,omitempty"`
}

func (m *Nat44InterfaceDetails) Reset()               { *m = Nat44InterfaceDetails{} }
func (*Nat44InterfaceDetails) GetMessageName() string { return "nat44_interface_details" }
func (*Nat44InterfaceDetails) GetCrcString() string   { return "5d286289" }
func (*Nat44InterfaceDetails) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *Nat44InterfaceDetails) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1 // m.Flags
	size += 4 // m.SwIfIndex
	return size
}
func (m *Nat44InterfaceDetails) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint8(uint8(m.Flags))
	buf.EncodeUint32(uint32(m.SwIfIndex))
	return buf.Bytes(), nil
}
func (m *Nat44InterfaceDetails) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Flags = nat_types.NatConfigFlags(buf.DecodeUint8())
	m.SwIfIndex = interface_types.InterfaceIndex(buf.DecodeUint32())
	return nil
}

// Dump interfaces with NAT44 feature
// Nat44InterfaceDump defines message 'nat44_interface_dump'.
type Nat44InterfaceDump struct{}

func (m *Nat44InterfaceDump) Reset()               { *m = Nat44InterfaceDump{} }
func (*Nat44InterfaceDump) GetMessageName() string { return "nat44_interface_dump" }
func (*Nat44InterfaceDump) GetCrcString() string   { return "51077d14" }
func (*Nat44InterfaceDump) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *Nat44InterfaceDump) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *Nat44InterfaceDump) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *Nat44InterfaceDump) Unmarshal(b []byte) error {
	return nil
}

// Add/delete NAT44 load-balancing static mapping rule backend
//   - is_add - true if add, false if delete
//   - external_addr - external IPv4 address of the service
//   - external_port - external L4 port number of the service
//   - protocol - IP protocol number of the service
//   - local - local network node
//
// Nat44LbStaticMappingAddDelLocal defines message 'nat44_lb_static_mapping_add_del_local'.
type Nat44LbStaticMappingAddDelLocal struct {
	IsAdd        bool                `binapi:"bool,name=is_add" json:"is_add,omitempty"`
	ExternalAddr ip_types.IP4Address `binapi:"ip4_address,name=external_addr" json:"external_addr,omitempty"`
	ExternalPort uint16              `binapi:"u16,name=external_port" json:"external_port,omitempty"`
	Protocol     uint8               `binapi:"u8,name=protocol" json:"protocol,omitempty"`
	Local        Nat44LbAddrPort     `binapi:"nat44_lb_addr_port,name=local" json:"local,omitempty"`
}

func (m *Nat44LbStaticMappingAddDelLocal) Reset() { *m = Nat44LbStaticMappingAddDelLocal{} }
func (*Nat44LbStaticMappingAddDelLocal) GetMessageName() string {
	return "nat44_lb_static_mapping_add_del_local"
}
func (*Nat44LbStaticMappingAddDelLocal) GetCrcString() string { return "7ca47547" }
func (*Nat44LbStaticMappingAddDelLocal) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *Nat44LbStaticMappingAddDelLocal) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1     // m.IsAdd
	size += 1 * 4 // m.ExternalAddr
	size += 2     // m.ExternalPort
	size += 1     // m.Protocol
	size += 1 * 4 // m.Local.Addr
	size += 2     // m.Local.Port
	size += 1     // m.Local.Probability
	size += 4     // m.Local.VrfID
	return size
}
func (m *Nat44LbStaticMappingAddDelLocal) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeBool(m.IsAdd)
	buf.EncodeBytes(m.ExternalAddr[:], 4)
	buf.EncodeUint16(m.ExternalPort)
	buf.EncodeUint8(m.Protocol)
	buf.EncodeBytes(m.Local.Addr[:], 4)
	buf.EncodeUint16(m.Local.Port)
	buf.EncodeUint8(m.Local.Probability)
	buf.EncodeUint32(m.Local.VrfID)
	return buf.Bytes(), nil
}
func (m *Nat44LbStaticMappingAddDelLocal) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.IsAdd = buf.DecodeBool()
	copy(m.ExternalAddr[:], buf.DecodeBytes(4))
	m.ExternalPort = buf.DecodeUint16()
	m.Protocol = buf.DecodeUint8()
	copy(m.Local.Addr[:], buf.DecodeBytes(4))
	m.Local.Port = buf.DecodeUint16()
	m.Local.Probability = buf.DecodeUint8()
	m.Local.VrfID = buf.DecodeUint32()
	return nil
}

// Nat44LbStaticMappingAddDelLocalReply defines message 'nat44_lb_static_mapping_add_del_local_reply'.
type Nat44LbStaticMappingAddDelLocalReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *Nat44LbStaticMappingAddDelLocalReply) Reset() { *m = Nat44LbStaticMappingAddDelLocalReply{} }
func (*Nat44LbStaticMappingAddDelLocalReply) GetMessageName() string {
	return "nat44_lb_static_mapping_add_del_local_reply"
}
func (*Nat44LbStaticMappingAddDelLocalReply) GetCrcString() string { return "e8d4e804" }
func (*Nat44LbStaticMappingAddDelLocalReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *Nat44LbStaticMappingAddDelLocalReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *Nat44LbStaticMappingAddDelLocalReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *Nat44LbStaticMappingAddDelLocalReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// NAT44 load-balancing static mapping rule details response
//   - external_addr - external IPv4 address of the service
//   - external_port - external L4 port number of the service
//   - protocol - IP protocol number of the service
//   - flags - flag NAT_TWICE_NAT if NAT address range for external hosts,
//     flag NAT_SELF_TWICE_NAT if translate external host address
//     and port whenever external host address equals local
//     address of internal host,
//     flag NAT_OUT2IN_ONLY if rule match only out2in direction
//   - affinity - if 0 disabled, otherwise client IP affinity sticky time
//     in seconds
//   - local_num - number of local network nodes
//   - locals - local network nodes
//   - tag - opaque string tag
//
// Nat44LbStaticMappingDetails defines message 'nat44_lb_static_mapping_details'.
type Nat44LbStaticMappingDetails struct {
	ExternalAddr ip_types.IP4Address      `binapi:"ip4_address,name=external_addr" json:"external_addr,omitempty"`
	ExternalPort uint16                   `binapi:"u16,name=external_port" json:"external_port,omitempty"`
	Protocol     uint8                    `binapi:"u8,name=protocol" json:"protocol,omitempty"`
	Flags        nat_types.NatConfigFlags `binapi:"nat_config_flags,name=flags" json:"flags,omitempty"`
	Affinity     uint32                   `binapi:"u32,name=affinity" json:"affinity,omitempty"`
	Tag          string                   `binapi:"string[64],name=tag" json:"tag,omitempty"`
	LocalNum     uint32                   `binapi:"u32,name=local_num" json:"-"`
	Locals       []Nat44LbAddrPort        `binapi:"nat44_lb_addr_port[local_num],name=locals" json:"locals,omitempty"`
}

func (m *Nat44LbStaticMappingDetails) Reset()               { *m = Nat44LbStaticMappingDetails{} }
func (*Nat44LbStaticMappingDetails) GetMessageName() string { return "nat44_lb_static_mapping_details" }
func (*Nat44LbStaticMappingDetails) GetCrcString() string   { return "ed5ce876" }
func (*Nat44LbStaticMappingDetails) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *Nat44LbStaticMappingDetails) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1 * 4 // m.ExternalAddr
	size += 2     // m.ExternalPort
	size += 1     // m.Protocol
	size += 1     // m.Flags
	size += 4     // m.Affinity
	size += 64    // m.Tag
	size += 4     // m.LocalNum
	for j1 := 0; j1 < len(m.Locals); j1++ {
		var s1 Nat44LbAddrPort
		_ = s1
		if j1 < len(m.Locals) {
			s1 = m.Locals[j1]
		}
		size += 1 * 4 // s1.Addr
		size += 2     // s1.Port
		size += 1     // s1.Probability
		size += 4     // s1.VrfID
	}
	return size
}
func (m *Nat44LbStaticMappingDetails) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeBytes(m.ExternalAddr[:], 4)
	buf.EncodeUint16(m.ExternalPort)
	buf.EncodeUint8(m.Protocol)
	buf.EncodeUint8(uint8(m.Flags))
	buf.EncodeUint32(m.Affinity)
	buf.EncodeString(m.Tag, 64)
	buf.EncodeUint32(uint32(len(m.Locals)))
	for j0 := 0; j0 < len(m.Locals); j0++ {
		var v0 Nat44LbAddrPort // Locals
		if j0 < len(m.Locals) {
			v0 = m.Locals[j0]
		}
		buf.EncodeBytes(v0.Addr[:], 4)
		buf.EncodeUint16(v0.Port)
		buf.EncodeUint8(v0.Probability)
		buf.EncodeUint32(v0.VrfID)
	}
	return buf.Bytes(), nil
}
func (m *Nat44LbStaticMappingDetails) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	copy(m.ExternalAddr[:], buf.DecodeBytes(4))
	m.ExternalPort = buf.DecodeUint16()
	m.Protocol = buf.DecodeUint8()
	m.Flags = nat_types.NatConfigFlags(buf.DecodeUint8())
	m.Affinity = buf.DecodeUint32()
	m.Tag = buf.DecodeString(64)
	m.LocalNum = buf.DecodeUint32()
	m.Locals = make([]Nat44LbAddrPort, m.LocalNum)
	for j0 := 0; j0 < len(m.Locals); j0++ {
		copy(m.Locals[j0].Addr[:], buf.DecodeBytes(4))
		m.Locals[j0].Port = buf.DecodeUint16()
		m.Locals[j0].Probability = buf.DecodeUint8()
		m.Locals[j0].VrfID = buf.DecodeUint32()
	}
	return nil
}

// Dump NAT44 load-balancing static mapping rules
// Nat44LbStaticMappingDump defines message 'nat44_lb_static_mapping_dump'.
type Nat44LbStaticMappingDump struct{}

func (m *Nat44LbStaticMappingDump) Reset()               { *m = Nat44LbStaticMappingDump{} }
func (*Nat44LbStaticMappingDump) GetMessageName() string { return "nat44_lb_static_mapping_dump" }
func (*Nat44LbStaticMappingDump) GetCrcString() string   { return "51077d14" }
func (*Nat44LbStaticMappingDump) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *Nat44LbStaticMappingDump) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *Nat44LbStaticMappingDump) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *Nat44LbStaticMappingDump) Unmarshal(b []byte) error {
	return nil
}

// NAT44 set session limit
//   - session_limit - session limit
//   - vrf_id - vrf id
//
// Nat44SetSessionLimit defines message 'nat44_set_session_limit'.
type Nat44SetSessionLimit struct {
	SessionLimit uint32 `binapi:"u32,name=session_limit" json:"session_limit,omitempty"`
	VrfID        uint32 `binapi:"u32,name=vrf_id" json:"vrf_id,omitempty"`
}

func (m *Nat44SetSessionLimit) Reset()               { *m = Nat44SetSessionLimit{} }
func (*Nat44SetSessionLimit) GetMessageName() string { return "nat44_set_session_limit" }
func (*Nat44SetSessionLimit) GetCrcString() string   { return "8899bbb1" }
func (*Nat44SetSessionLimit) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *Nat44SetSessionLimit) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.SessionLimit
	size += 4 // m.VrfID
	return size
}
func (m *Nat44SetSessionLimit) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.SessionLimit)
	buf.EncodeUint32(m.VrfID)
	return buf.Bytes(), nil
}
func (m *Nat44SetSessionLimit) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.SessionLimit = buf.DecodeUint32()
	m.VrfID = buf.DecodeUint32()
	return nil
}

// Nat44SetSessionLimitReply defines message 'nat44_set_session_limit_reply'.
type Nat44SetSessionLimitReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *Nat44SetSessionLimitReply) Reset()               { *m = Nat44SetSessionLimitReply{} }
func (*Nat44SetSessionLimitReply) GetMessageName() string { return "nat44_set_session_limit_reply" }
func (*Nat44SetSessionLimitReply) GetCrcString() string   { return "e8d4e804" }
func (*Nat44SetSessionLimitReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *Nat44SetSessionLimitReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *Nat44SetSessionLimitReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *Nat44SetSessionLimitReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// Show NAT44 plugin running config
// Nat44ShowRunningConfig defines message 'nat44_show_running_config'.
type Nat44ShowRunningConfig struct{}

func (m *Nat44ShowRunningConfig) Reset()               { *m = Nat44ShowRunningConfig{} }
func (*Nat44ShowRunningConfig) GetMessageName() string { return "nat44_show_running_config" }
func (*Nat44ShowRunningConfig) GetCrcString() string   { return "51077d14" }
func (*Nat44ShowRunningConfig) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *Nat44ShowRunningConfig) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *Nat44ShowRunningConfig) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *Nat44ShowRunningConfig) Unmarshal(b []byte) error {
	return nil
}

// Show NAT44 plugin running config reply
//   - retval - return code for the request
//   - inside_vrf - default inside VRF id
//   - outside_vrf - outside VRF id
//   - users - maximum number of users per worker thread
//     (NAT44_IS_ENDPOINT_INDEPENDENT)
//   - sessions - maximum number of sessions per worker thread
//   - user_sessions - maximum number of sessions per user
//     (NAT44_IS_ENDPOINT_INDEPENDENT)
//   - user_buckets - number of user hash buckets
//     (NAT44_IS_ENDPOINT_INDEPENDENT)
//   - translation_buckets - number of translation hash buckets
//   - flags - flag NAT44_IS_ENDPOINT_INDEPENDENT,
//     NAT44_IS_ENDPOINT_DEPENDENT,
//     NAT44_IS_STATIC_MAPPING_ONLY,
//     NAT44_IS_CONNECTION_TRACKING,
//     NAT44_IS_OUT2IN_DPO
//
// Nat44ShowRunningConfigReply defines message 'nat44_show_running_config_reply'.
type Nat44ShowRunningConfigReply struct {
	Retval              int32                 `binapi:"i32,name=retval" json:"retval,omitempty"`
	InsideVrf           uint32                `binapi:"u32,name=inside_vrf" json:"inside_vrf,omitempty"`
	OutsideVrf          uint32                `binapi:"u32,name=outside_vrf" json:"outside_vrf,omitempty"`
	Users               uint32                `binapi:"u32,name=users" json:"users,omitempty"`
	Sessions            uint32                `binapi:"u32,name=sessions" json:"sessions,omitempty"`
	UserSessions        uint32                `binapi:"u32,name=user_sessions" json:"user_sessions,omitempty"`
	UserBuckets         uint32                `binapi:"u32,name=user_buckets" json:"user_buckets,omitempty"`
	TranslationBuckets  uint32                `binapi:"u32,name=translation_buckets" json:"translation_buckets,omitempty"`
	ForwardingEnabled   bool                  `binapi:"bool,name=forwarding_enabled" json:"forwarding_enabled,omitempty"`
	IpfixLoggingEnabled bool                  `binapi:"bool,name=ipfix_logging_enabled" json:"ipfix_logging_enabled,omitempty"`
	Timeouts            nat_types.NatTimeouts `binapi:"nat_timeouts,name=timeouts" json:"timeouts,omitempty"`
	LogLevel            nat_types.NatLogLevel `binapi:"nat_log_level,name=log_level" json:"log_level,omitempty"`
	Flags               Nat44ConfigFlags      `binapi:"nat44_config_flags,name=flags" json:"flags,omitempty"`
}

func (m *Nat44ShowRunningConfigReply) Reset()               { *m = Nat44ShowRunningConfigReply{} }
func (*Nat44ShowRunningConfigReply) GetMessageName() string { return "nat44_show_running_config_reply" }
func (*Nat44ShowRunningConfigReply) GetCrcString() string   { return "93d8e267" }
func (*Nat44ShowRunningConfigReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *Nat44ShowRunningConfigReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	size += 4 // m.InsideVrf
	size += 4 // m.OutsideVrf
	size += 4 // m.Users
	size += 4 // m.Sessions
	size += 4 // m.UserSessions
	size += 4 // m.UserBuckets
	size += 4 // m.TranslationBuckets
	size += 1 // m.ForwardingEnabled
	size += 1 // m.IpfixLoggingEnabled
	size += 4 // m.Timeouts.UDP
	size += 4 // m.Timeouts.TCPEstablished
	size += 4 // m.Timeouts.TCPTransitory
	size += 4 // m.Timeouts.ICMP
	size += 1 // m.LogLevel
	size += 1 // m.Flags
	return size
}
func (m *Nat44ShowRunningConfigReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	buf.EncodeUint32(m.InsideVrf)
	buf.EncodeUint32(m.OutsideVrf)
	buf.EncodeUint32(m.Users)
	buf.EncodeUint32(m.Sessions)
	buf.EncodeUint32(m.UserSessions)
	buf.EncodeUint32(m.UserBuckets)
	buf.EncodeUint32(m.TranslationBuckets)
	buf.EncodeBool(m.ForwardingEnabled)
	buf.EncodeBool(m.IpfixLoggingEnabled)
	buf.EncodeUint32(m.Timeouts.UDP)
	buf.EncodeUint32(m.Timeouts.TCPEstablished)
	buf.EncodeUint32(m.Timeouts.TCPTransitory)
	buf.EncodeUint32(m.Timeouts.ICMP)
	buf.EncodeUint8(uint8(m.LogLevel))
	buf.EncodeUint8(uint8(m.Flags))
	return buf.Bytes(), nil
}
func (m *Nat44ShowRunningConfigReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	m.InsideVrf = buf.DecodeUint32()
	m.OutsideVrf = buf.DecodeUint32()
	m.Users = buf.DecodeUint32()
	m.Sessions = buf.DecodeUint32()
	m.UserSessions = buf.DecodeUint32()
	m.UserBuckets = buf.DecodeUint32()
	m.TranslationBuckets = buf.DecodeUint32()
	m.ForwardingEnabled = buf.DecodeBool()
	m.IpfixLoggingEnabled = buf.DecodeBool()
	m.Timeouts.UDP = buf.DecodeUint32()
	m.Timeouts.TCPEstablished = buf.DecodeUint32()
	m.Timeouts.TCPTransitory = buf.DecodeUint32()
	m.Timeouts.ICMP = buf.DecodeUint32()
	m.LogLevel = nat_types.NatLogLevel(buf.DecodeUint8())
	m.Flags = Nat44ConfigFlags(buf.DecodeUint8())
	return nil
}

// NAT44 static mapping details response
//   - flags - flag NAT_ADDR_ONLY if address only mapping,
//     flag NAT_TWICE_NAT if NAT address range for external hosts,
//     flag NAT_SELF_TWICE_NAT if translate external host address
//     and port whenever external host address equals local
//     address of internal host,
//     flag NAT_OUT2IN_ONLY if rule match only out2in direction
//   - local_ip_address - local IPv4 address
//   - external_ip_address - external IPv4 address
//   - protocol - IP protocol, valid only if no NAT_ADDR_ONLY flag
//   - local_port - local port number, valid only if no NAT_ADDR_ONLY flag
//   - external_port - external port number, valid only if no NAT_ADDR_ONLY flag
//   - external_sw_if_index - external interface
//   - vfr_id - VRF ID
//   - tag - opaque string tag
//
// Nat44StaticMappingDetails defines message 'nat44_static_mapping_details'.
type Nat44StaticMappingDetails struct {
	Flags             nat_types.NatConfigFlags       `binapi:"nat_config_flags,name=flags" json:"flags,omitempty"`
	LocalIPAddress    ip_types.IP4Address            `binapi:"ip4_address,name=local_ip_address" json:"local_ip_address,omitempty"`
	ExternalIPAddress ip_types.IP4Address            `binapi:"ip4_address,name=external_ip_address" json:"external_ip_address,omitempty"`
	Protocol          uint8                          `binapi:"u8,name=protocol" json:"protocol,omitempty"`
	LocalPort         uint16                         `binapi:"u16,name=local_port" json:"local_port,omitempty"`
	ExternalPort      uint16                         `binapi:"u16,name=external_port" json:"external_port,omitempty"`
	ExternalSwIfIndex interface_types.InterfaceIndex `binapi:"interface_index,name=external_sw_if_index" json:"external_sw_if_index,omitempty"`
	VrfID             uint32                         `binapi:"u32,name=vrf_id" json:"vrf_id,omitempty"`
	Tag               string                         `binapi:"string[64],name=tag" json:"tag,omitempty"`
}

func (m *Nat44StaticMappingDetails) Reset()               { *m = Nat44StaticMappingDetails{} }
func (*Nat44StaticMappingDetails) GetMessageName() string { return "nat44_static_mapping_details" }
func (*Nat44StaticMappingDetails) GetCrcString() string   { return "06cb40b2" }
func (*Nat44StaticMappingDetails) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *Nat44StaticMappingDetails) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1     // m.Flags
	size += 1 * 4 // m.LocalIPAddress
	size += 1 * 4 // m.ExternalIPAddress
	size += 1     // m.Protocol
	size += 2     // m.LocalPort
	size += 2     // m.ExternalPort
	size += 4     // m.ExternalSwIfIndex
	size += 4     // m.VrfID
	size += 64    // m.Tag
	return size
}
func (m *Nat44StaticMappingDetails) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint8(uint8(m.Flags))
	buf.EncodeBytes(m.LocalIPAddress[:], 4)
	buf.EncodeBytes(m.ExternalIPAddress[:], 4)
	buf.EncodeUint8(m.Protocol)
	buf.EncodeUint16(m.LocalPort)
	buf.EncodeUint16(m.ExternalPort)
	buf.EncodeUint32(uint32(m.ExternalSwIfIndex))
	buf.EncodeUint32(m.VrfID)
	buf.EncodeString(m.Tag, 64)
	return buf.Bytes(), nil
}
func (m *Nat44StaticMappingDetails) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Flags = nat_types.NatConfigFlags(buf.DecodeUint8())
	copy(m.LocalIPAddress[:], buf.DecodeBytes(4))
	copy(m.ExternalIPAddress[:], buf.DecodeBytes(4))
	m.Protocol = buf.DecodeUint8()
	m.LocalPort = buf.DecodeUint16()
	m.ExternalPort = buf.DecodeUint16()
	m.ExternalSwIfIndex = interface_types.InterfaceIndex(buf.DecodeUint32())
	m.VrfID = buf.DecodeUint32()
	m.Tag = buf.DecodeString(64)
	return nil
}

// Dump NAT44 static mappings
// Nat44StaticMappingDump defines message 'nat44_static_mapping_dump'.
type Nat44StaticMappingDump struct{}

func (m *Nat44StaticMappingDump) Reset()               { *m = Nat44StaticMappingDump{} }
func (*Nat44StaticMappingDump) GetMessageName() string { return "nat44_static_mapping_dump" }
func (*Nat44StaticMappingDump) GetCrcString() string   { return "51077d14" }
func (*Nat44StaticMappingDump) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *Nat44StaticMappingDump) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *Nat44StaticMappingDump) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *Nat44StaticMappingDump) Unmarshal(b []byte) error {
	return nil
}

// NAT44 users response
//
//	@vrf_id - VRF ID
//	- ip_address - IPv4 address
//	- nsessions - number of dynamic sessions
//	- nstaticsessions - number of static sessions
//
// Nat44UserDetails defines message 'nat44_user_details'.
type Nat44UserDetails struct {
	VrfID           uint32              `binapi:"u32,name=vrf_id" json:"vrf_id,omitempty"`
	IPAddress       ip_types.IP4Address `binapi:"ip4_address,name=ip_address" json:"ip_address,omitempty"`
	Nsessions       uint32              `binapi:"u32,name=nsessions" json:"nsessions,omitempty"`
	Nstaticsessions uint32              `binapi:"u32,name=nstaticsessions" json:"nstaticsessions,omitempty"`
}

func (m *Nat44UserDetails) Reset()               { *m = Nat44UserDetails{} }
func (*Nat44UserDetails) GetMessageName() string { return "nat44_user_details" }
func (*Nat44UserDetails) GetCrcString() string   { return "355896c2" }
func (*Nat44UserDetails) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *Nat44UserDetails) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4     // m.VrfID
	size += 1 * 4 // m.IPAddress
	size += 4     // m.Nsessions
	size += 4     // m.Nstaticsessions
	return size
}
func (m *Nat44UserDetails) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.VrfID)
	buf.EncodeBytes(m.IPAddress[:], 4)
	buf.EncodeUint32(m.Nsessions)
	buf.EncodeUint32(m.Nstaticsessions)
	return buf.Bytes(), nil
}
func (m *Nat44UserDetails) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.VrfID = buf.DecodeUint32()
	copy(m.IPAddress[:], buf.DecodeBytes(4))
	m.Nsessions = buf.DecodeUint32()
	m.Nstaticsessions = buf.DecodeUint32()
	return nil
}

// Dump NAT44 users
// Nat44UserDump defines message 'nat44_user_dump'.
type Nat44UserDump struct{}

func (m *Nat44UserDump) Reset()               { *m = Nat44UserDump{} }
func (*Nat44UserDump) GetMessageName() string { return "nat44_user_dump" }
func (*Nat44UserDump) GetCrcString() string   { return "51077d14" }
func (*Nat44UserDump) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *Nat44UserDump) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *Nat44UserDump) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *Nat44UserDump) Unmarshal(b []byte) error {
	return nil
}

// NAT44 user's sessions response
//   - outside_ip_address - outside IPv4 address
//   - outside_port - outside port
//   - inside_ip_address - inside IPv4 address
//   - inside_port - inside port
//   - protocol - protocol
//   - flags - flag NAT_IS_STATIC if session is static,
//     flag NAT_IS_TWICE_NAT if session is twice-nat,
//     flag NAT_IS_EXT_HOST_VALID if external host address
//     and port are valid
//   - last_heard - last heard timer
//   - total_bytes - count of bytes sent through session
//   - total_pkts - count of pakets sent through session
//   - ext_host_address - external host IPv4 address
//   - ext_host_port - external host port
//   - ext_host_nat_address - post-NAT external host IPv4 address (valid
//     only if twice-nat session)
//   - ext_host_nat_port - post-NAT external host port (valid only if
//     twice-nat session)
//
// Nat44UserSessionDetails defines message 'nat44_user_session_details'.
type Nat44UserSessionDetails struct {
	OutsideIPAddress  ip_types.IP4Address      `binapi:"ip4_address,name=outside_ip_address" json:"outside_ip_address,omitempty"`
	OutsidePort       uint16                   `binapi:"u16,name=outside_port" json:"outside_port,omitempty"`
	InsideIPAddress   ip_types.IP4Address      `binapi:"ip4_address,name=inside_ip_address" json:"inside_ip_address,omitempty"`
	InsidePort        uint16                   `binapi:"u16,name=inside_port" json:"inside_port,omitempty"`
	Protocol          uint16                   `binapi:"u16,name=protocol" json:"protocol,omitempty"`
	Flags             nat_types.NatConfigFlags `binapi:"nat_config_flags,name=flags" json:"flags,omitempty"`
	LastHeard         uint64                   `binapi:"u64,name=last_heard" json:"last_heard,omitempty"`
	TotalBytes        uint64                   `binapi:"u64,name=total_bytes" json:"total_bytes,omitempty"`
	TotalPkts         uint32                   `binapi:"u32,name=total_pkts" json:"total_pkts,omitempty"`
	ExtHostAddress    ip_types.IP4Address      `binapi:"ip4_address,name=ext_host_address" json:"ext_host_address,omitempty"`
	ExtHostPort       uint16                   `binapi:"u16,name=ext_host_port" json:"ext_host_port,omitempty"`
	ExtHostNatAddress ip_types.IP4Address      `binapi:"ip4_address,name=ext_host_nat_address" json:"ext_host_nat_address,omitempty"`
	ExtHostNatPort    uint16                   `binapi:"u16,name=ext_host_nat_port" json:"ext_host_nat_port,omitempty"`
}

func (m *Nat44UserSessionDetails) Reset()               { *m = Nat44UserSessionDetails{} }
func (*Nat44UserSessionDetails) GetMessageName() string { return "nat44_user_session_details" }
func (*Nat44UserSessionDetails) GetCrcString() string   { return "2cf6e16d" }
func (*Nat44UserSessionDetails) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *Nat44UserSessionDetails) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1 * 4 // m.OutsideIPAddress
	size += 2     // m.OutsidePort
	size += 1 * 4 // m.InsideIPAddress
	size += 2     // m.InsidePort
	size += 2     // m.Protocol
	size += 1     // m.Flags
	size += 8     // m.LastHeard
	size += 8     // m.TotalBytes
	size += 4     // m.TotalPkts
	size += 1 * 4 // m.ExtHostAddress
	size += 2     // m.ExtHostPort
	size += 1 * 4 // m.ExtHostNatAddress
	size += 2     // m.ExtHostNatPort
	return size
}
func (m *Nat44UserSessionDetails) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeBytes(m.OutsideIPAddress[:], 4)
	buf.EncodeUint16(m.OutsidePort)
	buf.EncodeBytes(m.InsideIPAddress[:], 4)
	buf.EncodeUint16(m.InsidePort)
	buf.EncodeUint16(m.Protocol)
	buf.EncodeUint8(uint8(m.Flags))
	buf.EncodeUint64(m.LastHeard)
	buf.EncodeUint64(m.TotalBytes)
	buf.EncodeUint32(m.TotalPkts)
	buf.EncodeBytes(m.ExtHostAddress[:], 4)
	buf.EncodeUint16(m.ExtHostPort)
	buf.EncodeBytes(m.ExtHostNatAddress[:], 4)
	buf.EncodeUint16(m.ExtHostNatPort)
	return buf.Bytes(), nil
}
func (m *Nat44UserSessionDetails) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	copy(m.OutsideIPAddress[:], buf.DecodeBytes(4))
	m.OutsidePort = buf.DecodeUint16()
	copy(m.InsideIPAddress[:], buf.DecodeBytes(4))
	m.InsidePort = buf.DecodeUint16()
	m.Protocol = buf.DecodeUint16()
	m.Flags = nat_types.NatConfigFlags(buf.DecodeUint8())
	m.LastHeard = buf.DecodeUint64()
	m.TotalBytes = buf.DecodeUint64()
	m.TotalPkts = buf.DecodeUint32()
	copy(m.ExtHostAddress[:], buf.DecodeBytes(4))
	m.ExtHostPort = buf.DecodeUint16()
	copy(m.ExtHostNatAddress[:], buf.DecodeBytes(4))
	m.ExtHostNatPort = buf.DecodeUint16()
	return nil
}

// NAT44 user's sessions
//   - ip_address - IPv4 address of the user to dump
//   - vrf_id - VRF_ID
//
// Nat44UserSessionDump defines message 'nat44_user_session_dump'.
type Nat44UserSessionDump struct {
	IPAddress ip_types.IP4Address `binapi:"ip4_address,name=ip_address" json:"ip_address,omitempty"`
	VrfID     uint32              `binapi:"u32,name=vrf_id" json:"vrf_id,omitempty"`
}

func (m *Nat44UserSessionDump) Reset()               { *m = Nat44UserSessionDump{} }
func (*Nat44UserSessionDump) GetMessageName() string { return "nat44_user_session_dump" }
func (*Nat44UserSessionDump) GetCrcString() string   { return "e1899c98" }
func (*Nat44UserSessionDump) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *Nat44UserSessionDump) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1 * 4 // m.IPAddress
	size += 4     // m.VrfID
	return size
}
func (m *Nat44UserSessionDump) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeBytes(m.IPAddress[:], 4)
	buf.EncodeUint32(m.VrfID)
	return buf.Bytes(), nil
}
func (m *Nat44UserSessionDump) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	copy(m.IPAddress[:], buf.DecodeBytes(4))
	m.VrfID = buf.DecodeUint32()
	return nil
}

// NAT44 user's sessions response
//   - outside_ip_address - outside IPv4 address
//   - outside_port - outside port
//   - inside_ip_address - inside IPv4 address
//   - inside_port - inside port
//   - protocol - protocol
//   - flags - flag NAT_IS_STATIC if session is static,
//     flag NAT_IS_TWICE_NAT if session is twice-nat,
//     flag NAT_IS_EXT_HOST_VALID if external host address
//     and port are valid
//   - last_heard - last heard timer
//   - total_bytes - count of bytes sent through session
//   - total_pkts - count of pakets sent through session
//   - ext_host_address - external host IPv4 address
//   - ext_host_port - external host port
//   - ext_host_nat_address - post-NAT external host IPv4 address (valid
//     only if twice-nat session)
//   - ext_host_nat_port - post-NAT external host port (valid only if
//     twice-nat session)
//   - is_timed_out - true, if session is timed out, and false, if session
//     is active
//
// Nat44UserSessionV2Details defines message 'nat44_user_session_v2_details'.
type Nat44UserSessionV2Details struct {
	OutsideIPAddress  ip_types.IP4Address      `binapi:"ip4_address,name=outside_ip_address" json:"outside_ip_address,omitempty"`
	OutsidePort       uint16                   `binapi:"u16,name=outside_port" json:"outside_port,omitempty"`
	InsideIPAddress   ip_types.IP4Address      `binapi:"ip4_address,name=inside_ip_address" json:"inside_ip_address,omitempty"`
	InsidePort        uint16                   `binapi:"u16,name=inside_port" json:"inside_port,omitempty"`
	Protocol          uint16                   `binapi:"u16,name=protocol" json:"protocol,omitempty"`
	Flags             nat_types.NatConfigFlags `binapi:"nat_config_flags,name=flags" json:"flags,omitempty"`
	LastHeard         uint64                   `binapi:"u64,name=last_heard" json:"last_heard,omitempty"`
	TotalBytes        uint64                   `binapi:"u64,name=total_bytes" json:"total_bytes,omitempty"`
	TotalPkts         uint32                   `binapi:"u32,name=total_pkts" json:"total_pkts,omitempty"`
	ExtHostAddress    ip_types.IP4Address      `binapi:"ip4_address,name=ext_host_address" json:"ext_host_address,omitempty"`
	ExtHostPort       uint16                   `binapi:"u16,name=ext_host_port" json:"ext_host_port,omitempty"`
	ExtHostNatAddress ip_types.IP4Address      `binapi:"ip4_address,name=ext_host_nat_address" json:"ext_host_nat_address,omitempty"`
	ExtHostNatPort    uint16                   `binapi:"u16,name=ext_host_nat_port" json:"ext_host_nat_port,omitempty"`
	IsTimedOut        bool                     `binapi:"bool,name=is_timed_out" json:"is_timed_out,omitempty"`
}

func (m *Nat44UserSessionV2Details) Reset()               { *m = Nat44UserSessionV2Details{} }
func (*Nat44UserSessionV2Details) GetMessageName() string { return "nat44_user_session_v2_details" }
func (*Nat44UserSessionV2Details) GetCrcString() string   { return "fd42b729" }
func (*Nat44UserSessionV2Details) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *Nat44UserSessionV2Details) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1 * 4 // m.OutsideIPAddress
	size += 2     // m.OutsidePort
	size += 1 * 4 // m.InsideIPAddress
	size += 2     // m.InsidePort
	size += 2     // m.Protocol
	size += 1     // m.Flags
	size += 8     // m.LastHeard
	size += 8     // m.TotalBytes
	size += 4     // m.TotalPkts
	size += 1 * 4 // m.ExtHostAddress
	size += 2     // m.ExtHostPort
	size += 1 * 4 // m.ExtHostNatAddress
	size += 2     // m.ExtHostNatPort
	size += 1     // m.IsTimedOut
	return size
}
func (m *Nat44UserSessionV2Details) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeBytes(m.OutsideIPAddress[:], 4)
	buf.EncodeUint16(m.OutsidePort)
	buf.EncodeBytes(m.InsideIPAddress[:], 4)
	buf.EncodeUint16(m.InsidePort)
	buf.EncodeUint16(m.Protocol)
	buf.EncodeUint8(uint8(m.Flags))
	buf.EncodeUint64(m.LastHeard)
	buf.EncodeUint64(m.TotalBytes)
	buf.EncodeUint32(m.TotalPkts)
	buf.EncodeBytes(m.ExtHostAddress[:], 4)
	buf.EncodeUint16(m.ExtHostPort)
	buf.EncodeBytes(m.ExtHostNatAddress[:], 4)
	buf.EncodeUint16(m.ExtHostNatPort)
	buf.EncodeBool(m.IsTimedOut)
	return buf.Bytes(), nil
}
func (m *Nat44UserSessionV2Details) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	copy(m.OutsideIPAddress[:], buf.DecodeBytes(4))
	m.OutsidePort = buf.DecodeUint16()
	copy(m.InsideIPAddress[:], buf.DecodeBytes(4))
	m.InsidePort = buf.DecodeUint16()
	m.Protocol = buf.DecodeUint16()
	m.Flags = nat_types.NatConfigFlags(buf.DecodeUint8())
	m.LastHeard = buf.DecodeUint64()
	m.TotalBytes = buf.DecodeUint64()
	m.TotalPkts = buf.DecodeUint32()
	copy(m.ExtHostAddress[:], buf.DecodeBytes(4))
	m.ExtHostPort = buf.DecodeUint16()
	copy(m.ExtHostNatAddress[:], buf.DecodeBytes(4))
	m.ExtHostNatPort = buf.DecodeUint16()
	m.IsTimedOut = buf.DecodeBool()
	return nil
}

// NAT44 user's sessions
//   - ip_address - IPv4 address of the user to dump
//   - vrf_id - VRF_ID
//
// Nat44UserSessionV2Dump defines message 'nat44_user_session_v2_dump'.
type Nat44UserSessionV2Dump struct {
	IPAddress ip_types.IP4Address `binapi:"ip4_address,name=ip_address" json:"ip_address,omitempty"`
	VrfID     uint32              `binapi:"u32,name=vrf_id" json:"vrf_id,omitempty"`
}

func (m *Nat44UserSessionV2Dump) Reset()               { *m = Nat44UserSessionV2Dump{} }
func (*Nat44UserSessionV2Dump) GetMessageName() string { return "nat44_user_session_v2_dump" }
func (*Nat44UserSessionV2Dump) GetCrcString() string   { return "e1899c98" }
func (*Nat44UserSessionV2Dump) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *Nat44UserSessionV2Dump) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1 * 4 // m.IPAddress
	size += 4     // m.VrfID
	return size
}
func (m *Nat44UserSessionV2Dump) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeBytes(m.IPAddress[:], 4)
	buf.EncodeUint32(m.VrfID)
	return buf.Bytes(), nil
}
func (m *Nat44UserSessionV2Dump) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	copy(m.IPAddress[:], buf.DecodeBytes(4))
	m.VrfID = buf.DecodeUint32()
	return nil
}

// NAT44 user's sessions response
//   - outside_ip_address - outside IPv4 address
//   - outside_port - outside port
//   - inside_ip_address - inside IPv4 address
//   - inside_port - inside port
//   - protocol - protocol
//   - flags - flag NAT_IS_STATIC if session is static,
//     flag NAT_IS_TWICE_NAT if session is twice-nat,
//     flag NAT_IS_EXT_HOST_VALID if external host address
//     and port are valid
//   - last_heard - last heard timer since VPP start
//   - time_since_last_heard - difference between current vpp time and last_heard value
//   - total_bytes - count of bytes sent through session
//   - total_pkts - count of pakets sent through session
//   - ext_host_address - external host IPv4 address
//   - ext_host_port - external host port
//   - ext_host_nat_address - post-NAT external host IPv4 address (valid
//     only if twice-nat session)
//   - ext_host_nat_port - post-NAT external host port (valid only if
//     twice-nat session)
//   - is_timed_out - true, if session is timed out, and false, if session
//     is active
//
// Nat44UserSessionV3Details defines message 'nat44_user_session_v3_details'.
type Nat44UserSessionV3Details struct {
	OutsideIPAddress   ip_types.IP4Address      `binapi:"ip4_address,name=outside_ip_address" json:"outside_ip_address,omitempty"`
	OutsidePort        uint16                   `binapi:"u16,name=outside_port" json:"outside_port,omitempty"`
	InsideIPAddress    ip_types.IP4Address      `binapi:"ip4_address,name=inside_ip_address" json:"inside_ip_address,omitempty"`
	InsidePort         uint16                   `binapi:"u16,name=inside_port" json:"inside_port,omitempty"`
	Protocol           uint16                   `binapi:"u16,name=protocol" json:"protocol,omitempty"`
	Flags              nat_types.NatConfigFlags `binapi:"nat_config_flags,name=flags" json:"flags,omitempty"`
	LastHeard          uint64                   `binapi:"u64,name=last_heard" json:"last_heard,omitempty"`
	TimeSinceLastHeard uint64                   `binapi:"u64,name=time_since_last_heard" json:"time_since_last_heard,omitempty"`
	TotalBytes         uint64                   `binapi:"u64,name=total_bytes" json:"total_bytes,omitempty"`
	TotalPkts          uint32                   `binapi:"u32,name=total_pkts" json:"total_pkts,omitempty"`
	ExtHostAddress     ip_types.IP4Address      `binapi:"ip4_address,name=ext_host_address" json:"ext_host_address,omitempty"`
	ExtHostPort        uint16                   `binapi:"u16,name=ext_host_port" json:"ext_host_port,omitempty"`
	ExtHostNatAddress  ip_types.IP4Address      `binapi:"ip4_address,name=ext_host_nat_address" json:"ext_host_nat_address,omitempty"`
	ExtHostNatPort     uint16                   `binapi:"u16,name=ext_host_nat_port" json:"ext_host_nat_port,omitempty"`
	IsTimedOut         bool                     `binapi:"bool,name=is_timed_out" json:"is_timed_out,omitempty"`
}

func (m *Nat44UserSessionV3Details) Reset()               { *m = Nat44UserSessionV3Details{} }
func (*Nat44UserSessionV3Details) GetMessageName() string { return "nat44_user_session_v3_details" }
func (*Nat44UserSessionV3Details) GetCrcString() string   { return "edae926e" }
func (*Nat44UserSessionV3Details) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *Nat44UserSessionV3Details) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1 * 4 // m.OutsideIPAddress
	size += 2     // m.OutsidePort
	size += 1 * 4 // m.InsideIPAddress
	size += 2     // m.InsidePort
	size += 2     // m.Protocol
	size += 1     // m.Flags
	size += 8     // m.LastHeard
	size += 8     // m.TimeSinceLastHeard
	size += 8     // m.TotalBytes
	size += 4     // m.TotalPkts
	size += 1 * 4 // m.ExtHostAddress
	size += 2     // m.ExtHostPort
	size += 1 * 4 // m.ExtHostNatAddress
	size += 2     // m.ExtHostNatPort
	size += 1     // m.IsTimedOut
	return size
}
func (m *Nat44UserSessionV3Details) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeBytes(m.OutsideIPAddress[:], 4)
	buf.EncodeUint16(m.OutsidePort)
	buf.EncodeBytes(m.InsideIPAddress[:], 4)
	buf.EncodeUint16(m.InsidePort)
	buf.EncodeUint16(m.Protocol)
	buf.EncodeUint8(uint8(m.Flags))
	buf.EncodeUint64(m.LastHeard)
	buf.EncodeUint64(m.TimeSinceLastHeard)
	buf.EncodeUint64(m.TotalBytes)
	buf.EncodeUint32(m.TotalPkts)
	buf.EncodeBytes(m.ExtHostAddress[:], 4)
	buf.EncodeUint16(m.ExtHostPort)
	buf.EncodeBytes(m.ExtHostNatAddress[:], 4)
	buf.EncodeUint16(m.ExtHostNatPort)
	buf.EncodeBool(m.IsTimedOut)
	return buf.Bytes(), nil
}
func (m *Nat44UserSessionV3Details) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	copy(m.OutsideIPAddress[:], buf.DecodeBytes(4))
	m.OutsidePort = buf.DecodeUint16()
	copy(m.InsideIPAddress[:], buf.DecodeBytes(4))
	m.InsidePort = buf.DecodeUint16()
	m.Protocol = buf.DecodeUint16()
	m.Flags = nat_types.NatConfigFlags(buf.DecodeUint8())
	m.LastHeard = buf.DecodeUint64()
	m.TimeSinceLastHeard = buf.DecodeUint64()
	m.TotalBytes = buf.DecodeUint64()
	m.TotalPkts = buf.DecodeUint32()
	copy(m.ExtHostAddress[:], buf.DecodeBytes(4))
	m.ExtHostPort = buf.DecodeUint16()
	copy(m.ExtHostNatAddress[:], buf.DecodeBytes(4))
	m.ExtHostNatPort = buf.DecodeUint16()
	m.IsTimedOut = buf.DecodeBool()
	return nil
}

// NAT44 user's sessions
//   - ip_address - IPv4 address of the user to dump
//   - vrf_id - VRF_ID
//
// Nat44UserSessionV3Dump defines message 'nat44_user_session_v3_dump'.
type Nat44UserSessionV3Dump struct {
	IPAddress ip_types.IP4Address `binapi:"ip4_address,name=ip_address" json:"ip_address,omitempty"`
	VrfID     uint32              `binapi:"u32,name=vrf_id" json:"vrf_id,omitempty"`
}

func (m *Nat44UserSessionV3Dump) Reset()               { *m = Nat44UserSessionV3Dump{} }
func (*Nat44UserSessionV3Dump) GetMessageName() string { return "nat44_user_session_v3_dump" }
func (*Nat44UserSessionV3Dump) GetCrcString() string   { return "e1899c98" }
func (*Nat44UserSessionV3Dump) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *Nat44UserSessionV3Dump) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1 * 4 // m.IPAddress
	size += 4     // m.VrfID
	return size
}
func (m *Nat44UserSessionV3Dump) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeBytes(m.IPAddress[:], 4)
	buf.EncodeUint32(m.VrfID)
	return buf.Bytes(), nil
}
func (m *Nat44UserSessionV3Dump) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	copy(m.IPAddress[:], buf.DecodeBytes(4))
	m.VrfID = buf.DecodeUint32()
	return nil
}

// Get TCP MSS rewriting configuration
// NatGetMssClamping defines message 'nat_get_mss_clamping'.
type NatGetMssClamping struct{}

func (m *NatGetMssClamping) Reset()               { *m = NatGetMssClamping{} }
func (*NatGetMssClamping) GetMessageName() string { return "nat_get_mss_clamping" }
func (*NatGetMssClamping) GetCrcString() string   { return "51077d14" }
func (*NatGetMssClamping) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *NatGetMssClamping) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *NatGetMssClamping) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *NatGetMssClamping) Unmarshal(b []byte) error {
	return nil
}

// Get TCP MSS rewriting configuration reply
//   - retval - return code
//   - mss_value - MSS value to be used for MSS rewriting
//   - enable - if true enable MSS rewriting feature else disable
//
// NatGetMssClampingReply defines message 'nat_get_mss_clamping_reply'.
type NatGetMssClampingReply struct {
	Retval   int32  `binapi:"i32,name=retval" json:"retval,omitempty"`
	MssValue uint16 `binapi:"u16,name=mss_value" json:"mss_value,omitempty"`
	Enable   bool   `binapi:"bool,name=enable" json:"enable,omitempty"`
}

func (m *NatGetMssClampingReply) Reset()               { *m = NatGetMssClampingReply{} }
func (*NatGetMssClampingReply) GetMessageName() string { return "nat_get_mss_clamping_reply" }
func (*NatGetMssClampingReply) GetCrcString() string   { return "1c0b2a78" }
func (*NatGetMssClampingReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *NatGetMssClampingReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	size += 2 // m.MssValue
	size += 1 // m.Enable
	return size
}
func (m *NatGetMssClampingReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	buf.EncodeUint16(m.MssValue)
	buf.EncodeBool(m.Enable)
	return buf.Bytes(), nil
}
func (m *NatGetMssClampingReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	m.MssValue = buf.DecodeUint16()
	m.Enable = buf.DecodeBool()
	return nil
}

// Enable/disable NAT IPFIX logging
//   - domain_id - observation domain ID
//   - src_port - source port number
//   - enable - true if enable, false if disable
//
// NatIpfixEnableDisable defines message 'nat_ipfix_enable_disable'.
// Deprecated: the message will be removed in the future versions
type NatIpfixEnableDisable struct {
	DomainID uint32 `binapi:"u32,name=domain_id" json:"domain_id,omitempty"`
	SrcPort  uint16 `binapi:"u16,name=src_port" json:"src_port,omitempty"`
	Enable   bool   `binapi:"bool,name=enable" json:"enable,omitempty"`
}

func (m *NatIpfixEnableDisable) Reset()               { *m = NatIpfixEnableDisable{} }
func (*NatIpfixEnableDisable) GetMessageName() string { return "nat_ipfix_enable_disable" }
func (*NatIpfixEnableDisable) GetCrcString() string   { return "9af4a2d2" }
func (*NatIpfixEnableDisable) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *NatIpfixEnableDisable) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.DomainID
	size += 2 // m.SrcPort
	size += 1 // m.Enable
	return size
}
func (m *NatIpfixEnableDisable) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.DomainID)
	buf.EncodeUint16(m.SrcPort)
	buf.EncodeBool(m.Enable)
	return buf.Bytes(), nil
}
func (m *NatIpfixEnableDisable) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.DomainID = buf.DecodeUint32()
	m.SrcPort = buf.DecodeUint16()
	m.Enable = buf.DecodeBool()
	return nil
}

// NatIpfixEnableDisableReply defines message 'nat_ipfix_enable_disable_reply'.
// Deprecated: the message will be removed in the future versions
type NatIpfixEnableDisableReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *NatIpfixEnableDisableReply) Reset()               { *m = NatIpfixEnableDisableReply{} }
func (*NatIpfixEnableDisableReply) GetMessageName() string { return "nat_ipfix_enable_disable_reply" }
func (*NatIpfixEnableDisableReply) GetCrcString() string   { return "e8d4e804" }
func (*NatIpfixEnableDisableReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *NatIpfixEnableDisableReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *NatIpfixEnableDisableReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *NatIpfixEnableDisableReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// Set TCP MSS rewriting configuration
//   - mss_value - MSS value to be used for MSS rewriting
//   - enable - if true enable MSS rewriting feature else disable
//
// NatSetMssClamping defines message 'nat_set_mss_clamping'.
type NatSetMssClamping struct {
	MssValue uint16 `binapi:"u16,name=mss_value" json:"mss_value,omitempty"`
	Enable   bool   `binapi:"bool,name=enable" json:"enable,omitempty"`
}

func (m *NatSetMssClamping) Reset()               { *m = NatSetMssClamping{} }
func (*NatSetMssClamping) GetMessageName() string { return "nat_set_mss_clamping" }
func (*NatSetMssClamping) GetCrcString() string   { return "25e90abb" }
func (*NatSetMssClamping) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *NatSetMssClamping) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 2 // m.MssValue
	size += 1 // m.Enable
	return size
}
func (m *NatSetMssClamping) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint16(m.MssValue)
	buf.EncodeBool(m.Enable)
	return buf.Bytes(), nil
}
func (m *NatSetMssClamping) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.MssValue = buf.DecodeUint16()
	m.Enable = buf.DecodeBool()
	return nil
}

// NatSetMssClampingReply defines message 'nat_set_mss_clamping_reply'.
type NatSetMssClampingReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *NatSetMssClampingReply) Reset()               { *m = NatSetMssClampingReply{} }
func (*NatSetMssClampingReply) GetMessageName() string { return "nat_set_mss_clamping_reply" }
func (*NatSetMssClampingReply) GetCrcString() string   { return "e8d4e804" }
func (*NatSetMssClampingReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *NatSetMssClampingReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *NatSetMssClampingReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *NatSetMssClampingReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// Set values of timeouts for NAT sessions (seconds)
//   - udp - UDP timeout (default 300sec)
//   - tcp_established - TCP established timeout (default 7440sec)
//   - tcp_transitory - TCP transitory timeout (default 240sec)
//   - icmp - ICMP timeout (default 60sec)
//
// NatSetTimeouts defines message 'nat_set_timeouts'.
// Deprecated: the message will be removed in the future versions
type NatSetTimeouts struct {
	UDP            uint32 `binapi:"u32,name=udp" json:"udp,omitempty"`
	TCPEstablished uint32 `binapi:"u32,name=tcp_established" json:"tcp_established,omitempty"`
	TCPTransitory  uint32 `binapi:"u32,name=tcp_transitory" json:"tcp_transitory,omitempty"`
	ICMP           uint32 `binapi:"u32,name=icmp" json:"icmp,omitempty"`
}

func (m *NatSetTimeouts) Reset()               { *m = NatSetTimeouts{} }
func (*NatSetTimeouts) GetMessageName() string { return "nat_set_timeouts" }
func (*NatSetTimeouts) GetCrcString() string   { return "d4746b16" }
func (*NatSetTimeouts) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *NatSetTimeouts) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.UDP
	size += 4 // m.TCPEstablished
	size += 4 // m.TCPTransitory
	size += 4 // m.ICMP
	return size
}
func (m *NatSetTimeouts) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.UDP)
	buf.EncodeUint32(m.TCPEstablished)
	buf.EncodeUint32(m.TCPTransitory)
	buf.EncodeUint32(m.ICMP)
	return buf.Bytes(), nil
}
func (m *NatSetTimeouts) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.UDP = buf.DecodeUint32()
	m.TCPEstablished = buf.DecodeUint32()
	m.TCPTransitory = buf.DecodeUint32()
	m.ICMP = buf.DecodeUint32()
	return nil
}

// NatSetTimeoutsReply defines message 'nat_set_timeouts_reply'.
// Deprecated: the message will be removed in the future versions
type NatSetTimeoutsReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *NatSetTimeoutsReply) Reset()               { *m = NatSetTimeoutsReply{} }
func (*NatSetTimeoutsReply) GetMessageName() string { return "nat_set_timeouts_reply" }
func (*NatSetTimeoutsReply) GetCrcString() string   { return "e8d4e804" }
func (*NatSetTimeoutsReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *NatSetTimeoutsReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *NatSetTimeoutsReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *NatSetTimeoutsReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// Set NAT workers
//   - worker_mask - NAT workers mask
//
// NatSetWorkers defines message 'nat_set_workers'.
type NatSetWorkers struct {
	WorkerMask uint64 `binapi:"u64,name=worker_mask" json:"worker_mask,omitempty"`
}

func (m *NatSetWorkers) Reset()               { *m = NatSetWorkers{} }
func (*NatSetWorkers) GetMessageName() string { return "nat_set_workers" }
func (*NatSetWorkers) GetCrcString() string   { return "da926638" }
func (*NatSetWorkers) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *NatSetWorkers) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 8 // m.WorkerMask
	return size
}
func (m *NatSetWorkers) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint64(m.WorkerMask)
	return buf.Bytes(), nil
}
func (m *NatSetWorkers) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.WorkerMask = buf.DecodeUint64()
	return nil
}

// NatSetWorkersReply defines message 'nat_set_workers_reply'.
type NatSetWorkersReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *NatSetWorkersReply) Reset()               { *m = NatSetWorkersReply{} }
func (*NatSetWorkersReply) GetMessageName() string { return "nat_set_workers_reply" }
func (*NatSetWorkersReply) GetCrcString() string   { return "e8d4e804" }
func (*NatSetWorkersReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *NatSetWorkersReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *NatSetWorkersReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *NatSetWorkersReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// NAT workers details response
//   - worker_index - worker index
//   - lcore_id - lcore ID
//   - name - worker name
//
// NatWorkerDetails defines message 'nat_worker_details'.
type NatWorkerDetails struct {
	WorkerIndex uint32 `binapi:"u32,name=worker_index" json:"worker_index,omitempty"`
	LcoreID     uint32 `binapi:"u32,name=lcore_id" json:"lcore_id,omitempty"`
	Name        string `binapi:"string[64],name=name" json:"name,omitempty"`
}

func (m *NatWorkerDetails) Reset()               { *m = NatWorkerDetails{} }
func (*NatWorkerDetails) GetMessageName() string { return "nat_worker_details" }
func (*NatWorkerDetails) GetCrcString() string   { return "84bf06fc" }
func (*NatWorkerDetails) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *NatWorkerDetails) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4  // m.WorkerIndex
	size += 4  // m.LcoreID
	size += 64 // m.Name
	return size
}
func (m *NatWorkerDetails) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.WorkerIndex)
	buf.EncodeUint32(m.LcoreID)
	buf.EncodeString(m.Name, 64)
	return buf.Bytes(), nil
}
func (m *NatWorkerDetails) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.WorkerIndex = buf.DecodeUint32()
	m.LcoreID = buf.DecodeUint32()
	m.Name = buf.DecodeString(64)
	return nil
}

// Dump NAT workers
// NatWorkerDump defines message 'nat_worker_dump'.
type NatWorkerDump struct{}

func (m *NatWorkerDump) Reset()               { *m = NatWorkerDump{} }
func (*NatWorkerDump) GetMessageName() string { return "nat_worker_dump" }
func (*NatWorkerDump) GetCrcString() string   { return "51077d14" }
func (*NatWorkerDump) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *NatWorkerDump) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *NatWorkerDump) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *NatWorkerDump) Unmarshal(b []byte) error {
	return nil
}

func init() { file_nat44_ed_binapi_init() }
func file_nat44_ed_binapi_init() {
	api.RegisterMessage((*Nat44AddDelAddressRange)(nil), "nat44_add_del_address_range_6f2b8055")
	api.RegisterMessage((*Nat44AddDelAddressRangeReply)(nil), "nat44_add_del_address_range_reply_e8d4e804")
	api.RegisterMessage((*Nat44AddDelIdentityMapping)(nil), "nat44_add_del_identity_mapping_02faaa22")
	api.RegisterMessage((*Nat44AddDelIdentityMappingReply)(nil), "nat44_add_del_identity_mapping_reply_e8d4e804")
	api.RegisterMessage((*Nat44AddDelInterfaceAddr)(nil), "nat44_add_del_interface_addr_4aed50c0")
	api.RegisterMessage((*Nat44AddDelInterfaceAddrReply)(nil), "nat44_add_del_interface_addr_reply_e8d4e804")
	api.RegisterMessage((*Nat44AddDelLbStaticMapping)(nil), "nat44_add_del_lb_static_mapping_4f68ee9d")
	api.RegisterMessage((*Nat44AddDelLbStaticMappingReply)(nil), "nat44_add_del_lb_static_mapping_reply_e8d4e804")
	api.RegisterMessage((*Nat44AddDelStaticMapping)(nil), "nat44_add_del_static_mapping_5ae5f03e")
	api.RegisterMessage((*Nat44AddDelStaticMappingReply)(nil), "nat44_add_del_static_mapping_reply_e8d4e804")
	api.RegisterMessage((*Nat44AddDelStaticMappingV2)(nil), "nat44_add_del_static_mapping_v2_5e205f1a")
	api.RegisterMessage((*Nat44AddDelStaticMappingV2Reply)(nil), "nat44_add_del_static_mapping_v2_reply_e8d4e804")
	api.RegisterMessage((*Nat44AddressDetails)(nil), "nat44_address_details_0d1beac1")
	api.RegisterMessage((*Nat44AddressDump)(nil), "nat44_address_dump_51077d14")
	api.RegisterMessage((*Nat44DelSession)(nil), "nat44_del_session_15a5bf8c")
	api.RegisterMessage((*Nat44DelSessionReply)(nil), "nat44_del_session_reply_e8d4e804")
	api.RegisterMessage((*Nat44EdAddDelOutputInterface)(nil), "nat44_ed_add_del_output_interface_47d6e753")
	api.RegisterMessage((*Nat44EdAddDelOutputInterfaceReply)(nil), "nat44_ed_add_del_output_interface_reply_e8d4e804")
	api.RegisterMessage((*Nat44EdAddDelVrfRoute)(nil), "nat44_ed_add_del_vrf_route_59187407")
	api.RegisterMessage((*Nat44EdAddDelVrfRouteReply)(nil), "nat44_ed_add_del_vrf_route_reply_e8d4e804")
	api.RegisterMessage((*Nat44EdAddDelVrfTable)(nil), "nat44_ed_add_del_vrf_table_08330904")
	api.RegisterMessage((*Nat44EdAddDelVrfTableReply)(nil), "nat44_ed_add_del_vrf_table_reply_e8d4e804")
	api.RegisterMessage((*Nat44EdOutputInterfaceDetails)(nil), "nat44_ed_output_interface_details_0b45011c")
	api.RegisterMessage((*Nat44EdOutputInterfaceGet)(nil), "nat44_ed_output_interface_get_f75ba505")
	api.RegisterMessage((*Nat44EdOutputInterfaceGetReply)(nil), "nat44_ed_output_interface_get_reply_53b48f5d")
	api.RegisterMessage((*Nat44EdPluginEnableDisable)(nil), "nat44_ed_plugin_enable_disable_be17f8dd")
	api.RegisterMessage((*Nat44EdPluginEnableDisableReply)(nil), "nat44_ed_plugin_enable_disable_reply_e8d4e804")
	api.RegisterMessage((*Nat44EdSetFqOptions)(nil), "nat44_ed_set_fq_options_2399bd71")
	api.RegisterMessage((*Nat44EdSetFqOptionsReply)(nil), "nat44_ed_set_fq_options_reply_e8d4e804")
	api.RegisterMessage((*Nat44EdShowFqOptions)(nil), "nat44_ed_show_fq_options_51077d14")
	api.RegisterMessage((*Nat44EdShowFqOptionsReply)(nil), "nat44_ed_show_fq_options_reply_7213b545")
	api.RegisterMessage((*Nat44EdVrfTablesDetails)(nil), "nat44_ed_vrf_tables_details_7b264e4f")
	api.RegisterMessage((*Nat44EdVrfTablesDump)(nil), "nat44_ed_vrf_tables_dump_51077d14")
	api.RegisterMessage((*Nat44EdVrfTablesV2Details)(nil), "nat44_ed_vrf_tables_v2_details_7b264e4f")
	api.RegisterMessage((*Nat44EdVrfTablesV2Dump)(nil), "nat44_ed_vrf_tables_v2_dump_51077d14")
	api.RegisterMessage((*Nat44ForwardingEnableDisable)(nil), "nat44_forwarding_enable_disable_b3e225d2")
	api.RegisterMessage((*Nat44ForwardingEnableDisableReply)(nil), "nat44_forwarding_enable_disable_reply_e8d4e804")
	api.RegisterMessage((*Nat44IdentityMappingDetails)(nil), "nat44_identity_mapping_details_2a52a030")
	api.RegisterMessage((*Nat44IdentityMappingDump)(nil), "nat44_identity_mapping_dump_51077d14")
	api.RegisterMessage((*Nat44InterfaceAddDelFeature)(nil), "nat44_interface_add_del_feature_f3699b83")
	api.RegisterMessage((*Nat44InterfaceAddDelFeatureReply)(nil), "nat44_interface_add_del_feature_reply_e8d4e804")
	api.RegisterMessage((*Nat44InterfaceAddrDetails)(nil), "nat44_interface_addr_details_e4aca9ca")
	api.RegisterMessage((*Nat44InterfaceAddrDump)(nil), "nat44_interface_addr_dump_51077d14")
	api.RegisterMessage((*Nat44InterfaceDetails)(nil), "nat44_interface_details_5d286289")
	api.RegisterMessage((*Nat44InterfaceDump)(nil), "nat44_interface_dump_51077d14")
	api.RegisterMessage((*Nat44LbStaticMappingAddDelLocal)(nil), "nat44_lb_static_mapping_add_del_local_7ca47547")
	api.RegisterMessage((*Nat44LbStaticMappingAddDelLocalReply)(nil), "nat44_lb_static_mapping_add_del_local_reply_e8d4e804")
	api.RegisterMessage((*Nat44LbStaticMappingDetails)(nil), "nat44_lb_static_mapping_details_ed5ce876")
	api.RegisterMessage((*Nat44LbStaticMappingDump)(nil), "nat44_lb_static_mapping_dump_51077d14")
	api.RegisterMessage((*Nat44SetSessionLimit)(nil), "nat44_set_session_limit_8899bbb1")
	api.RegisterMessage((*Nat44SetSessionLimitReply)(nil), "nat44_set_session_limit_reply_e8d4e804")
	api.RegisterMessage((*Nat44ShowRunningConfig)(nil), "nat44_show_running_config_51077d14")
	api.RegisterMessage((*Nat44ShowRunningConfigReply)(nil), "nat44_show_running_config_reply_93d8e267")
	api.RegisterMessage((*Nat44StaticMappingDetails)(nil), "nat44_static_mapping_details_06cb40b2")
	api.RegisterMessage((*Nat44StaticMappingDump)(nil), "nat44_static_mapping_dump_51077d14")
	api.RegisterMessage((*Nat44UserDetails)(nil), "nat44_user_details_355896c2")
	api.RegisterMessage((*Nat44UserDump)(nil), "nat44_user_dump_51077d14")
	api.RegisterMessage((*Nat44UserSessionDetails)(nil), "nat44_user_session_details_2cf6e16d")
	api.RegisterMessage((*Nat44UserSessionDump)(nil), "nat44_user_session_dump_e1899c98")
	api.RegisterMessage((*Nat44UserSessionV2Details)(nil), "nat44_user_session_v2_details_fd42b729")
	api.RegisterMessage((*Nat44UserSessionV2Dump)(nil), "nat44_user_session_v2_dump_e1899c98")
	api.RegisterMessage((*Nat44UserSessionV3Details)(nil), "nat44_user_session_v3_details_edae926e")
	api.RegisterMessage((*Nat44UserSessionV3Dump)(nil), "nat44_user_session_v3_dump_e1899c98")
	api.RegisterMessage((*NatGetMssClamping)(nil), "nat_get_mss_clamping_51077d14")
	api.RegisterMessage((*NatGetMssClampingReply)(nil), "nat_get_mss_clamping_reply_1c0b2a78")
	api.RegisterMessage((*NatIpfixEnableDisable)(nil), "nat_ipfix_enable_disable_9af4a2d2")
	api.RegisterMessage((*NatIpfixEnableDisableReply)(nil), "nat_ipfix_enable_disable_reply_e8d4e804")
	api.RegisterMessage((*NatSetMssClamping)(nil), "nat_set_mss_clamping_25e90abb")
	api.RegisterMessage((*NatSetMssClampingReply)(nil), "nat_set_mss_clamping_reply_e8d4e804")
	api.RegisterMessage((*NatSetTimeouts)(nil), "nat_set_timeouts_d4746b16")
	api.RegisterMessage((*NatSetTimeoutsReply)(nil), "nat_set_timeouts_reply_e8d4e804")
	api.RegisterMessage((*NatSetWorkers)(nil), "nat_set_workers_da926638")
	api.RegisterMessage((*NatSetWorkersReply)(nil), "nat_set_workers_reply_e8d4e804")
	api.RegisterMessage((*NatWorkerDetails)(nil), "nat_worker_details_84bf06fc")
	api.RegisterMessage((*NatWorkerDump)(nil), "nat_worker_dump_51077d14")
}

// Messages returns list of all messages in this module.
func AllMessages() []api.Message {
	return []api.Message{
		(*Nat44AddDelAddressRange)(nil),
		(*Nat44AddDelAddressRangeReply)(nil),
		(*Nat44AddDelIdentityMapping)(nil),
		(*Nat44AddDelIdentityMappingReply)(nil),
		(*Nat44AddDelInterfaceAddr)(nil),
		(*Nat44AddDelInterfaceAddrReply)(nil),
		(*Nat44AddDelLbStaticMapping)(nil),
		(*Nat44AddDelLbStaticMappingReply)(nil),
		(*Nat44AddDelStaticMapping)(nil),
		(*Nat44AddDelStaticMappingReply)(nil),
		(*Nat44AddDelStaticMappingV2)(nil),
		(*Nat44AddDelStaticMappingV2Reply)(nil),
		(*Nat44AddressDetails)(nil),
		(*Nat44AddressDump)(nil),
		(*Nat44DelSession)(nil),
		(*Nat44DelSessionReply)(nil),
		(*Nat44EdAddDelOutputInterface)(nil),
		(*Nat44EdAddDelOutputInterfaceReply)(nil),
		(*Nat44EdAddDelVrfRoute)(nil),
		(*Nat44EdAddDelVrfRouteReply)(nil),
		(*Nat44EdAddDelVrfTable)(nil),
		(*Nat44EdAddDelVrfTableReply)(nil),
		(*Nat44EdOutputInterfaceDetails)(nil),
		(*Nat44EdOutputInterfaceGet)(nil),
		(*Nat44EdOutputInterfaceGetReply)(nil),
		(*Nat44EdPluginEnableDisable)(nil),
		(*Nat44EdPluginEnableDisableReply)(nil),
		(*Nat44EdSetFqOptions)(nil),
		(*Nat44EdSetFqOptionsReply)(nil),
		(*Nat44EdShowFqOptions)(nil),
		(*Nat44EdShowFqOptionsReply)(nil),
		(*Nat44EdVrfTablesDetails)(nil),
		(*Nat44EdVrfTablesDump)(nil),
		(*Nat44EdVrfTablesV2Details)(nil),
		(*Nat44EdVrfTablesV2Dump)(nil),
		(*Nat44ForwardingEnableDisable)(nil),
		(*Nat44ForwardingEnableDisableReply)(nil),
		(*Nat44IdentityMappingDetails)(nil),
		(*Nat44IdentityMappingDump)(nil),
		(*Nat44InterfaceAddDelFeature)(nil),
		(*Nat44InterfaceAddDelFeatureReply)(nil),
		(*Nat44InterfaceAddrDetails)(nil),
		(*Nat44InterfaceAddrDump)(nil),
		(*Nat44InterfaceDetails)(nil),
		(*Nat44InterfaceDump)(nil),
		(*Nat44LbStaticMappingAddDelLocal)(nil),
		(*Nat44LbStaticMappingAddDelLocalReply)(nil),
		(*Nat44LbStaticMappingDetails)(nil),
		(*Nat44LbStaticMappingDump)(nil),
		(*Nat44SetSessionLimit)(nil),
		(*Nat44SetSessionLimitReply)(nil),
		(*Nat44ShowRunningConfig)(nil),
		(*Nat44ShowRunningConfigReply)(nil),
		(*Nat44StaticMappingDetails)(nil),
		(*Nat44StaticMappingDump)(nil),
		(*Nat44UserDetails)(nil),
		(*Nat44UserDump)(nil),
		(*Nat44UserSessionDetails)(nil),
		(*Nat44UserSessionDump)(nil),
		(*Nat44UserSessionV2Details)(nil),
		(*Nat44UserSessionV2Dump)(nil),
		(*Nat44UserSessionV3Details)(nil),
		(*Nat44UserSessionV3Dump)(nil),
		(*NatGetMssClamping)(nil),
		(*NatGetMssClampingReply)(nil),
		(*NatIpfixEnableDisable)(nil),
		(*NatIpfixEnableDisableReply)(nil),
		(*NatSetMssClamping)(nil),
		(*NatSetMssClampingReply)(nil),
		(*NatSetTimeouts)(nil),
		(*NatSetTimeoutsReply)(nil),
		(*NatSetWorkers)(nil),
		(*NatSetWorkersReply)(nil),
		(*NatWorkerDetails)(nil),
		(*NatWorkerDump)(nil),
	}
}

// Code generated by GoVPP's binapi-generator. DO NOT EDIT.

package gre

import (
	"context"

	api "go.fd.io/govpp/api"
)

// RPCService defines RPC service gre.
type RPCService interface {
	GreTunnelAddDel(ctx context.Context, in *GreTunnelAddDel) (*GreTunnelAddDelReply, error)
	GreTunnelAddDelV2(ctx context.Context, in *GreTunnelAddDelV2) (*GreTunnelAddDelV2Reply, error)
	GreTunnelDump(ctx context.Context, in *GreTunnelDump) (*GreTunnelDumpReply, error)
	GreTunnelDumpV2(ctx context.Context, in *GreTunnelDumpV2) (*GreTunnelDumpV2Reply, error)
}

type serviceClient struct {
	conn api.Connection
}

func NewServiceClient(conn api.Connection) RPCService {
	return &serviceClient{conn}
}

func (c *serviceClient) GreTunnelAddDel(ctx context.Context, in *GreTunnelAddDel) (*GreTunnelAddDelReply, error) {
	out := new(GreTunnelAddDelReply)
	err := c.conn.Invoke(ctx, in, out)
	if err != nil {
		return nil, err
	}
	return out, api.RetvalToVPPApiError(out.Retval)
}

func (c *serviceClient) GreTunnelAddDelV2(ctx context.Context, in *GreTunnelAddDelV2) (*GreTunnelAddDelV2Reply, error) {
	out := new(GreTunnelAddDelV2Reply)
	err := c.conn.Invoke(ctx, in, out)
	if err != nil {
		return nil, err
	}
	return out, api.RetvalToVPPApiError(out.Retval)
}

func (c *serviceClient) GreTunnelDump(ctx context.Context, in *GreTunnelDump) (*GreTunnelDumpReply, error) {
	out := new(GreTunnelDumpReply)
	err := c.conn.Invoke(ctx, in, out)
	if err != nil {
		return nil, err
	}
	return out, api.RetvalToVPPApiError(out.Retval)
}

func (c *serviceClient) GreTunnelDumpV2(ctx context.Context, in *GreTunnelDumpV2) (*GreTunnelDumpV2Reply, error) {
	out := new(GreTunnelDumpV2Reply)
	err := c.conn.Invoke(ctx, in, out)
	if err != nil {
		return nil, err
	}
	return out, api.RetvalToVPPApiError(out.Retval)
}

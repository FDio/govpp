// Code generated by GoVPP's binapi-generator. DO NOT EDIT.

package det44

import (
	"context"
	"fmt"
	"io"

	api "git.fd.io/govpp.git/api"
	vpe "git.fd.io/govpp.git/binapi/vpe"
)

// RPCService defines RPC service det44.
type RPCService interface {
	Det44AddDelMap(ctx context.Context, in *Det44AddDelMap) (*Det44AddDelMapReply, error)
	Det44CloseSessionIn(ctx context.Context, in *Det44CloseSessionIn) (*Det44CloseSessionInReply, error)
	Det44CloseSessionOut(ctx context.Context, in *Det44CloseSessionOut) (*Det44CloseSessionOutReply, error)
	Det44Forward(ctx context.Context, in *Det44Forward) (*Det44ForwardReply, error)
	Det44GetTimeouts(ctx context.Context, in *Det44GetTimeouts) (*Det44GetTimeoutsReply, error)
	Det44InterfaceAddDelFeature(ctx context.Context, in *Det44InterfaceAddDelFeature) (*Det44InterfaceAddDelFeatureReply, error)
	Det44InterfaceDump(ctx context.Context, in *Det44InterfaceDump) (RPCService_Det44InterfaceDumpClient, error)
	Det44MapDump(ctx context.Context, in *Det44MapDump) (RPCService_Det44MapDumpClient, error)
	Det44PluginEnableDisable(ctx context.Context, in *Det44PluginEnableDisable) (*Det44PluginEnableDisableReply, error)
	Det44Reverse(ctx context.Context, in *Det44Reverse) (*Det44ReverseReply, error)
	Det44SessionDump(ctx context.Context, in *Det44SessionDump) (RPCService_Det44SessionDumpClient, error)
	Det44SetTimeouts(ctx context.Context, in *Det44SetTimeouts) (*Det44SetTimeoutsReply, error)
	NatDetAddDelMap(ctx context.Context, in *NatDetAddDelMap) (*NatDetAddDelMapReply, error)
	NatDetCloseSessionIn(ctx context.Context, in *NatDetCloseSessionIn) (*NatDetCloseSessionInReply, error)
	NatDetCloseSessionOut(ctx context.Context, in *NatDetCloseSessionOut) (*NatDetCloseSessionOutReply, error)
	NatDetForward(ctx context.Context, in *NatDetForward) (*NatDetForwardReply, error)
	NatDetMapDump(ctx context.Context, in *NatDetMapDump) (RPCService_NatDetMapDumpClient, error)
	NatDetReverse(ctx context.Context, in *NatDetReverse) (*NatDetReverseReply, error)
	NatDetSessionDump(ctx context.Context, in *NatDetSessionDump) (RPCService_NatDetSessionDumpClient, error)
}

type serviceClient struct {
	conn api.Connection
}

func NewServiceClient(conn api.Connection) RPCService {
	return &serviceClient{conn}
}

func (c *serviceClient) Det44AddDelMap(ctx context.Context, in *Det44AddDelMap) (*Det44AddDelMapReply, error) {
	out := new(Det44AddDelMapReply)
	err := c.conn.Invoke(ctx, in, out)
	if err != nil {
		return nil, err
	}
	return out, api.RetvalToVPPApiError(out.Retval)
}

func (c *serviceClient) Det44CloseSessionIn(ctx context.Context, in *Det44CloseSessionIn) (*Det44CloseSessionInReply, error) {
	out := new(Det44CloseSessionInReply)
	err := c.conn.Invoke(ctx, in, out)
	if err != nil {
		return nil, err
	}
	return out, api.RetvalToVPPApiError(out.Retval)
}

func (c *serviceClient) Det44CloseSessionOut(ctx context.Context, in *Det44CloseSessionOut) (*Det44CloseSessionOutReply, error) {
	out := new(Det44CloseSessionOutReply)
	err := c.conn.Invoke(ctx, in, out)
	if err != nil {
		return nil, err
	}
	return out, api.RetvalToVPPApiError(out.Retval)
}

func (c *serviceClient) Det44Forward(ctx context.Context, in *Det44Forward) (*Det44ForwardReply, error) {
	out := new(Det44ForwardReply)
	err := c.conn.Invoke(ctx, in, out)
	if err != nil {
		return nil, err
	}
	return out, api.RetvalToVPPApiError(out.Retval)
}

func (c *serviceClient) Det44GetTimeouts(ctx context.Context, in *Det44GetTimeouts) (*Det44GetTimeoutsReply, error) {
	out := new(Det44GetTimeoutsReply)
	err := c.conn.Invoke(ctx, in, out)
	if err != nil {
		return nil, err
	}
	return out, api.RetvalToVPPApiError(out.Retval)
}

func (c *serviceClient) Det44InterfaceAddDelFeature(ctx context.Context, in *Det44InterfaceAddDelFeature) (*Det44InterfaceAddDelFeatureReply, error) {
	out := new(Det44InterfaceAddDelFeatureReply)
	err := c.conn.Invoke(ctx, in, out)
	if err != nil {
		return nil, err
	}
	return out, api.RetvalToVPPApiError(out.Retval)
}

func (c *serviceClient) Det44InterfaceDump(ctx context.Context, in *Det44InterfaceDump) (RPCService_Det44InterfaceDumpClient, error) {
	stream, err := c.conn.NewStream(ctx)
	if err != nil {
		return nil, err
	}
	x := &serviceClient_Det44InterfaceDumpClient{stream}
	if err := x.Stream.SendMsg(in); err != nil {
		return nil, err
	}
	if err = x.Stream.SendMsg(&vpe.ControlPing{}); err != nil {
		return nil, err
	}
	return x, nil
}

type RPCService_Det44InterfaceDumpClient interface {
	Recv() (*Det44InterfaceDetails, error)
	api.Stream
}

type serviceClient_Det44InterfaceDumpClient struct {
	api.Stream
}

func (c *serviceClient_Det44InterfaceDumpClient) Recv() (*Det44InterfaceDetails, error) {
	msg, err := c.Stream.RecvMsg()
	if err != nil {
		return nil, err
	}
	switch m := msg.(type) {
	case *Det44InterfaceDetails:
		return m, nil
	case *vpe.ControlPingReply:
		err = c.Stream.Close()
		if err != nil {
			return nil, err
		}
		return nil, io.EOF
	default:
		return nil, fmt.Errorf("unexpected message: %T %v", m, m)
	}
}

func (c *serviceClient) Det44MapDump(ctx context.Context, in *Det44MapDump) (RPCService_Det44MapDumpClient, error) {
	stream, err := c.conn.NewStream(ctx)
	if err != nil {
		return nil, err
	}
	x := &serviceClient_Det44MapDumpClient{stream}
	if err := x.Stream.SendMsg(in); err != nil {
		return nil, err
	}
	if err = x.Stream.SendMsg(&vpe.ControlPing{}); err != nil {
		return nil, err
	}
	return x, nil
}

type RPCService_Det44MapDumpClient interface {
	Recv() (*Det44MapDetails, error)
	api.Stream
}

type serviceClient_Det44MapDumpClient struct {
	api.Stream
}

func (c *serviceClient_Det44MapDumpClient) Recv() (*Det44MapDetails, error) {
	msg, err := c.Stream.RecvMsg()
	if err != nil {
		return nil, err
	}
	switch m := msg.(type) {
	case *Det44MapDetails:
		return m, nil
	case *vpe.ControlPingReply:
		err = c.Stream.Close()
		if err != nil {
			return nil, err
		}
		return nil, io.EOF
	default:
		return nil, fmt.Errorf("unexpected message: %T %v", m, m)
	}
}

func (c *serviceClient) Det44PluginEnableDisable(ctx context.Context, in *Det44PluginEnableDisable) (*Det44PluginEnableDisableReply, error) {
	out := new(Det44PluginEnableDisableReply)
	err := c.conn.Invoke(ctx, in, out)
	if err != nil {
		return nil, err
	}
	return out, api.RetvalToVPPApiError(out.Retval)
}

func (c *serviceClient) Det44Reverse(ctx context.Context, in *Det44Reverse) (*Det44ReverseReply, error) {
	out := new(Det44ReverseReply)
	err := c.conn.Invoke(ctx, in, out)
	if err != nil {
		return nil, err
	}
	return out, api.RetvalToVPPApiError(out.Retval)
}

func (c *serviceClient) Det44SessionDump(ctx context.Context, in *Det44SessionDump) (RPCService_Det44SessionDumpClient, error) {
	stream, err := c.conn.NewStream(ctx)
	if err != nil {
		return nil, err
	}
	x := &serviceClient_Det44SessionDumpClient{stream}
	if err := x.Stream.SendMsg(in); err != nil {
		return nil, err
	}
	if err = x.Stream.SendMsg(&vpe.ControlPing{}); err != nil {
		return nil, err
	}
	return x, nil
}

type RPCService_Det44SessionDumpClient interface {
	Recv() (*Det44SessionDetails, error)
	api.Stream
}

type serviceClient_Det44SessionDumpClient struct {
	api.Stream
}

func (c *serviceClient_Det44SessionDumpClient) Recv() (*Det44SessionDetails, error) {
	msg, err := c.Stream.RecvMsg()
	if err != nil {
		return nil, err
	}
	switch m := msg.(type) {
	case *Det44SessionDetails:
		return m, nil
	case *vpe.ControlPingReply:
		err = c.Stream.Close()
		if err != nil {
			return nil, err
		}
		return nil, io.EOF
	default:
		return nil, fmt.Errorf("unexpected message: %T %v", m, m)
	}
}

func (c *serviceClient) Det44SetTimeouts(ctx context.Context, in *Det44SetTimeouts) (*Det44SetTimeoutsReply, error) {
	out := new(Det44SetTimeoutsReply)
	err := c.conn.Invoke(ctx, in, out)
	if err != nil {
		return nil, err
	}
	return out, api.RetvalToVPPApiError(out.Retval)
}

func (c *serviceClient) NatDetAddDelMap(ctx context.Context, in *NatDetAddDelMap) (*NatDetAddDelMapReply, error) {
	out := new(NatDetAddDelMapReply)
	err := c.conn.Invoke(ctx, in, out)
	if err != nil {
		return nil, err
	}
	return out, api.RetvalToVPPApiError(out.Retval)
}

func (c *serviceClient) NatDetCloseSessionIn(ctx context.Context, in *NatDetCloseSessionIn) (*NatDetCloseSessionInReply, error) {
	out := new(NatDetCloseSessionInReply)
	err := c.conn.Invoke(ctx, in, out)
	if err != nil {
		return nil, err
	}
	return out, api.RetvalToVPPApiError(out.Retval)
}

func (c *serviceClient) NatDetCloseSessionOut(ctx context.Context, in *NatDetCloseSessionOut) (*NatDetCloseSessionOutReply, error) {
	out := new(NatDetCloseSessionOutReply)
	err := c.conn.Invoke(ctx, in, out)
	if err != nil {
		return nil, err
	}
	return out, api.RetvalToVPPApiError(out.Retval)
}

func (c *serviceClient) NatDetForward(ctx context.Context, in *NatDetForward) (*NatDetForwardReply, error) {
	out := new(NatDetForwardReply)
	err := c.conn.Invoke(ctx, in, out)
	if err != nil {
		return nil, err
	}
	return out, api.RetvalToVPPApiError(out.Retval)
}

func (c *serviceClient) NatDetMapDump(ctx context.Context, in *NatDetMapDump) (RPCService_NatDetMapDumpClient, error) {
	stream, err := c.conn.NewStream(ctx)
	if err != nil {
		return nil, err
	}
	x := &serviceClient_NatDetMapDumpClient{stream}
	if err := x.Stream.SendMsg(in); err != nil {
		return nil, err
	}
	if err = x.Stream.SendMsg(&vpe.ControlPing{}); err != nil {
		return nil, err
	}
	return x, nil
}

type RPCService_NatDetMapDumpClient interface {
	Recv() (*NatDetMapDetails, error)
	api.Stream
}

type serviceClient_NatDetMapDumpClient struct {
	api.Stream
}

func (c *serviceClient_NatDetMapDumpClient) Recv() (*NatDetMapDetails, error) {
	msg, err := c.Stream.RecvMsg()
	if err != nil {
		return nil, err
	}
	switch m := msg.(type) {
	case *NatDetMapDetails:
		return m, nil
	case *vpe.ControlPingReply:
		err = c.Stream.Close()
		if err != nil {
			return nil, err
		}
		return nil, io.EOF
	default:
		return nil, fmt.Errorf("unexpected message: %T %v", m, m)
	}
}

func (c *serviceClient) NatDetReverse(ctx context.Context, in *NatDetReverse) (*NatDetReverseReply, error) {
	out := new(NatDetReverseReply)
	err := c.conn.Invoke(ctx, in, out)
	if err != nil {
		return nil, err
	}
	return out, api.RetvalToVPPApiError(out.Retval)
}

func (c *serviceClient) NatDetSessionDump(ctx context.Context, in *NatDetSessionDump) (RPCService_NatDetSessionDumpClient, error) {
	stream, err := c.conn.NewStream(ctx)
	if err != nil {
		return nil, err
	}
	x := &serviceClient_NatDetSessionDumpClient{stream}
	if err := x.Stream.SendMsg(in); err != nil {
		return nil, err
	}
	if err = x.Stream.SendMsg(&vpe.ControlPing{}); err != nil {
		return nil, err
	}
	return x, nil
}

type RPCService_NatDetSessionDumpClient interface {
	Recv() (*NatDetSessionDetails, error)
	api.Stream
}

type serviceClient_NatDetSessionDumpClient struct {
	api.Stream
}

func (c *serviceClient_NatDetSessionDumpClient) Recv() (*NatDetSessionDetails, error) {
	msg, err := c.Stream.RecvMsg()
	if err != nil {
		return nil, err
	}
	switch m := msg.(type) {
	case *NatDetSessionDetails:
		return m, nil
	case *vpe.ControlPingReply:
		err = c.Stream.Close()
		if err != nil {
			return nil, err
		}
		return nil, io.EOF
	default:
		return nil, fmt.Errorf("unexpected message: %T %v", m, m)
	}
}

// Code generated by GoVPP's binapi-generator. DO NOT EDIT.
// versions:
//  binapi-generator: v0.11.0
//  VPP:              25.02-release
// source: plugins/gtpu.api.json

// Package gtpu contains generated bindings for API file gtpu.api.
//
// Contents:
// -  2 enums
// -  2 structs
// - 18 messages
package gtpu

import (
	"strconv"

	api "go.fd.io/govpp/api"
	interface_types "go.fd.io/govpp/binapi/interface_types"
	ip_types "go.fd.io/govpp/binapi/ip_types"
	codec "go.fd.io/govpp/codec"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the GoVPP api package it is being compiled against.
// A compilation error at this line likely means your copy of the
// GoVPP api package needs to be updated.
const _ = api.GoVppAPIPackageIsVersion2

const (
	APIFile    = "gtpu"
	APIVersion = "2.1.0"
	VersionCrc = 0xdbbb4325
)

// GtpuDecapNextType defines enum 'gtpu_decap_next_type'.
type GtpuDecapNextType uint32

const (
	GTPU_API_DECAP_NEXT_DROP GtpuDecapNextType = 0
	GTPU_API_DECAP_NEXT_L2   GtpuDecapNextType = 1
	GTPU_API_DECAP_NEXT_IP4  GtpuDecapNextType = 2
	GTPU_API_DECAP_NEXT_IP6  GtpuDecapNextType = 3
)

var (
	GtpuDecapNextType_name = map[uint32]string{
		0: "GTPU_API_DECAP_NEXT_DROP",
		1: "GTPU_API_DECAP_NEXT_L2",
		2: "GTPU_API_DECAP_NEXT_IP4",
		3: "GTPU_API_DECAP_NEXT_IP6",
	}
	GtpuDecapNextType_value = map[string]uint32{
		"GTPU_API_DECAP_NEXT_DROP": 0,
		"GTPU_API_DECAP_NEXT_L2":   1,
		"GTPU_API_DECAP_NEXT_IP4":  2,
		"GTPU_API_DECAP_NEXT_IP6":  3,
	}
)

func (x GtpuDecapNextType) String() string {
	s, ok := GtpuDecapNextType_name[uint32(x)]
	if ok {
		return s
	}
	return "GtpuDecapNextType(" + strconv.Itoa(int(x)) + ")"
}

// GtpuForwardingType defines enum 'gtpu_forwarding_type'.
type GtpuForwardingType uint32

const (
	GTPU_API_FORWARDING_NONE         GtpuForwardingType = 0
	GTPU_API_FORWARDING_BAD_HEADER   GtpuForwardingType = 1
	GTPU_API_FORWARDING_UNKNOWN_TEID GtpuForwardingType = 2
	GTPU_API_FORWARDING_UNKNOWN_TYPE GtpuForwardingType = 4
)

var (
	GtpuForwardingType_name = map[uint32]string{
		0: "GTPU_API_FORWARDING_NONE",
		1: "GTPU_API_FORWARDING_BAD_HEADER",
		2: "GTPU_API_FORWARDING_UNKNOWN_TEID",
		4: "GTPU_API_FORWARDING_UNKNOWN_TYPE",
	}
	GtpuForwardingType_value = map[string]uint32{
		"GTPU_API_FORWARDING_NONE":         0,
		"GTPU_API_FORWARDING_BAD_HEADER":   1,
		"GTPU_API_FORWARDING_UNKNOWN_TEID": 2,
		"GTPU_API_FORWARDING_UNKNOWN_TYPE": 4,
	}
)

func (x GtpuForwardingType) String() string {
	s, ok := GtpuForwardingType_name[uint32(x)]
	if ok {
		return s
	}
	return "GtpuForwardingType(" + strconv.Itoa(int(x)) + ")"
}

// SwIfCounters defines type 'sw_if_counters'.
type SwIfCounters struct {
	PacketsRx uint64 `binapi:"u64,name=packets_rx" json:"packets_rx,omitempty"`
	PacketsTx uint64 `binapi:"u64,name=packets_tx" json:"packets_tx,omitempty"`
	BytesRx   uint64 `binapi:"u64,name=bytes_rx" json:"bytes_rx,omitempty"`
	BytesTx   uint64 `binapi:"u64,name=bytes_tx" json:"bytes_tx,omitempty"`
}

// TunnelMetrics defines type 'tunnel_metrics'.
type TunnelMetrics struct {
	SwIfIndex interface_types.InterfaceIndex `binapi:"interface_index,name=sw_if_index" json:"sw_if_index,omitempty"`
	Reserved  uint32                         `binapi:"u32,name=reserved" json:"reserved,omitempty"`
	Counters  SwIfCounters                   `binapi:"sw_if_counters,name=counters" json:"counters,omitempty"`
}

// Set gtpu-forward request
//   - is_add - add address if non-zero, else delete
//   - forwarding_type - forward filter (unknown teid, unknown message type or unknown header)
//   - dst_address - forward destination address.
//   - encap_vrf_id - fib identifier used for outgoing packets
//   - decap_next_index - the index of the next node if success
//
// GtpuAddDelForward defines message 'gtpu_add_del_forward'.
// InProgress: the message form may change in the future versions
type GtpuAddDelForward struct {
	IsAdd          bool               `binapi:"bool,name=is_add" json:"is_add,omitempty"`
	DstAddress     ip_types.Address   `binapi:"address,name=dst_address" json:"dst_address,omitempty"`
	ForwardingType GtpuForwardingType `binapi:"gtpu_forwarding_type,name=forwarding_type" json:"forwarding_type,omitempty"`
	EncapVrfID     uint32             `binapi:"u32,name=encap_vrf_id" json:"encap_vrf_id,omitempty"`
	DecapNextIndex GtpuDecapNextType  `binapi:"gtpu_decap_next_type,name=decap_next_index" json:"decap_next_index,omitempty"`
}

func (m *GtpuAddDelForward) Reset()               { *m = GtpuAddDelForward{} }
func (*GtpuAddDelForward) GetMessageName() string { return "gtpu_add_del_forward" }
func (*GtpuAddDelForward) GetCrcString() string   { return "c6ccce13" }
func (*GtpuAddDelForward) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *GtpuAddDelForward) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1      // m.IsAdd
	size += 1      // m.DstAddress.Af
	size += 1 * 16 // m.DstAddress.Un
	size += 4      // m.ForwardingType
	size += 4      // m.EncapVrfID
	size += 4      // m.DecapNextIndex
	return size
}
func (m *GtpuAddDelForward) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeBool(m.IsAdd)
	buf.EncodeUint8(uint8(m.DstAddress.Af))
	buf.EncodeBytes(m.DstAddress.Un.XXX_UnionData[:], 16)
	buf.EncodeUint32(uint32(m.ForwardingType))
	buf.EncodeUint32(m.EncapVrfID)
	buf.EncodeUint32(uint32(m.DecapNextIndex))
	return buf.Bytes(), nil
}
func (m *GtpuAddDelForward) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.IsAdd = buf.DecodeBool()
	m.DstAddress.Af = ip_types.AddressFamily(buf.DecodeUint8())
	copy(m.DstAddress.Un.XXX_UnionData[:], buf.DecodeBytes(16))
	m.ForwardingType = GtpuForwardingType(buf.DecodeUint32())
	m.EncapVrfID = buf.DecodeUint32()
	m.DecapNextIndex = GtpuDecapNextType(buf.DecodeUint32())
	return nil
}

// reply for set or delete GTPU forwarding
//   - retval - return code
//   - sw_if_index - software index of the interface
//
// GtpuAddDelForwardReply defines message 'gtpu_add_del_forward_reply'.
// InProgress: the message form may change in the future versions
type GtpuAddDelForwardReply struct {
	Retval    int32                          `binapi:"i32,name=retval" json:"retval,omitempty"`
	SwIfIndex interface_types.InterfaceIndex `binapi:"interface_index,name=sw_if_index" json:"sw_if_index,omitempty"`
}

func (m *GtpuAddDelForwardReply) Reset()               { *m = GtpuAddDelForwardReply{} }
func (*GtpuAddDelForwardReply) GetMessageName() string { return "gtpu_add_del_forward_reply" }
func (*GtpuAddDelForwardReply) GetCrcString() string   { return "5383d31f" }
func (*GtpuAddDelForwardReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *GtpuAddDelForwardReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	size += 4 // m.SwIfIndex
	return size
}
func (m *GtpuAddDelForwardReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	buf.EncodeUint32(uint32(m.SwIfIndex))
	return buf.Bytes(), nil
}
func (m *GtpuAddDelForwardReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	m.SwIfIndex = interface_types.InterfaceIndex(buf.DecodeUint32())
	return nil
}

// Create or delete a GTPU tunnel
//   - is_add - add address if non-zero, else delete
//   - src_address - GTPU tunnel's source address.
//   - dst_address - GTPU tunnel's destination address.
//   - mcast_sw_if_index - version, O-bit and C-bit (see nsh_packet.h)
//   - encap_vrf_id - fib identifier used for outgoing encapsulated packets
//   - decap_next_index - the index of the next node if success
//   - teid - Local (rx) Tunnel Endpoint Identifier
//   - tteid - Remote (tx) Tunnel Endpoint Identifier
//
// GtpuAddDelTunnel defines message 'gtpu_add_del_tunnel'.
type GtpuAddDelTunnel struct {
	IsAdd          bool                           `binapi:"bool,name=is_add" json:"is_add,omitempty"`
	SrcAddress     ip_types.Address               `binapi:"address,name=src_address" json:"src_address,omitempty"`
	DstAddress     ip_types.Address               `binapi:"address,name=dst_address" json:"dst_address,omitempty"`
	McastSwIfIndex interface_types.InterfaceIndex `binapi:"interface_index,name=mcast_sw_if_index" json:"mcast_sw_if_index,omitempty"`
	EncapVrfID     uint32                         `binapi:"u32,name=encap_vrf_id" json:"encap_vrf_id,omitempty"`
	DecapNextIndex uint32                         `binapi:"u32,name=decap_next_index" json:"decap_next_index,omitempty"`
	Teid           uint32                         `binapi:"u32,name=teid" json:"teid,omitempty"`
	Tteid          uint32                         `binapi:"u32,name=tteid" json:"tteid,omitempty"`
}

func (m *GtpuAddDelTunnel) Reset()               { *m = GtpuAddDelTunnel{} }
func (*GtpuAddDelTunnel) GetMessageName() string { return "gtpu_add_del_tunnel" }
func (*GtpuAddDelTunnel) GetCrcString() string   { return "ca983a2b" }
func (*GtpuAddDelTunnel) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *GtpuAddDelTunnel) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1      // m.IsAdd
	size += 1      // m.SrcAddress.Af
	size += 1 * 16 // m.SrcAddress.Un
	size += 1      // m.DstAddress.Af
	size += 1 * 16 // m.DstAddress.Un
	size += 4      // m.McastSwIfIndex
	size += 4      // m.EncapVrfID
	size += 4      // m.DecapNextIndex
	size += 4      // m.Teid
	size += 4      // m.Tteid
	return size
}
func (m *GtpuAddDelTunnel) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeBool(m.IsAdd)
	buf.EncodeUint8(uint8(m.SrcAddress.Af))
	buf.EncodeBytes(m.SrcAddress.Un.XXX_UnionData[:], 16)
	buf.EncodeUint8(uint8(m.DstAddress.Af))
	buf.EncodeBytes(m.DstAddress.Un.XXX_UnionData[:], 16)
	buf.EncodeUint32(uint32(m.McastSwIfIndex))
	buf.EncodeUint32(m.EncapVrfID)
	buf.EncodeUint32(m.DecapNextIndex)
	buf.EncodeUint32(m.Teid)
	buf.EncodeUint32(m.Tteid)
	return buf.Bytes(), nil
}
func (m *GtpuAddDelTunnel) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.IsAdd = buf.DecodeBool()
	m.SrcAddress.Af = ip_types.AddressFamily(buf.DecodeUint8())
	copy(m.SrcAddress.Un.XXX_UnionData[:], buf.DecodeBytes(16))
	m.DstAddress.Af = ip_types.AddressFamily(buf.DecodeUint8())
	copy(m.DstAddress.Un.XXX_UnionData[:], buf.DecodeBytes(16))
	m.McastSwIfIndex = interface_types.InterfaceIndex(buf.DecodeUint32())
	m.EncapVrfID = buf.DecodeUint32()
	m.DecapNextIndex = buf.DecodeUint32()
	m.Teid = buf.DecodeUint32()
	m.Tteid = buf.DecodeUint32()
	return nil
}

// reply for set or delete an GTPU tunnel
//   - retval - return code
//   - sw_if_index - software index of the interface
//
// GtpuAddDelTunnelReply defines message 'gtpu_add_del_tunnel_reply'.
type GtpuAddDelTunnelReply struct {
	Retval    int32                          `binapi:"i32,name=retval" json:"retval,omitempty"`
	SwIfIndex interface_types.InterfaceIndex `binapi:"interface_index,name=sw_if_index" json:"sw_if_index,omitempty"`
}

func (m *GtpuAddDelTunnelReply) Reset()               { *m = GtpuAddDelTunnelReply{} }
func (*GtpuAddDelTunnelReply) GetMessageName() string { return "gtpu_add_del_tunnel_reply" }
func (*GtpuAddDelTunnelReply) GetCrcString() string   { return "5383d31f" }
func (*GtpuAddDelTunnelReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *GtpuAddDelTunnelReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	size += 4 // m.SwIfIndex
	return size
}
func (m *GtpuAddDelTunnelReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	buf.EncodeUint32(uint32(m.SwIfIndex))
	return buf.Bytes(), nil
}
func (m *GtpuAddDelTunnelReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	m.SwIfIndex = interface_types.InterfaceIndex(buf.DecodeUint32())
	return nil
}

// Create or delete a GTPU tunnel
//   - is_add - add address if non-zero, else delete
//   - src_address - GTPU tunnel's source address.
//   - dst_address - GTPU tunnel's destination address.
//   - mcast_sw_if_index - version, O-bit and C-bit (see nsh_packet.h)
//   - encap_vrf_id - fib identifier used for outgoing encapsulated packets
//   - decap_next_index - the index of the next node if success
//   - teid - Local (rx) Tunnel Endpoint Identifier
//   - tteid - Remote (tx) Tunnel Endpoint Identifier
//   - pdu_extension - add PDU session container extension to each packet
//   - qfi - the QFI to set in the PDU session container, 6 bits only
//
// GtpuAddDelTunnelV2 defines message 'gtpu_add_del_tunnel_v2'.
// InProgress: the message form may change in the future versions
type GtpuAddDelTunnelV2 struct {
	IsAdd          bool                           `binapi:"bool,name=is_add" json:"is_add,omitempty"`
	SrcAddress     ip_types.Address               `binapi:"address,name=src_address" json:"src_address,omitempty"`
	DstAddress     ip_types.Address               `binapi:"address,name=dst_address" json:"dst_address,omitempty"`
	McastSwIfIndex interface_types.InterfaceIndex `binapi:"interface_index,name=mcast_sw_if_index" json:"mcast_sw_if_index,omitempty"`
	EncapVrfID     uint32                         `binapi:"u32,name=encap_vrf_id" json:"encap_vrf_id,omitempty"`
	DecapNextIndex GtpuDecapNextType              `binapi:"gtpu_decap_next_type,name=decap_next_index" json:"decap_next_index,omitempty"`
	Teid           uint32                         `binapi:"u32,name=teid" json:"teid,omitempty"`
	Tteid          uint32                         `binapi:"u32,name=tteid" json:"tteid,omitempty"`
	PduExtension   bool                           `binapi:"bool,name=pdu_extension" json:"pdu_extension,omitempty"`
	Qfi            uint8                          `binapi:"u8,name=qfi" json:"qfi,omitempty"`
}

func (m *GtpuAddDelTunnelV2) Reset()               { *m = GtpuAddDelTunnelV2{} }
func (*GtpuAddDelTunnelV2) GetMessageName() string { return "gtpu_add_del_tunnel_v2" }
func (*GtpuAddDelTunnelV2) GetCrcString() string   { return "a0c30713" }
func (*GtpuAddDelTunnelV2) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *GtpuAddDelTunnelV2) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1      // m.IsAdd
	size += 1      // m.SrcAddress.Af
	size += 1 * 16 // m.SrcAddress.Un
	size += 1      // m.DstAddress.Af
	size += 1 * 16 // m.DstAddress.Un
	size += 4      // m.McastSwIfIndex
	size += 4      // m.EncapVrfID
	size += 4      // m.DecapNextIndex
	size += 4      // m.Teid
	size += 4      // m.Tteid
	size += 1      // m.PduExtension
	size += 1      // m.Qfi
	return size
}
func (m *GtpuAddDelTunnelV2) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeBool(m.IsAdd)
	buf.EncodeUint8(uint8(m.SrcAddress.Af))
	buf.EncodeBytes(m.SrcAddress.Un.XXX_UnionData[:], 16)
	buf.EncodeUint8(uint8(m.DstAddress.Af))
	buf.EncodeBytes(m.DstAddress.Un.XXX_UnionData[:], 16)
	buf.EncodeUint32(uint32(m.McastSwIfIndex))
	buf.EncodeUint32(m.EncapVrfID)
	buf.EncodeUint32(uint32(m.DecapNextIndex))
	buf.EncodeUint32(m.Teid)
	buf.EncodeUint32(m.Tteid)
	buf.EncodeBool(m.PduExtension)
	buf.EncodeUint8(m.Qfi)
	return buf.Bytes(), nil
}
func (m *GtpuAddDelTunnelV2) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.IsAdd = buf.DecodeBool()
	m.SrcAddress.Af = ip_types.AddressFamily(buf.DecodeUint8())
	copy(m.SrcAddress.Un.XXX_UnionData[:], buf.DecodeBytes(16))
	m.DstAddress.Af = ip_types.AddressFamily(buf.DecodeUint8())
	copy(m.DstAddress.Un.XXX_UnionData[:], buf.DecodeBytes(16))
	m.McastSwIfIndex = interface_types.InterfaceIndex(buf.DecodeUint32())
	m.EncapVrfID = buf.DecodeUint32()
	m.DecapNextIndex = GtpuDecapNextType(buf.DecodeUint32())
	m.Teid = buf.DecodeUint32()
	m.Tteid = buf.DecodeUint32()
	m.PduExtension = buf.DecodeBool()
	m.Qfi = buf.DecodeUint8()
	return nil
}

// reply for set or delete an GTPU tunnel
//   - retval - return code
//   - sw_if_index - software index of the interface
//   - counters - Number of packets/bytes that is sent/received via this tunnel. Inaccurate (with in flight packets), sum for the entire set of per-thread counters. Zero for new tunnels.
//
// GtpuAddDelTunnelV2Reply defines message 'gtpu_add_del_tunnel_v2_reply'.
// InProgress: the message form may change in the future versions
type GtpuAddDelTunnelV2Reply struct {
	Retval    int32                          `binapi:"i32,name=retval" json:"retval,omitempty"`
	SwIfIndex interface_types.InterfaceIndex `binapi:"interface_index,name=sw_if_index" json:"sw_if_index,omitempty"`
	Counters  SwIfCounters                   `binapi:"sw_if_counters,name=counters" json:"counters,omitempty"`
}

func (m *GtpuAddDelTunnelV2Reply) Reset()               { *m = GtpuAddDelTunnelV2Reply{} }
func (*GtpuAddDelTunnelV2Reply) GetMessageName() string { return "gtpu_add_del_tunnel_v2_reply" }
func (*GtpuAddDelTunnelV2Reply) GetCrcString() string   { return "62b41304" }
func (*GtpuAddDelTunnelV2Reply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *GtpuAddDelTunnelV2Reply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	size += 4 // m.SwIfIndex
	size += 8 // m.Counters.PacketsRx
	size += 8 // m.Counters.PacketsTx
	size += 8 // m.Counters.BytesRx
	size += 8 // m.Counters.BytesTx
	return size
}
func (m *GtpuAddDelTunnelV2Reply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	buf.EncodeUint32(uint32(m.SwIfIndex))
	buf.EncodeUint64(m.Counters.PacketsRx)
	buf.EncodeUint64(m.Counters.PacketsTx)
	buf.EncodeUint64(m.Counters.BytesRx)
	buf.EncodeUint64(m.Counters.BytesTx)
	return buf.Bytes(), nil
}
func (m *GtpuAddDelTunnelV2Reply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	m.SwIfIndex = interface_types.InterfaceIndex(buf.DecodeUint32())
	m.Counters.PacketsRx = buf.DecodeUint64()
	m.Counters.PacketsTx = buf.DecodeUint64()
	m.Counters.BytesRx = buf.DecodeUint64()
	m.Counters.BytesTx = buf.DecodeUint64()
	return nil
}

// Get list of metrics, use for bulk transfer.
//   - sw_if_index_start - software index of the first interface to return data on.
//   - capacity - max number of interfaces returned.
//
// GtpuGetTransferCounts defines message 'gtpu_get_transfer_counts'.
// InProgress: the message form may change in the future versions
type GtpuGetTransferCounts struct {
	SwIfIndexStart interface_types.InterfaceIndex `binapi:"interface_index,name=sw_if_index_start" json:"sw_if_index_start,omitempty"`
	Capacity       uint32                         `binapi:"u32,name=capacity" json:"capacity,omitempty"`
}

func (m *GtpuGetTransferCounts) Reset()               { *m = GtpuGetTransferCounts{} }
func (*GtpuGetTransferCounts) GetMessageName() string { return "gtpu_get_transfer_counts" }
func (*GtpuGetTransferCounts) GetCrcString() string   { return "61410788" }
func (*GtpuGetTransferCounts) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *GtpuGetTransferCounts) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.SwIfIndexStart
	size += 4 // m.Capacity
	return size
}
func (m *GtpuGetTransferCounts) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(uint32(m.SwIfIndexStart))
	buf.EncodeUint32(m.Capacity)
	return buf.Bytes(), nil
}
func (m *GtpuGetTransferCounts) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.SwIfIndexStart = interface_types.InterfaceIndex(buf.DecodeUint32())
	m.Capacity = buf.DecodeUint32()
	return nil
}

// reply for set or delete GTPU forwarding
//   - retval - return code
//   - count - number of tunnel counters returned, sequential starting at sw_if_index_start.
//   - tunnels - Number of packets/bytes that is sent/received via this tunnel. Inaccurate (with in flight packets), sum for the entire set of per-thread counters.
//
// GtpuGetTransferCountsReply defines message 'gtpu_get_transfer_counts_reply'.
// InProgress: the message form may change in the future versions
type GtpuGetTransferCountsReply struct {
	Retval  int32           `binapi:"i32,name=retval" json:"retval,omitempty"`
	Count   uint32          `binapi:"u32,name=count" json:"-"`
	Tunnels []TunnelMetrics `binapi:"tunnel_metrics[count],name=tunnels" json:"tunnels,omitempty"`
}

func (m *GtpuGetTransferCountsReply) Reset()               { *m = GtpuGetTransferCountsReply{} }
func (*GtpuGetTransferCountsReply) GetMessageName() string { return "gtpu_get_transfer_counts_reply" }
func (*GtpuGetTransferCountsReply) GetCrcString() string   { return "e35f04bc" }
func (*GtpuGetTransferCountsReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *GtpuGetTransferCountsReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	size += 4 // m.Count
	for j1 := 0; j1 < len(m.Tunnels); j1++ {
		var s1 TunnelMetrics
		_ = s1
		if j1 < len(m.Tunnels) {
			s1 = m.Tunnels[j1]
		}
		size += 4 // s1.SwIfIndex
		size += 4 // s1.Reserved
		size += 8 // s1.Counters.PacketsRx
		size += 8 // s1.Counters.PacketsTx
		size += 8 // s1.Counters.BytesRx
		size += 8 // s1.Counters.BytesTx
	}
	return size
}
func (m *GtpuGetTransferCountsReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	buf.EncodeUint32(uint32(len(m.Tunnels)))
	for j0 := 0; j0 < len(m.Tunnels); j0++ {
		var v0 TunnelMetrics // Tunnels
		if j0 < len(m.Tunnels) {
			v0 = m.Tunnels[j0]
		}
		buf.EncodeUint32(uint32(v0.SwIfIndex))
		buf.EncodeUint32(v0.Reserved)
		buf.EncodeUint64(v0.Counters.PacketsRx)
		buf.EncodeUint64(v0.Counters.PacketsTx)
		buf.EncodeUint64(v0.Counters.BytesRx)
		buf.EncodeUint64(v0.Counters.BytesTx)
	}
	return buf.Bytes(), nil
}
func (m *GtpuGetTransferCountsReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	m.Count = buf.DecodeUint32()
	m.Tunnels = make([]TunnelMetrics, m.Count)
	for j0 := 0; j0 < len(m.Tunnels); j0++ {
		m.Tunnels[j0].SwIfIndex = interface_types.InterfaceIndex(buf.DecodeUint32())
		m.Tunnels[j0].Reserved = buf.DecodeUint32()
		m.Tunnels[j0].Counters.PacketsRx = buf.DecodeUint64()
		m.Tunnels[j0].Counters.PacketsTx = buf.DecodeUint64()
		m.Tunnels[j0].Counters.BytesRx = buf.DecodeUint64()
		m.Tunnels[j0].Counters.BytesTx = buf.DecodeUint64()
	}
	return nil
}

// Offload gtpu rx request
//   - hw_if_index - rx hw interface
//   - sw_if_index - gtpu interface to offload
//   - enable - if non-zero enable, else disable
//
// GtpuOffloadRx defines message 'gtpu_offload_rx'.
type GtpuOffloadRx struct {
	HwIfIndex uint32 `binapi:"u32,name=hw_if_index" json:"hw_if_index,omitempty"`
	SwIfIndex uint32 `binapi:"u32,name=sw_if_index" json:"sw_if_index,omitempty"`
	Enable    uint8  `binapi:"u8,name=enable" json:"enable,omitempty"`
}

func (m *GtpuOffloadRx) Reset()               { *m = GtpuOffloadRx{} }
func (*GtpuOffloadRx) GetMessageName() string { return "gtpu_offload_rx" }
func (*GtpuOffloadRx) GetCrcString() string   { return "f0b08786" }
func (*GtpuOffloadRx) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *GtpuOffloadRx) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.HwIfIndex
	size += 4 // m.SwIfIndex
	size += 1 // m.Enable
	return size
}
func (m *GtpuOffloadRx) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.HwIfIndex)
	buf.EncodeUint32(m.SwIfIndex)
	buf.EncodeUint8(m.Enable)
	return buf.Bytes(), nil
}
func (m *GtpuOffloadRx) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.HwIfIndex = buf.DecodeUint32()
	m.SwIfIndex = buf.DecodeUint32()
	m.Enable = buf.DecodeUint8()
	return nil
}

// GtpuOffloadRxReply defines message 'gtpu_offload_rx_reply'.
type GtpuOffloadRxReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *GtpuOffloadRxReply) Reset()               { *m = GtpuOffloadRxReply{} }
func (*GtpuOffloadRxReply) GetMessageName() string { return "gtpu_offload_rx_reply" }
func (*GtpuOffloadRxReply) GetCrcString() string   { return "e8d4e804" }
func (*GtpuOffloadRxReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *GtpuOffloadRxReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *GtpuOffloadRxReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *GtpuOffloadRxReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// dump details of an GTPU tunnel
//   - sw_if_index - software index of the interface
//   - src_address - GTPU tunnel's source address.
//   - dst_address - GTPU tunnel's destination address.
//   - mcast_sw_if_index - version, O-bit and C-bit (see nsh_packet.h)
//   - encap_vrf_id - fib identifier used for outgoing encapsulated packets
//   - decap_next_index - the index of the next node if success
//   - teid - Local (rx) Tunnel Endpoint Identifier
//   - tteid - Remote (tx) Tunnel Endpoint Identifier
//
// GtpuTunnelDetails defines message 'gtpu_tunnel_details'.
type GtpuTunnelDetails struct {
	SwIfIndex      interface_types.InterfaceIndex `binapi:"interface_index,name=sw_if_index" json:"sw_if_index,omitempty"`
	SrcAddress     ip_types.Address               `binapi:"address,name=src_address" json:"src_address,omitempty"`
	DstAddress     ip_types.Address               `binapi:"address,name=dst_address" json:"dst_address,omitempty"`
	McastSwIfIndex interface_types.InterfaceIndex `binapi:"interface_index,name=mcast_sw_if_index" json:"mcast_sw_if_index,omitempty"`
	EncapVrfID     uint32                         `binapi:"u32,name=encap_vrf_id" json:"encap_vrf_id,omitempty"`
	DecapNextIndex uint32                         `binapi:"u32,name=decap_next_index" json:"decap_next_index,omitempty"`
	Teid           uint32                         `binapi:"u32,name=teid" json:"teid,omitempty"`
	Tteid          uint32                         `binapi:"u32,name=tteid" json:"tteid,omitempty"`
}

func (m *GtpuTunnelDetails) Reset()               { *m = GtpuTunnelDetails{} }
func (*GtpuTunnelDetails) GetMessageName() string { return "gtpu_tunnel_details" }
func (*GtpuTunnelDetails) GetCrcString() string   { return "27f434ae" }
func (*GtpuTunnelDetails) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *GtpuTunnelDetails) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4      // m.SwIfIndex
	size += 1      // m.SrcAddress.Af
	size += 1 * 16 // m.SrcAddress.Un
	size += 1      // m.DstAddress.Af
	size += 1 * 16 // m.DstAddress.Un
	size += 4      // m.McastSwIfIndex
	size += 4      // m.EncapVrfID
	size += 4      // m.DecapNextIndex
	size += 4      // m.Teid
	size += 4      // m.Tteid
	return size
}
func (m *GtpuTunnelDetails) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(uint32(m.SwIfIndex))
	buf.EncodeUint8(uint8(m.SrcAddress.Af))
	buf.EncodeBytes(m.SrcAddress.Un.XXX_UnionData[:], 16)
	buf.EncodeUint8(uint8(m.DstAddress.Af))
	buf.EncodeBytes(m.DstAddress.Un.XXX_UnionData[:], 16)
	buf.EncodeUint32(uint32(m.McastSwIfIndex))
	buf.EncodeUint32(m.EncapVrfID)
	buf.EncodeUint32(m.DecapNextIndex)
	buf.EncodeUint32(m.Teid)
	buf.EncodeUint32(m.Tteid)
	return buf.Bytes(), nil
}
func (m *GtpuTunnelDetails) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.SwIfIndex = interface_types.InterfaceIndex(buf.DecodeUint32())
	m.SrcAddress.Af = ip_types.AddressFamily(buf.DecodeUint8())
	copy(m.SrcAddress.Un.XXX_UnionData[:], buf.DecodeBytes(16))
	m.DstAddress.Af = ip_types.AddressFamily(buf.DecodeUint8())
	copy(m.DstAddress.Un.XXX_UnionData[:], buf.DecodeBytes(16))
	m.McastSwIfIndex = interface_types.InterfaceIndex(buf.DecodeUint32())
	m.EncapVrfID = buf.DecodeUint32()
	m.DecapNextIndex = buf.DecodeUint32()
	m.Teid = buf.DecodeUint32()
	m.Tteid = buf.DecodeUint32()
	return nil
}

// Dump GTPU tunnel
//   - sw_if_index - software index of the interface
//
// GtpuTunnelDump defines message 'gtpu_tunnel_dump'.
type GtpuTunnelDump struct {
	SwIfIndex interface_types.InterfaceIndex `binapi:"interface_index,name=sw_if_index" json:"sw_if_index,omitempty"`
}

func (m *GtpuTunnelDump) Reset()               { *m = GtpuTunnelDump{} }
func (*GtpuTunnelDump) GetMessageName() string { return "gtpu_tunnel_dump" }
func (*GtpuTunnelDump) GetCrcString() string   { return "f9e6675e" }
func (*GtpuTunnelDump) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *GtpuTunnelDump) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.SwIfIndex
	return size
}
func (m *GtpuTunnelDump) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(uint32(m.SwIfIndex))
	return buf.Bytes(), nil
}
func (m *GtpuTunnelDump) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.SwIfIndex = interface_types.InterfaceIndex(buf.DecodeUint32())
	return nil
}

// Update GTPU tunnel TX TEID
//   - dst_address - GTPU tunnel's destination address.
//   - encap_vrf_id - fib identifier used for outgoing encapsulated packets
//   - teid - Local (rx) Tunnel Endpoint Identifier
//   - tteid - remote (tx) Tunnel Endpoint Identifier
//
// GtpuTunnelUpdateTteid defines message 'gtpu_tunnel_update_tteid'.
type GtpuTunnelUpdateTteid struct {
	DstAddress ip_types.Address `binapi:"address,name=dst_address" json:"dst_address,omitempty"`
	EncapVrfID uint32           `binapi:"u32,name=encap_vrf_id" json:"encap_vrf_id,omitempty"`
	Teid       uint32           `binapi:"u32,name=teid" json:"teid,omitempty"`
	Tteid      uint32           `binapi:"u32,name=tteid" json:"tteid,omitempty"`
}

func (m *GtpuTunnelUpdateTteid) Reset()               { *m = GtpuTunnelUpdateTteid{} }
func (*GtpuTunnelUpdateTteid) GetMessageName() string { return "gtpu_tunnel_update_tteid" }
func (*GtpuTunnelUpdateTteid) GetCrcString() string   { return "79f33816" }
func (*GtpuTunnelUpdateTteid) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *GtpuTunnelUpdateTteid) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1      // m.DstAddress.Af
	size += 1 * 16 // m.DstAddress.Un
	size += 4      // m.EncapVrfID
	size += 4      // m.Teid
	size += 4      // m.Tteid
	return size
}
func (m *GtpuTunnelUpdateTteid) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint8(uint8(m.DstAddress.Af))
	buf.EncodeBytes(m.DstAddress.Un.XXX_UnionData[:], 16)
	buf.EncodeUint32(m.EncapVrfID)
	buf.EncodeUint32(m.Teid)
	buf.EncodeUint32(m.Tteid)
	return buf.Bytes(), nil
}
func (m *GtpuTunnelUpdateTteid) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.DstAddress.Af = ip_types.AddressFamily(buf.DecodeUint8())
	copy(m.DstAddress.Un.XXX_UnionData[:], buf.DecodeBytes(16))
	m.EncapVrfID = buf.DecodeUint32()
	m.Teid = buf.DecodeUint32()
	m.Tteid = buf.DecodeUint32()
	return nil
}

// GtpuTunnelUpdateTteidReply defines message 'gtpu_tunnel_update_tteid_reply'.
type GtpuTunnelUpdateTteidReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *GtpuTunnelUpdateTteidReply) Reset()               { *m = GtpuTunnelUpdateTteidReply{} }
func (*GtpuTunnelUpdateTteidReply) GetMessageName() string { return "gtpu_tunnel_update_tteid_reply" }
func (*GtpuTunnelUpdateTteidReply) GetCrcString() string   { return "e8d4e804" }
func (*GtpuTunnelUpdateTteidReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *GtpuTunnelUpdateTteidReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *GtpuTunnelUpdateTteidReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *GtpuTunnelUpdateTteidReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// dump details of an GTPU tunnel
//   - sw_if_index - software index of the interface
//   - src_address - GTPU tunnel's source address.
//   - dst_address - GTPU tunnel's destination address.
//   - mcast_sw_if_index - version, O-bit and C-bit (see nsh_packet.h)
//   - encap_vrf_id - fib identifier used for outgoing encapsulated packets
//   - decap_next_index - the index of the next node if success
//   - teid - Local (rx) Tunnel Endpoint Identifier
//   - tteid - Remote (tx) Tunnel Endpoint Identifier
//   - pdu_extension - add PDU session container extension to each packet
//   - qfi - the QFI to set in the PDU session container, 6 bits only
//   - is_forwarding - tunnel used for forwarding packets
//   - forwarding_type - the type of packets forwarded
//   - counters - Number of packets/bytes that is sent/received via this tunnel. Inaccurate (with in flight packets), sum for the entire set of per-thread counters.
//
// GtpuTunnelV2Details defines message 'gtpu_tunnel_v2_details'.
// InProgress: the message form may change in the future versions
type GtpuTunnelV2Details struct {
	SwIfIndex      interface_types.InterfaceIndex `binapi:"interface_index,name=sw_if_index" json:"sw_if_index,omitempty"`
	SrcAddress     ip_types.Address               `binapi:"address,name=src_address" json:"src_address,omitempty"`
	DstAddress     ip_types.Address               `binapi:"address,name=dst_address" json:"dst_address,omitempty"`
	McastSwIfIndex interface_types.InterfaceIndex `binapi:"interface_index,name=mcast_sw_if_index" json:"mcast_sw_if_index,omitempty"`
	EncapVrfID     uint32                         `binapi:"u32,name=encap_vrf_id" json:"encap_vrf_id,omitempty"`
	DecapNextIndex GtpuDecapNextType              `binapi:"gtpu_decap_next_type,name=decap_next_index" json:"decap_next_index,omitempty"`
	Teid           uint32                         `binapi:"u32,name=teid" json:"teid,omitempty"`
	Tteid          uint32                         `binapi:"u32,name=tteid" json:"tteid,omitempty"`
	PduExtension   bool                           `binapi:"bool,name=pdu_extension" json:"pdu_extension,omitempty"`
	Qfi            uint8                          `binapi:"u8,name=qfi" json:"qfi,omitempty"`
	IsForwarding   bool                           `binapi:"bool,name=is_forwarding" json:"is_forwarding,omitempty"`
	ForwardingType GtpuForwardingType             `binapi:"gtpu_forwarding_type,name=forwarding_type" json:"forwarding_type,omitempty"`
	Counters       SwIfCounters                   `binapi:"sw_if_counters,name=counters" json:"counters,omitempty"`
}

func (m *GtpuTunnelV2Details) Reset()               { *m = GtpuTunnelV2Details{} }
func (*GtpuTunnelV2Details) GetMessageName() string { return "gtpu_tunnel_v2_details" }
func (*GtpuTunnelV2Details) GetCrcString() string   { return "8bf4ba92" }
func (*GtpuTunnelV2Details) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *GtpuTunnelV2Details) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4      // m.SwIfIndex
	size += 1      // m.SrcAddress.Af
	size += 1 * 16 // m.SrcAddress.Un
	size += 1      // m.DstAddress.Af
	size += 1 * 16 // m.DstAddress.Un
	size += 4      // m.McastSwIfIndex
	size += 4      // m.EncapVrfID
	size += 4      // m.DecapNextIndex
	size += 4      // m.Teid
	size += 4      // m.Tteid
	size += 1      // m.PduExtension
	size += 1      // m.Qfi
	size += 1      // m.IsForwarding
	size += 4      // m.ForwardingType
	size += 8      // m.Counters.PacketsRx
	size += 8      // m.Counters.PacketsTx
	size += 8      // m.Counters.BytesRx
	size += 8      // m.Counters.BytesTx
	return size
}
func (m *GtpuTunnelV2Details) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(uint32(m.SwIfIndex))
	buf.EncodeUint8(uint8(m.SrcAddress.Af))
	buf.EncodeBytes(m.SrcAddress.Un.XXX_UnionData[:], 16)
	buf.EncodeUint8(uint8(m.DstAddress.Af))
	buf.EncodeBytes(m.DstAddress.Un.XXX_UnionData[:], 16)
	buf.EncodeUint32(uint32(m.McastSwIfIndex))
	buf.EncodeUint32(m.EncapVrfID)
	buf.EncodeUint32(uint32(m.DecapNextIndex))
	buf.EncodeUint32(m.Teid)
	buf.EncodeUint32(m.Tteid)
	buf.EncodeBool(m.PduExtension)
	buf.EncodeUint8(m.Qfi)
	buf.EncodeBool(m.IsForwarding)
	buf.EncodeUint32(uint32(m.ForwardingType))
	buf.EncodeUint64(m.Counters.PacketsRx)
	buf.EncodeUint64(m.Counters.PacketsTx)
	buf.EncodeUint64(m.Counters.BytesRx)
	buf.EncodeUint64(m.Counters.BytesTx)
	return buf.Bytes(), nil
}
func (m *GtpuTunnelV2Details) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.SwIfIndex = interface_types.InterfaceIndex(buf.DecodeUint32())
	m.SrcAddress.Af = ip_types.AddressFamily(buf.DecodeUint8())
	copy(m.SrcAddress.Un.XXX_UnionData[:], buf.DecodeBytes(16))
	m.DstAddress.Af = ip_types.AddressFamily(buf.DecodeUint8())
	copy(m.DstAddress.Un.XXX_UnionData[:], buf.DecodeBytes(16))
	m.McastSwIfIndex = interface_types.InterfaceIndex(buf.DecodeUint32())
	m.EncapVrfID = buf.DecodeUint32()
	m.DecapNextIndex = GtpuDecapNextType(buf.DecodeUint32())
	m.Teid = buf.DecodeUint32()
	m.Tteid = buf.DecodeUint32()
	m.PduExtension = buf.DecodeBool()
	m.Qfi = buf.DecodeUint8()
	m.IsForwarding = buf.DecodeBool()
	m.ForwardingType = GtpuForwardingType(buf.DecodeUint32())
	m.Counters.PacketsRx = buf.DecodeUint64()
	m.Counters.PacketsTx = buf.DecodeUint64()
	m.Counters.BytesRx = buf.DecodeUint64()
	m.Counters.BytesTx = buf.DecodeUint64()
	return nil
}

// Dump GTPU tunnel
//   - sw_if_index - software index of the interface
//
// GtpuTunnelV2Dump defines message 'gtpu_tunnel_v2_dump'.
// InProgress: the message form may change in the future versions
type GtpuTunnelV2Dump struct {
	SwIfIndex interface_types.InterfaceIndex `binapi:"interface_index,name=sw_if_index" json:"sw_if_index,omitempty"`
}

func (m *GtpuTunnelV2Dump) Reset()               { *m = GtpuTunnelV2Dump{} }
func (*GtpuTunnelV2Dump) GetMessageName() string { return "gtpu_tunnel_v2_dump" }
func (*GtpuTunnelV2Dump) GetCrcString() string   { return "f9e6675e" }
func (*GtpuTunnelV2Dump) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *GtpuTunnelV2Dump) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.SwIfIndex
	return size
}
func (m *GtpuTunnelV2Dump) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(uint32(m.SwIfIndex))
	return buf.Bytes(), nil
}
func (m *GtpuTunnelV2Dump) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.SwIfIndex = interface_types.InterfaceIndex(buf.DecodeUint32())
	return nil
}

// Interface set gtpu-bypass request
//   - sw_if_index - interface used to reach neighbor
//   - is_ipv6 - if non-zero, enable ipv6-gtpu-bypass, else ipv4-gtpu-bypass
//   - enable - if non-zero enable, else disable
//
// SwInterfaceSetGtpuBypass defines message 'sw_interface_set_gtpu_bypass'.
type SwInterfaceSetGtpuBypass struct {
	SwIfIndex interface_types.InterfaceIndex `binapi:"interface_index,name=sw_if_index" json:"sw_if_index,omitempty"`
	IsIPv6    bool                           `binapi:"bool,name=is_ipv6" json:"is_ipv6,omitempty"`
	Enable    bool                           `binapi:"bool,name=enable" json:"enable,omitempty"`
}

func (m *SwInterfaceSetGtpuBypass) Reset()               { *m = SwInterfaceSetGtpuBypass{} }
func (*SwInterfaceSetGtpuBypass) GetMessageName() string { return "sw_interface_set_gtpu_bypass" }
func (*SwInterfaceSetGtpuBypass) GetCrcString() string   { return "65247409" }
func (*SwInterfaceSetGtpuBypass) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *SwInterfaceSetGtpuBypass) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.SwIfIndex
	size += 1 // m.IsIPv6
	size += 1 // m.Enable
	return size
}
func (m *SwInterfaceSetGtpuBypass) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(uint32(m.SwIfIndex))
	buf.EncodeBool(m.IsIPv6)
	buf.EncodeBool(m.Enable)
	return buf.Bytes(), nil
}
func (m *SwInterfaceSetGtpuBypass) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.SwIfIndex = interface_types.InterfaceIndex(buf.DecodeUint32())
	m.IsIPv6 = buf.DecodeBool()
	m.Enable = buf.DecodeBool()
	return nil
}

// SwInterfaceSetGtpuBypassReply defines message 'sw_interface_set_gtpu_bypass_reply'.
type SwInterfaceSetGtpuBypassReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *SwInterfaceSetGtpuBypassReply) Reset() { *m = SwInterfaceSetGtpuBypassReply{} }
func (*SwInterfaceSetGtpuBypassReply) GetMessageName() string {
	return "sw_interface_set_gtpu_bypass_reply"
}
func (*SwInterfaceSetGtpuBypassReply) GetCrcString() string { return "e8d4e804" }
func (*SwInterfaceSetGtpuBypassReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *SwInterfaceSetGtpuBypassReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *SwInterfaceSetGtpuBypassReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *SwInterfaceSetGtpuBypassReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

func init() { file_gtpu_binapi_init() }
func file_gtpu_binapi_init() {
	api.RegisterMessage((*GtpuAddDelForward)(nil), "gtpu_add_del_forward_c6ccce13")
	api.RegisterMessage((*GtpuAddDelForwardReply)(nil), "gtpu_add_del_forward_reply_5383d31f")
	api.RegisterMessage((*GtpuAddDelTunnel)(nil), "gtpu_add_del_tunnel_ca983a2b")
	api.RegisterMessage((*GtpuAddDelTunnelReply)(nil), "gtpu_add_del_tunnel_reply_5383d31f")
	api.RegisterMessage((*GtpuAddDelTunnelV2)(nil), "gtpu_add_del_tunnel_v2_a0c30713")
	api.RegisterMessage((*GtpuAddDelTunnelV2Reply)(nil), "gtpu_add_del_tunnel_v2_reply_62b41304")
	api.RegisterMessage((*GtpuGetTransferCounts)(nil), "gtpu_get_transfer_counts_61410788")
	api.RegisterMessage((*GtpuGetTransferCountsReply)(nil), "gtpu_get_transfer_counts_reply_e35f04bc")
	api.RegisterMessage((*GtpuOffloadRx)(nil), "gtpu_offload_rx_f0b08786")
	api.RegisterMessage((*GtpuOffloadRxReply)(nil), "gtpu_offload_rx_reply_e8d4e804")
	api.RegisterMessage((*GtpuTunnelDetails)(nil), "gtpu_tunnel_details_27f434ae")
	api.RegisterMessage((*GtpuTunnelDump)(nil), "gtpu_tunnel_dump_f9e6675e")
	api.RegisterMessage((*GtpuTunnelUpdateTteid)(nil), "gtpu_tunnel_update_tteid_79f33816")
	api.RegisterMessage((*GtpuTunnelUpdateTteidReply)(nil), "gtpu_tunnel_update_tteid_reply_e8d4e804")
	api.RegisterMessage((*GtpuTunnelV2Details)(nil), "gtpu_tunnel_v2_details_8bf4ba92")
	api.RegisterMessage((*GtpuTunnelV2Dump)(nil), "gtpu_tunnel_v2_dump_f9e6675e")
	api.RegisterMessage((*SwInterfaceSetGtpuBypass)(nil), "sw_interface_set_gtpu_bypass_65247409")
	api.RegisterMessage((*SwInterfaceSetGtpuBypassReply)(nil), "sw_interface_set_gtpu_bypass_reply_e8d4e804")
}

// Messages returns list of all messages in this module.
func AllMessages() []api.Message {
	return []api.Message{
		(*GtpuAddDelForward)(nil),
		(*GtpuAddDelForwardReply)(nil),
		(*GtpuAddDelTunnel)(nil),
		(*GtpuAddDelTunnelReply)(nil),
		(*GtpuAddDelTunnelV2)(nil),
		(*GtpuAddDelTunnelV2Reply)(nil),
		(*GtpuGetTransferCounts)(nil),
		(*GtpuGetTransferCountsReply)(nil),
		(*GtpuOffloadRx)(nil),
		(*GtpuOffloadRxReply)(nil),
		(*GtpuTunnelDetails)(nil),
		(*GtpuTunnelDump)(nil),
		(*GtpuTunnelUpdateTteid)(nil),
		(*GtpuTunnelUpdateTteidReply)(nil),
		(*GtpuTunnelV2Details)(nil),
		(*GtpuTunnelV2Dump)(nil),
		(*SwInterfaceSetGtpuBypass)(nil),
		(*SwInterfaceSetGtpuBypassReply)(nil),
	}
}

// Code generated by GoVPP's binapi-generator. DO NOT EDIT.
// versions:
//  binapi-generator: v0.4.0-dev
//  VPP:              21.10-rc0~0-g91d6a9484
// source: /data/vpp/build-root/install-vpp-native/vpp/share/vpp/api/plugins/sfc_plugin.api.json

// Package sfc_plugin contains generated bindings for API file sfc_plugin.api.
//
// Contents:
//   1 alias
//   3 enums
//   8 messages
//
package sfc_plugin

import (
	"strconv"

	api "git.fd.io/govpp.git/api"
	ethernet_types "git.fd.io/govpp.git/examples/binapi/ethernet_types"
	interface_types "git.fd.io/govpp.git/examples/binapi/interface_types"
	codec "git.fd.io/govpp.git/codec"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the GoVPP api package it is being compiled against.
// A compilation error at this line likely means your copy of the
// GoVPP api package needs to be updated.
const _ = api.GoVppAPIPackageIsVersion2

const (
	APIFile    = "sfc_plugin"
	APIVersion = "0.1.0"
	VersionCrc = 0x7098e000
)

// SfcAction defines enum 'sfc_action'.
type SfcAction uint8

const (
	SFC_ACTION_NONE                SfcAction = 0
	SFC_ACTION_ENABLE              SfcAction = 1
	SFC_ACTION_DISABLE             SfcAction = 2
	SFC_ACTION_LOAD_ALL_TABLES     SfcAction = 3
	SFC_ACTION_LOAD_SERVICES_TABLE SfcAction = 4
)

var (
	SfcAction_name = map[uint8]string{
		0: "SFC_ACTION_NONE",
		1: "SFC_ACTION_ENABLE",
		2: "SFC_ACTION_DISABLE",
		3: "SFC_ACTION_LOAD_ALL_TABLES",
		4: "SFC_ACTION_LOAD_SERVICES_TABLE",
	}
	SfcAction_value = map[string]uint8{
		"SFC_ACTION_NONE":                0,
		"SFC_ACTION_ENABLE":              1,
		"SFC_ACTION_DISABLE":             2,
		"SFC_ACTION_LOAD_ALL_TABLES":     3,
		"SFC_ACTION_LOAD_SERVICES_TABLE": 4,
	}
)

func (x SfcAction) String() string {
	s, ok := SfcAction_name[uint8(x)]
	if ok {
		return s
	}
	return "SfcAction(" + strconv.Itoa(int(x)) + ")"
}

// SfcEncap defines enum 'sfc_encap'.
type SfcEncap uint8

const (
	SFC_ENCAP_NONE          SfcEncap = 0
	SFC_ENCAP_INCOMING      SfcEncap = 1
	SFC_ENCAP_OUTGOING      SfcEncap = 2
	SFC_ENCAP_BIDIRECTIONAL SfcEncap = 3
)

var (
	SfcEncap_name = map[uint8]string{
		0: "SFC_ENCAP_NONE",
		1: "SFC_ENCAP_INCOMING",
		2: "SFC_ENCAP_OUTGOING",
		3: "SFC_ENCAP_BIDIRECTIONAL",
	}
	SfcEncap_value = map[string]uint8{
		"SFC_ENCAP_NONE":          0,
		"SFC_ENCAP_INCOMING":      1,
		"SFC_ENCAP_OUTGOING":      2,
		"SFC_ENCAP_BIDIRECTIONAL": 3,
	}
)

func (x SfcEncap) String() string {
	s, ok := SfcEncap_name[uint8(x)]
	if ok {
		return s
	}
	return "SfcEncap(" + strconv.Itoa(int(x)) + ")"
}

// SfcLb defines enum 'sfc_lb'.
type SfcLb uint8

const (
	SFC_LB_NONE       SfcLb = 0
	SFC_LB_MAGLEV     SfcLb = 1
	SFC_LB_ROUNDROBIN SfcLb = 2
)

var (
	SfcLb_name = map[uint8]string{
		0: "SFC_LB_NONE",
		1: "SFC_LB_MAGLEV",
		2: "SFC_LB_ROUNDROBIN",
	}
	SfcLb_value = map[string]uint8{
		"SFC_LB_NONE":       0,
		"SFC_LB_MAGLEV":     1,
		"SFC_LB_ROUNDROBIN": 2,
	}
)

func (x SfcLb) String() string {
	s, ok := SfcLb_name[uint8(x)]
	if ok {
		return s
	}
	return "SfcLb(" + strconv.Itoa(int(x)) + ")"
}

// SvcIdsList defines alias 'svc_ids_list'.
type SvcIdsList [16]uint8

// SfcPathsUpdate defines message 'sfc_paths_update'.
// InProgress: the message form may change in the future versions
type SfcPathsUpdate struct {
	ID     uint16     `binapi:"u16,name=id" json:"id,omitempty"`
	SvcIds SvcIdsList `binapi:"svc_ids_list,name=svc_ids" json:"svc_ids,omitempty"`
	Len    uint8      `binapi:"u8,name=len" json:"len,omitempty"`
}

func (m *SfcPathsUpdate) Reset()               { *m = SfcPathsUpdate{} }
func (*SfcPathsUpdate) GetMessageName() string { return "sfc_paths_update" }
func (*SfcPathsUpdate) GetCrcString() string   { return "147e0bb8" }
func (*SfcPathsUpdate) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *SfcPathsUpdate) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 2      // m.ID
	size += 1 * 16 // m.SvcIds
	size += 1      // m.Len
	return size
}
func (m *SfcPathsUpdate) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint16(m.ID)
	buf.EncodeBytes(m.SvcIds[:], 16)
	buf.EncodeUint8(m.Len)
	return buf.Bytes(), nil
}
func (m *SfcPathsUpdate) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.ID = buf.DecodeUint16()
	copy(m.SvcIds[:], buf.DecodeBytes(16))
	m.Len = buf.DecodeUint8()
	return nil
}

// SfcPathsUpdateReply defines message 'sfc_paths_update_reply'.
// InProgress: the message form may change in the future versions
type SfcPathsUpdateReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *SfcPathsUpdateReply) Reset()               { *m = SfcPathsUpdateReply{} }
func (*SfcPathsUpdateReply) GetMessageName() string { return "sfc_paths_update_reply" }
func (*SfcPathsUpdateReply) GetCrcString() string   { return "e8d4e804" }
func (*SfcPathsUpdateReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *SfcPathsUpdateReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *SfcPathsUpdateReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *SfcPathsUpdateReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// SfcPluginCtrl defines message 'sfc_plugin_ctrl'.
// InProgress: the message form may change in the future versions
type SfcPluginCtrl struct {
	InSrc          interface_types.InterfaceIndex `binapi:"interface_index,name=in_src" json:"in_src,omitempty"`
	InDst          interface_types.InterfaceIndex `binapi:"interface_index,name=in_dst" json:"in_dst,omitempty"`
	OutSrc         interface_types.InterfaceIndex `binapi:"interface_index,name=out_src" json:"out_src,omitempty"`
	OutDst         interface_types.InterfaceIndex `binapi:"interface_index,name=out_dst" json:"out_dst,omitempty"`
	SvcSrcIP       uint32                         `binapi:"u32,name=svc_src_ip" json:"svc_src_ip,omitempty"`
	SvcDstIP       uint32                         `binapi:"u32,name=svc_dst_ip" json:"svc_dst_ip,omitempty"`
	InstanceIP     uint32                         `binapi:"u32,name=instance_ip" json:"instance_ip,omitempty"`
	InstanceMac    ethernet_types.MacAddress      `binapi:"mac_address,name=instance_mac" json:"instance_mac,omitempty"`
	GatewayMac     ethernet_types.MacAddress      `binapi:"mac_address,name=gateway_mac" json:"gateway_mac,omitempty"`
	Action         SfcAction                      `binapi:"sfc_action,name=action" json:"action,omitempty"`
	IsFirstInChain bool                           `binapi:"bool,name=is_first_in_chain" json:"is_first_in_chain,omitempty"`
	Encap          SfcEncap                       `binapi:"sfc_encap,name=encap" json:"encap,omitempty"`
	Lb             SfcLb                          `binapi:"sfc_lb,name=lb" json:"lb,omitempty"`
	ServiceID      uint8                          `binapi:"u8,name=service_id" json:"service_id,omitempty"`
}

func (m *SfcPluginCtrl) Reset()               { *m = SfcPluginCtrl{} }
func (*SfcPluginCtrl) GetMessageName() string { return "sfc_plugin_ctrl" }
func (*SfcPluginCtrl) GetCrcString() string   { return "ce5f3f86" }
func (*SfcPluginCtrl) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *SfcPluginCtrl) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4     // m.InSrc
	size += 4     // m.InDst
	size += 4     // m.OutSrc
	size += 4     // m.OutDst
	size += 4     // m.SvcSrcIP
	size += 4     // m.SvcDstIP
	size += 4     // m.InstanceIP
	size += 1 * 6 // m.InstanceMac
	size += 1 * 6 // m.GatewayMac
	size += 1     // m.Action
	size += 1     // m.IsFirstInChain
	size += 1     // m.Encap
	size += 1     // m.Lb
	size += 1     // m.ServiceID
	return size
}
func (m *SfcPluginCtrl) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(uint32(m.InSrc))
	buf.EncodeUint32(uint32(m.InDst))
	buf.EncodeUint32(uint32(m.OutSrc))
	buf.EncodeUint32(uint32(m.OutDst))
	buf.EncodeUint32(m.SvcSrcIP)
	buf.EncodeUint32(m.SvcDstIP)
	buf.EncodeUint32(m.InstanceIP)
	buf.EncodeBytes(m.InstanceMac[:], 6)
	buf.EncodeBytes(m.GatewayMac[:], 6)
	buf.EncodeUint8(uint8(m.Action))
	buf.EncodeBool(m.IsFirstInChain)
	buf.EncodeUint8(uint8(m.Encap))
	buf.EncodeUint8(uint8(m.Lb))
	buf.EncodeUint8(m.ServiceID)
	return buf.Bytes(), nil
}
func (m *SfcPluginCtrl) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.InSrc = interface_types.InterfaceIndex(buf.DecodeUint32())
	m.InDst = interface_types.InterfaceIndex(buf.DecodeUint32())
	m.OutSrc = interface_types.InterfaceIndex(buf.DecodeUint32())
	m.OutDst = interface_types.InterfaceIndex(buf.DecodeUint32())
	m.SvcSrcIP = buf.DecodeUint32()
	m.SvcDstIP = buf.DecodeUint32()
	m.InstanceIP = buf.DecodeUint32()
	copy(m.InstanceMac[:], buf.DecodeBytes(6))
	copy(m.GatewayMac[:], buf.DecodeBytes(6))
	m.Action = SfcAction(buf.DecodeUint8())
	m.IsFirstInChain = buf.DecodeBool()
	m.Encap = SfcEncap(buf.DecodeUint8())
	m.Lb = SfcLb(buf.DecodeUint8())
	m.ServiceID = buf.DecodeUint8()
	return nil
}

// SfcPluginCtrlReply defines message 'sfc_plugin_ctrl_reply'.
// InProgress: the message form may change in the future versions
type SfcPluginCtrlReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *SfcPluginCtrlReply) Reset()               { *m = SfcPluginCtrlReply{} }
func (*SfcPluginCtrlReply) GetMessageName() string { return "sfc_plugin_ctrl_reply" }
func (*SfcPluginCtrlReply) GetCrcString() string   { return "e8d4e804" }
func (*SfcPluginCtrlReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *SfcPluginCtrlReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *SfcPluginCtrlReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *SfcPluginCtrlReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// SfcServicesReset defines message 'sfc_services_reset'.
// InProgress: the message form may change in the future versions
type SfcServicesReset struct{}

func (m *SfcServicesReset) Reset()               { *m = SfcServicesReset{} }
func (*SfcServicesReset) GetMessageName() string { return "sfc_services_reset" }
func (*SfcServicesReset) GetCrcString() string   { return "51077d14" }
func (*SfcServicesReset) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *SfcServicesReset) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *SfcServicesReset) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *SfcServicesReset) Unmarshal(b []byte) error {
	return nil
}

// SfcServicesResetReply defines message 'sfc_services_reset_reply'.
// InProgress: the message form may change in the future versions
type SfcServicesResetReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *SfcServicesResetReply) Reset()               { *m = SfcServicesResetReply{} }
func (*SfcServicesResetReply) GetMessageName() string { return "sfc_services_reset_reply" }
func (*SfcServicesResetReply) GetCrcString() string   { return "e8d4e804" }
func (*SfcServicesResetReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *SfcServicesResetReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *SfcServicesResetReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *SfcServicesResetReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// SfcServicesUpdate defines message 'sfc_services_update'.
// InProgress: the message form may change in the future versions
type SfcServicesUpdate struct {
	IP         uint32                    `binapi:"u32,name=ip" json:"ip,omitempty"`
	ExpireTime uint32                    `binapi:"u32,name=expire_time" json:"expire_time,omitempty"`
	Mac        ethernet_types.MacAddress `binapi:"mac_address,name=mac" json:"mac,omitempty"`
	ID         uint8                     `binapi:"u8,name=id" json:"id,omitempty"`
	Action     bool                      `binapi:"bool,name=action" json:"action,omitempty"`
}

func (m *SfcServicesUpdate) Reset()               { *m = SfcServicesUpdate{} }
func (*SfcServicesUpdate) GetMessageName() string { return "sfc_services_update" }
func (*SfcServicesUpdate) GetCrcString() string   { return "24ba0e65" }
func (*SfcServicesUpdate) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *SfcServicesUpdate) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4     // m.IP
	size += 4     // m.ExpireTime
	size += 1 * 6 // m.Mac
	size += 1     // m.ID
	size += 1     // m.Action
	return size
}
func (m *SfcServicesUpdate) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.IP)
	buf.EncodeUint32(m.ExpireTime)
	buf.EncodeBytes(m.Mac[:], 6)
	buf.EncodeUint8(m.ID)
	buf.EncodeBool(m.Action)
	return buf.Bytes(), nil
}
func (m *SfcServicesUpdate) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.IP = buf.DecodeUint32()
	m.ExpireTime = buf.DecodeUint32()
	copy(m.Mac[:], buf.DecodeBytes(6))
	m.ID = buf.DecodeUint8()
	m.Action = buf.DecodeBool()
	return nil
}

// SfcServicesUpdateReply defines message 'sfc_services_update_reply'.
// InProgress: the message form may change in the future versions
type SfcServicesUpdateReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *SfcServicesUpdateReply) Reset()               { *m = SfcServicesUpdateReply{} }
func (*SfcServicesUpdateReply) GetMessageName() string { return "sfc_services_update_reply" }
func (*SfcServicesUpdateReply) GetCrcString() string   { return "e8d4e804" }
func (*SfcServicesUpdateReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *SfcServicesUpdateReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *SfcServicesUpdateReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *SfcServicesUpdateReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

func init() { file_sfc_plugin_binapi_init() }
func file_sfc_plugin_binapi_init() {
	api.RegisterMessage((*SfcPathsUpdate)(nil), "sfc_paths_update_147e0bb8")
	api.RegisterMessage((*SfcPathsUpdateReply)(nil), "sfc_paths_update_reply_e8d4e804")
	api.RegisterMessage((*SfcPluginCtrl)(nil), "sfc_plugin_ctrl_ce5f3f86")
	api.RegisterMessage((*SfcPluginCtrlReply)(nil), "sfc_plugin_ctrl_reply_e8d4e804")
	api.RegisterMessage((*SfcServicesReset)(nil), "sfc_services_reset_51077d14")
	api.RegisterMessage((*SfcServicesResetReply)(nil), "sfc_services_reset_reply_e8d4e804")
	api.RegisterMessage((*SfcServicesUpdate)(nil), "sfc_services_update_24ba0e65")
	api.RegisterMessage((*SfcServicesUpdateReply)(nil), "sfc_services_update_reply_e8d4e804")
}

// Messages returns list of all messages in this module.
func AllMessages() []api.Message {
	return []api.Message{
		(*SfcPathsUpdate)(nil),
		(*SfcPathsUpdateReply)(nil),
		(*SfcPluginCtrl)(nil),
		(*SfcPluginCtrlReply)(nil),
		(*SfcServicesReset)(nil),
		(*SfcServicesResetReply)(nil),
		(*SfcServicesUpdate)(nil),
		(*SfcServicesUpdateReply)(nil),
	}
}

// Code generated by GoVPP's binapi-generator. DO NOT EDIT.

package flow

import (
	"context"

	api "git.fd.io/govpp.git/api"
)

// RPCService defines RPC service flow.
type RPCService interface {
	FlowAdd(ctx context.Context, in *FlowAdd) (*FlowAddReply, error)
	FlowDel(ctx context.Context, in *FlowDel) (*FlowDelReply, error)
	FlowDisable(ctx context.Context, in *FlowDisable) (*FlowDisableReply, error)
	FlowEnable(ctx context.Context, in *FlowEnable) (*FlowEnableReply, error)
}

type serviceClient struct {
	conn api.Connection
}

func NewServiceClient(conn api.Connection) RPCService {
	return &serviceClient{conn}
}

func (c *serviceClient) FlowAdd(ctx context.Context, in *FlowAdd) (*FlowAddReply, error) {
	out := new(FlowAddReply)
	err := c.conn.Invoke(ctx, in, out)
	if err != nil {
		return nil, err
	}
	return out, api.RetvalToVPPApiError(out.Retval)
}

func (c *serviceClient) FlowDel(ctx context.Context, in *FlowDel) (*FlowDelReply, error) {
	out := new(FlowDelReply)
	err := c.conn.Invoke(ctx, in, out)
	if err != nil {
		return nil, err
	}
	return out, api.RetvalToVPPApiError(out.Retval)
}

func (c *serviceClient) FlowDisable(ctx context.Context, in *FlowDisable) (*FlowDisableReply, error) {
	out := new(FlowDisableReply)
	err := c.conn.Invoke(ctx, in, out)
	if err != nil {
		return nil, err
	}
	return out, api.RetvalToVPPApiError(out.Retval)
}

func (c *serviceClient) FlowEnable(ctx context.Context, in *FlowEnable) (*FlowEnableReply, error) {
	out := new(FlowEnableReply)
	err := c.conn.Invoke(ctx, in, out)
	if err != nil {
		return nil, err
	}
	return out, api.RetvalToVPPApiError(out.Retval)
}

// Copyright (c) 2017 Cisco and/or its affiliates.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at:
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package api

import (
	"path"
	"reflect"
)

// GoVppAPIPackageIsVersionX is referenced from generated binapi files
// to assert that that code is compatible with this version of the GoVPP api package.
const (
	GoVppAPIPackageIsVersion1 = true
	GoVppAPIPackageIsVersion2 = true
)

// MessageType represents the type of a VPP message derived from message header fields.
type MessageType int

const (
	// RequestMessage represents a VPP request message
	RequestMessage MessageType = iota
	// ReplyMessage represents a VPP reply message
	ReplyMessage
	// EventMessage represents a VPP event message
	EventMessage
	// OtherMessage represents other VPP message
	OtherMessage
)

// Message is an interface that is implemented by all VPP Binary API messages generated by the binapigenerator.
type Message interface {
	// GetMessageName returns the original VPP name of the message, as defined in the VPP API.
	GetMessageName() string

	// GetCrcString returns the string with CRC checksum of the message definition (the string represents a hexadecimal number).
	GetCrcString() string

	// GetMessageType returns the type of the VPP message.
	GetMessageType() MessageType
}

// DataType is an interface that is implemented by all VPP Binary API data types by the binapi_generator.
type DataType interface {
	// GetTypeName returns the original VPP name of the data type, as defined in the VPP API.
	GetTypeName() string
}

var (
	registeredMessages     = make(map[string]map[string]Message)
	registeredMessageTypes = make(map[string]map[reflect.Type]string)
)

// RegisterMessage is called from generated code to register message.
func RegisterMessage(x Message, name string) {
	binapiPath := path.Dir(reflect.TypeOf(x).Elem().PkgPath())
	if _, ok := registeredMessages[binapiPath]; !ok {
		registeredMessages[binapiPath] = make(map[string]Message)
		registeredMessageTypes[binapiPath] = make(map[reflect.Type]string)
	}
	registeredMessages[binapiPath][x.GetMessageName()+"_"+x.GetCrcString()] = x
	registeredMessageTypes[binapiPath][reflect.TypeOf(x)] = name
}

// GetRegisteredMessages returns list of all registered messages.
func GetRegisteredMessages() map[string]map[string]Message {
	return registeredMessages
}

// GetRegisteredMessageTypes returns list of all registered message types.
func GetRegisteredMessageTypes() map[string]map[reflect.Type]string {
	return registeredMessageTypes
}
